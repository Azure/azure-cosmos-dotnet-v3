//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

namespace CosmosBenchmark.Fx
{
    using System;
    using System.Diagnostics.Tracing;
    using System.IO;
    using System.Threading;
    using Azure.Storage.Blobs;

    internal class DiagnosticDataListener : EventListener
    {
        /// <summary>
        /// A constant string representing the container name in Azure Blob Storage.
        /// </summary>
        private const string BlobContainerName = "diagnostics";

        /// <summary>
        /// A constant string representing the diagnostics file path.
        /// </summary>
        private const string DiagnosticsFilePath = "BenchmarkDiagnostics.out";
        private const int MaxDIagnosticFileSize = 100_000_000;
        private const int FileSizeCheckIntervalMs = 5_000;

        /// <summary>
        /// Lock object for synchronization.
        /// </summary>
        private readonly object fileLock = new object();
        private static readonly string BlobPrefix = $"{Environment.MachineName}/{Environment.MachineName}";

        /// <summary>
        /// Number of files 
        /// </summary>
        private int filesCount = 0;

        /// <summary>
        /// Represents a class that performs writing diagnostic data to a file and uploading it to Azure Blob Storage
        /// </summary>
        public DiagnosticDataListener()
        {
            CreateFileIfNotExist();


            /// <summary>
            /// Checks the file size every n milliseconds for diagnostics and creates a new one if the maximum limit is exceeded.
            /// </summary>
            ThreadPool.QueueUserWorkItem(state =>
            {
                while (true)
                {
                    lock (this.fileLock)
                    {
                        CreateFileIfNotExist();

                        FileInfo fileInfo = new FileInfo(DiagnosticsFilePath);
                        long fileSize = fileInfo.Length;

                        if (fileSize > MaxDIagnosticFileSize)
                        {

                            string newFilePath = Path.Combine(fileInfo.DirectoryName, $"{fileInfo.Name}-{this.filesCount}");
                            File.Move(DiagnosticsFilePath, newFilePath, true);
                            this.filesCount++;

                            Utility.TeeTraceInformation("File size exceeded 100MB. Renamed the file and created a new one.");
                        }

                    }

                    Thread.Sleep(FileSizeCheckIntervalMs);
                }
            });
        }

        private static void CreateFileIfNotExist()
        {
            if (!File.Exists(DiagnosticsFilePath))
            {
                File.Create(DiagnosticsFilePath).Close();
            }
        }

        /// <summary>
        /// Listening for events generated by BenchmarkLatencyEventSource
        /// </summary>
        /// <param name="eventData">An instance of <see cref="EventWrittenEventArgs "/> containing the request latency and diagnostics.</param>
        protected override void OnEventWritten(EventWrittenEventArgs eventData)
        {
            lock (this.fileLock)
            {
                try
                {
                    using (StreamWriter writer = new StreamWriter(DiagnosticsFilePath, true))
                    {
                        writer.WriteLine($"{eventData.Payload[2]} ; {eventData.Payload[3]}");
                    }
                }
                catch (Exception ex)
                {
                    Utility.TeeTraceInformation("An exception ocured while writing diagnostic data to the file");
                    Utility.TeeTraceInformation(ex.Message);
                }

            }
        }

        /// <summary>
        /// Uploading all files with diagnostic data to blob storage
        /// </summary>
        /// <param name="config">An instance of <see cref="BenchmarkConfig "/> containing the benchmark tool input parameters.</param>
        public void UploadDiagnostcs(BenchmarkConfig config)
        {

            Utility.TeeTraceInformation("Uploading diagnostics");
            string[] diagnosticFiles = Directory.GetFiles(".", $"{DiagnosticsFilePath}*");

            lock (this.fileLock)
            {
                for (int i = 0; i < diagnosticFiles.Length; i++)
                {
                    try
                    {
                        string diagnosticFile = diagnosticFiles[i];
                        Utility.TeeTraceInformation($"Uploading {i + 1} of {diagnosticFiles.Length} file: {diagnosticFile} ");

                        string BlobName = $"{BlobPrefix}-{i}.out";
                        BlobClient blobClient = GetBlobServiceClient(config, BlobName);

                        blobClient.Upload(diagnosticFile, overwrite: true);
                    }
                    catch (Exception ex)
                    {
                        Utility.TeeTraceInformation("An exception ocured while uploading file to the blob storage");
                        Utility.TeeTraceInformation(ex.Message);
                    }
                }

            }

        }

        private static BlobClient GetBlobServiceClient(BenchmarkConfig config, string BlobName)
        {
            BlobContainerClient blobContainerClient = new BlobContainerClient(config.ResultsStorageConnectionString, BlobContainerName);
            blobContainerClient.CreateIfNotExists();
            return blobContainerClient.GetBlobClient(BlobName);
        }
    }
}
