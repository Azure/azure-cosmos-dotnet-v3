//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

using Microsoft.Data.Encryption.Cryptography;
using System;
using System.Collections.Generic;
using System.Linq;

using static Microsoft.Data.Encryption.Resources.Strings;

namespace Microsoft.Data.Encryption
{
    internal static class ArgumentValidationExtensions
    {
        internal static bool IsNull<T>(this T parameter)
        {
            return null == parameter;
        }

        internal static void ValidateNotNull<T>(this T parameter, string name)
        {
            if (parameter.IsNull())
            {
                throw new MicrosoftDataEncryptionException(ArgNotNull.FormatInvariant(name));
            }
        }

        internal static void ValidateNotNullOrWhitespace(this string parameter, string name)
        {
            if (string.IsNullOrWhiteSpace(parameter))
            {
                throw new MicrosoftDataEncryptionException(ArgNotNullOrWhiteSpace.FormatInvariant(name));
            }
        }

        internal static void ValidateNotNullForEach<T>(this IEnumerable<T> parameters, string name)
        {
            if (parameters.Any(t => t.IsNull()))
            {
                throw new MicrosoftDataEncryptionException(ArgNotNullForEach.FormatInvariant(name));
            }
        }

        internal static void ValidateNotNullOrWhitespaceForEach(this IEnumerable<string> parameters, string name)
        {
            if (parameters.Any(s => string.IsNullOrWhiteSpace(s)))
            {
                throw new MicrosoftDataEncryptionException(ArgNotNullOrWhitespaceForEach.FormatInvariant(name));
            }
        }

        internal static void ValidateNotEmpty<T>(this IEnumerable<T> parameter, string name)
        {
            if (!parameter.Any())
            {
                throw new MicrosoftDataEncryptionException(ArgNotEmpty.FormatInvariant(name));
            }
        }

        internal static void ValidateNotNullOrEmpty<T>(this IEnumerable<T> parameters, string name)
        {
            parameters.ValidateNotNull(name);
            parameters.ValidateNotEmpty(name);
        }

        internal static void ValidateGreaterThanSize<T>(this IEnumerable<T> parameter, int size, string name)
        {
            if (parameter.Count() < size)
            {
                throw new MicrosoftDataEncryptionException(ArgGreaterThanSize.FormatInvariant(name, size));
            }
        }

        internal static void ValidateSize<T>(this IEnumerable<T> parameter, int size, string name)
        {
            if (parameter.Count() != size)
            {
                throw new MicrosoftDataEncryptionException(ArgSize.FormatInvariant(name, size));
            }
        }

        internal static void ValidateType(this object parameter, Type type, string name)
        {
            if (!(parameter.GetType().Equals(type)))
            {
                throw new MicrosoftDataEncryptionException(ArgType.FormatInvariant(name, type));
            }
        }

        internal static void ValidatePositive(this int parameter, string name)
        {
            if (parameter <= 0)
            {
                throw new MicrosoftDataEncryptionException(ArgPositive.FormatInvariant(name));
            }
        }

        internal static void ValidateNotPlaintext(this EncryptionSettings encryptionSettings, string name)
        {
            if (encryptionSettings.EncryptionType == EncryptionType.Plaintext)
            {
                throw new MicrosoftDataEncryptionException(EncryptionSettingsCannotBePlaintext.FormatInvariant(name, nameof(EncryptionType)));
            }
        }
    }
}
