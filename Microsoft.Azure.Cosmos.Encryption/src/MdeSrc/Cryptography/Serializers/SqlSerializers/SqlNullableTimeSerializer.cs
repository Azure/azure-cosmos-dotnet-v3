//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

using System;

namespace Microsoft.Data.Encryption.Cryptography.Serializers
{
    /// <summary>
    /// Contains the methods for serializing and deserializing <see cref="TimeSpan"/>? type data objects
    /// that is compatible with the Always Encrypted feature in SQL Server and Azure SQL Database.
    /// </summary>
    internal class SqlNullableTimeSerializer : Serializer<TimeSpan?>
    {
        private const int DefaultScale = 7;
        private readonly SqlTimeSerializer serializer;

        /// <summary>
        /// The <see cref="Identifier"/> uniquely identifies a particular Serializer implementation.
        /// </summary>
        public override string Identifier => "SQL_Time_Nullable";

        /// <summary>
        /// Gets or sets the number of digits for the fractional part of the seconds.
        /// </summary>
        /// <remarks>
        /// This can be an integer from 0 to 7. The default fractional scale is 7 (100ns).
        /// </remarks>
        /// <exception cref="MicrosoftDataEncryptionException">
        /// Thrown when set to a value that is out of the valid range [0 - 7] for this setting.
        /// </exception>
        public int Scale
        {
            get => serializer.Scale;
            set => serializer.Scale = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlNullableTimeSerializer"/> class.
        /// </summary>
        /// <param name="scale">The number of digits for the fractional part of the seconds.</param>
        /// <exception cref="MicrosoftDataEncryptionException">
        /// Thrown when set to a value that is out of the valid range [0 - 7] for this setting.
        /// </exception>
        public SqlNullableTimeSerializer(int scale = DefaultScale)
        {
            serializer = new SqlTimeSerializer(scale);
        }

        /// <summary>
        /// Deserializes the provided <paramref name="bytes"/>
        /// </summary>
        /// <param name="bytes">The data to be deserialized</param>
        /// <returns>The serialized data</returns>
        /// <exception cref="MicrosoftDataEncryptionException">
        /// The length of <paramref name="bytes"/> is less than 5.
        /// </exception>
        public override TimeSpan? Deserialize(byte[] bytes)
        {
            return bytes.IsNull() ? (TimeSpan?)null : serializer.Deserialize(bytes);
        }

        /// <summary>
        /// Serializes the provided <paramref name="value"/>
        /// </summary>
        /// <param name="value">The value to be serialized</param>
        /// <returns>
        /// An array of bytes with length 5.
        /// </returns>
        /// <exception cref="MicrosoftDataEncryptionException">
        /// <paramref name="value"/> is out of range.
        /// </exception>
        public override byte[] Serialize(TimeSpan? value)
        {
            return value.IsNull() ? null : serializer.Serialize(value.Value);
        }
    }
}
