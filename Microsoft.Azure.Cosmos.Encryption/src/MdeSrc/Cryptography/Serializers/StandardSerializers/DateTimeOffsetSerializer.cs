//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Data.Encryption.Cryptography.Serializers
{
    /// <summary>
    /// Contains the methods for serializing and deserializing <see cref="DateTimeOffset"/> type data objects.
    /// </summary>
    internal class DateTimeOffsetSerializer : Serializer<DateTimeOffset>
    {
        private static readonly DateTimeSerializer DateTimeSerializer = new DateTimeSerializer();
        private static readonly TimeSpanSerializer TimeSpanSerializer = new TimeSpanSerializer();

        /// <summary>
        /// The <see cref="Identifier"/> uniquely identifies a particular Serializer implementation.
        /// </summary>
        public override string Identifier => "DateTimeOffset";

        /// <summary>
        /// Deserializes the provided <paramref name="bytes"/>
        /// </summary>
        /// <param name="bytes">The data to be deserialized</param>
        /// <returns>The serialized data</returns>
        /// <exception cref="MicrosoftDataEncryptionException">
        /// <paramref name="bytes"/> is null.
        /// -or-
        /// The length of <paramref name="bytes"/> is less than 16.
        /// </exception>
        public override DateTimeOffset Deserialize(byte[] bytes)
        {
            const int DateTimeIndex = 0;
            const int TimeSpanIndex = sizeof(long);
            const int MinimumSize = sizeof(long) + sizeof(long);

            bytes.ValidateNotNull(nameof(bytes));
            bytes.ValidateGreaterThanSize(MinimumSize, nameof(bytes));

            byte[] dateTimePart = bytes.Skip(DateTimeIndex).Take(sizeof(long)).ToArray();
            byte[] timeSpanPart = bytes.Skip(TimeSpanIndex).Take(sizeof(long)).ToArray();

            DateTime dateTime = DateTimeSerializer.Deserialize(dateTimePart);
            TimeSpan timeSpan = TimeSpanSerializer.Deserialize(timeSpanPart);

            return new DateTimeOffset(dateTime, timeSpan);
        }

        /// <summary>
        /// Serializes the provided <paramref name="value"/>
        /// </summary>
        /// <param name="value">The value to be serialized</param>
        /// <returns>
        /// An array of bytes with length 16.
        /// </returns>
        public override byte[] Serialize(DateTimeOffset value)
        {
            IEnumerable<byte> dateTimePart = DateTimeSerializer.Serialize(value.DateTime);
            IEnumerable<byte> timeSpanPart = TimeSpanSerializer.Serialize(value.Offset);

            return dateTimePart.Concat(timeSpanPart).ToArray();
        }
    }
}
