<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgGreaterThanSize" xml:space="preserve">
    <value>{0} must contain at least {1} elements.</value>
  </data>
  <data name="ArgNotEmpty" xml:space="preserve">
    <value>{0} cannot be empty.</value>
  </data>
  <data name="ArgNotNull" xml:space="preserve">
    <value>{0} cannot be null.</value>
  </data>
  <data name="ArgNotNullForEach" xml:space="preserve">
    <value>One of more of the elements in {0} is null.</value>
  </data>
  <data name="ArgNotNullOrWhiteSpace" xml:space="preserve">
    <value>{0} cannot be null or empty or consist of only whitespace.</value>
  </data>
  <data name="ArgNotNullOrWhitespaceForEach" xml:space="preserve">
    <value>One or more of the elements in {0} are null or empty or consist of only whitespace.</value>
  </data>
  <data name="ArgNotPlainText" xml:space="preserve">
    <value>The {0} {1} cannot be Plaintext in this context.</value>
  </data>
  <data name="ArgPositive" xml:space="preserve">
    <value>{0} must be a positive integer.</value>
  </data>
  <data name="ArgSize" xml:space="preserve">
    <value>{0} must contain {1} elements.</value>
  </data>
  <data name="ArgType" xml:space="preserve">
    <value>Expected {0} to be of type {1}</value>
  </data>
  <data name="AzureKeyVaultKeyNotFound" xml:space="preserve">
    <value>The key with identifier {0} was not found.</value>
  </data>
  <data name="BaseTypeNotFound" xml:space="preserve">
    <value>Base type was not found</value>
  </data>
  <data name="CipherTextLengthMismatch" xml:space="preserve">
    <value>CipherText length does not match the RSA key size.</value>
  </data>
  <data name="ColumnCountNotEqual" xml:space="preserve">
    <value>{0}.Count does not equal {1}.Count</value>
  </data>
  <data name="DataEncryptionKeyEmpty" xml:space="preserve">
    <value>Empty data encryption key specified.</value>
  </data>
  <data name="DataEncryptionKeyNull" xml:space="preserve">
    <value>Data encryption key cannot be null.</value>
  </data>
  <data name="DecryptionFailed" xml:space="preserve">
    <value>Decryption failed. The last 10 bytes of the encrypted data encryption key are: '{0}'. The first 10 bytes of ciphertext are: '{1}'. {2}</value>
  </data>
  <data name="DefaultAESerializerNotFound" xml:space="preserve">
    <value>A default Always Encrypted compatible serializer cannot be found for type {0}. A serializer can be registered for this type with the {1} method.</value>
  </data>
  <data name="DefaultSerializerNotFound" xml:space="preserve">
    <value>A default serializer cannot be found for type {0}. A serializer can be registered for this type with the {1} method.</value>
  </data>
  <data name="EmptyArgumentInternal" xml:space="preserve">
    <value>Internal error. Empty {0} specified.</value>
  </data>
  <data name="EmptyDataEncryptionKey" xml:space="preserve">
    <value>Empty data encryption key specified.</value>
  </data>
  <data name="EncryptionFailed" xml:space="preserve">
    <value>Encryption failed. The last 10 bytes of the encrypted data encryption key are: '{0}'. {1}</value>
  </data>
  <data name="EncryptionSettingsCannotBePlaintext" xml:space="preserve">
    <value>The {0} {1} cannot be Plaintext in this context.</value>
  </data>
  <data name="HashLengthMismatch" xml:space="preserve">
    <value>Signed hash length does not match the RSA key size.</value>
  </data>
  <data name="InvalidAkvKeyPathTrustedTemplate" xml:space="preserve">
    <value>Invalid Azure Key Vault key path specified: '{0}'. Valid trusted endpoints: {1}.</value>
  </data>
  <data name="InvalidAkvPathTemplate" xml:space="preserve">
    <value>Invalid Azure Key Vault key path specified: '{0}'.</value>
  </data>
  <data name="InvalidAkvUrlTemplate" xml:space="preserve">
    <value>Invalid url specified: '{0}'.</value>
  </data>
  <data name="InvalidAlgorithmVersion" xml:space="preserve">
    <value>The specified ciphertext's encryption algorithm version '{0}' does not match the expected encryption algorithm version '{1}'.</value>
  </data>
  <data name="InvalidAlgorithmVersionTemplate" xml:space="preserve">
    <value>Specified encrypted data encryption key contains an invalid encryption algorithm version '{0}'. Expected version is '{1}'.</value>
  </data>
  <data name="InvalidAuthenticationTag" xml:space="preserve">
    <value>Specified ciphertext has an invalid authentication tag.</value>
  </data>
  <data name="InvalidCiphertextLengthTemplate" xml:space="preserve">
    <value>The specified encrypted data encryption key's ciphertext length: {0} does not match the ciphertext length: {1} when using key encryption key (Azure Key Vault key) in '{2}'. The encrypted data encryption key may be corrupt, or the specified Azure Key Vault key path may be incorrect.</value>
  </data>
  <data name="InvalidCipherTextSize" xml:space="preserve">
    <value>Specified ciphertext has an invalid size of {0} bytes, which is below the minimum {1} bytes required for decryption.</value>
  </data>
  <data name="InvalidDataEncryptionKeySize" xml:space="preserve">
    <value>The data encryption key has been successfully decrypted but its length: {0} does not match the length: 32 for algorithm 'AEAD_AES_256_CBC_HMAC_SHA256'. Verify the encrypted value of the data encryption key.</value>
  </data>
  <data name="InvalidEncryptionType" xml:space="preserve">
    <value>Encryption type '{0}' specified for the column is either invalid or corrupted. Valid encryption types for algorithm 'AEAD_AES_256_CBC_HMAC_SHA256' are: 'Plaintext', 'Deterministic', 'Randomized'.</value>
  </data>
  <data name="InvalidHexString" xml:space="preserve">
    <value>The input is not a valid Hexadecimal string as it contains a non hexadecimal character, is not a multiple of 2 characters, or does not begin with '0x'.</value>
  </data>
  <data name="InvalidKeyAlgorithm" xml:space="preserve">
    <value>Invalid key encryption algorithm specified: '{0}'. Expected value: '{1}'.</value>
  </data>
  <data name="InvalidSignature" xml:space="preserve">
    <value>Invalid signature of the encrypted data encryption key computed.</value>
  </data>
  <data name="InvalidSignatureLengthTemplate" xml:space="preserve">
    <value>The specified encrypted data encryption key's signature length: {0} does not match the signature length: {1} when using key encryption key (Azure Key Vault key) in '{2}'. The encrypted data encryption key may be corrupt, or the specified Azure Key Vault key path may be incorrect.</value>
  </data>
  <data name="InvalidSignatureTemplate" xml:space="preserve">
    <value>The specified encrypted data encryption key signature does not match the signature computed with the key encryption key (Asymmetric key in Azure Key Vault) in '{0}'. The encrypted data encryption key may be corrupt, or the specified path may be incorrect.</value>
  </data>
  <data name="InvalidTrustedEndpointTemplate" xml:space="preserve">
    <value>Invalid trusted endpoint specified: '{0}'; a trusted endpoint must have a value.</value>
  </data>
  <data name="NonRsaKeyTemplate" xml:space="preserve">
    <value>Cannot use a non-RSA key: '{0}'.</value>
  </data>
  <data name="NullAkvPath" xml:space="preserve">
    <value>Azure Key Vault key path cannot be null.</value>
  </data>
  <data name="NullHash" xml:space="preserve">
    <value>Hash should not be null while decrypting encrypted data encryption key.</value>
  </data>
  <data name="ReaderKeyStoreProviderNotFound" xml:space="preserve">
    <value>This reader's registered encryption key store providers does not contain a provider named {0}.</value>
  </data>
  <data name="SerializerNotFound" xml:space="preserve">
    <value>No serializer found for {0}</value>
  </data>
  <data name="UseDefaultSerialization" xml:space="preserve">
    <value>Use default serialization.</value>
  </data>
  <data name="ValueOutOfRange" xml:space="preserve">
    <value>Parameter value {0} is out of range.</value>
  </data>
</root>