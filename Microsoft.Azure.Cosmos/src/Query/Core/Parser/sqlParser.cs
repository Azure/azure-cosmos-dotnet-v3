//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from sql.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
internal partial class sqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, K_ALL=28, K_AND=29, K_ARRAY=30, K_AS=31, 
		K_ASC=32, K_BETWEEN=33, K_BY=34, K_DESC=35, K_DISTINCT=36, K_ESCAPE=37, 
		K_EXISTS=38, K_FIRST=39, K_FALSE=40, K_FROM=41, K_GROUP=42, K_IN=43, K_JOIN=44, 
		K_LAST=45, K_LEFT=46, K_LIKE=47, K_LIMIT=48, K_NOT=49, K_NULL=50, K_OFFSET=51, 
		K_OR=52, K_ORDER=53, K_RANK=54, K_RIGHT=55, K_SELECT=56, K_TOP=57, K_TRUE=58, 
		K_UDF=59, K_UNDEFINED=60, K_VALUE=61, K_WHERE=62, WS=63, NUMERIC_LITERAL=64, 
		STRING_LITERAL=65, LEX_IDENTIFIER=66, PARAMETER=67;
	public const int
		RULE_program = 0, RULE_sql_query = 1, RULE_select_clause = 2, RULE_top_spec = 3, 
		RULE_selection = 4, RULE_select_star_spec = 5, RULE_select_value_spec = 6, 
		RULE_select_list_spec = 7, RULE_select_item = 8, RULE_from_clause = 9, 
		RULE_collection_expression = 10, RULE_collection = 11, RULE_path_expression = 12, 
		RULE_where_clause = 13, RULE_group_by_clause = 14, RULE_order_by_clause = 15, 
		RULE_score_expression_order_by_items = 16, RULE_score_expression_order_by_item = 17, 
		RULE_order_by_items = 18, RULE_order_by_item = 19, RULE_sort_order = 20, 
		RULE_offset_limit_clause = 21, RULE_offset_count = 22, RULE_limit_count = 23, 
		RULE_scalar_expression = 24, RULE_logical_scalar_expression = 25, RULE_in_scalar_expression = 26, 
		RULE_like_scalar_expression = 27, RULE_escape_expression = 28, RULE_binary_scalar_expression = 29, 
		RULE_multiplicative_operator = 30, RULE_additive_operator = 31, RULE_relational_operator = 32, 
		RULE_equality_operator = 33, RULE_bitwise_and_operator = 34, RULE_bitwise_exclusive_or_operator = 35, 
		RULE_bitwise_inclusive_or_operator = 36, RULE_string_concat_operator = 37, 
		RULE_unary_scalar_expression = 38, RULE_unary_operator = 39, RULE_primary_expression = 40, 
		RULE_function_call_scalar_expression = 41, RULE_scalar_expression_list = 42, 
		RULE_object_property_list = 43, RULE_object_property = 44, RULE_identifier = 45, 
		RULE_literal = 46;
	public static readonly string[] ruleNames = {
		"program", "sql_query", "select_clause", "top_spec", "selection", "select_star_spec", 
		"select_value_spec", "select_list_spec", "select_item", "from_clause", 
		"collection_expression", "collection", "path_expression", "where_clause", 
		"group_by_clause", "order_by_clause", "score_expression_order_by_items", 
		"score_expression_order_by_item", "order_by_items", "order_by_item", "sort_order", 
		"offset_limit_clause", "offset_count", "limit_count", "scalar_expression", 
		"logical_scalar_expression", "in_scalar_expression", "like_scalar_expression", 
		"escape_expression", "binary_scalar_expression", "multiplicative_operator", 
		"additive_operator", "relational_operator", "equality_operator", "bitwise_and_operator", 
		"bitwise_exclusive_or_operator", "bitwise_inclusive_or_operator", "string_concat_operator", 
		"unary_scalar_expression", "unary_operator", "primary_expression", "function_call_scalar_expression", 
		"scalar_expression_list", "object_property_list", "object_property", "identifier", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "','", "'('", "')'", "'.'", "'['", "']'", "'?'", "':'", "'??'", 
		"'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'>='", "'<='", "'='", "'!='", 
		"'&'", "'^'", "'|'", "'||'", "'~'", "'{'", "'}'", null, null, null, null, 
		null, null, null, null, null, null, null, null, "'false'", null, null, 
		null, null, null, null, null, null, null, "'null'", null, null, null, 
		null, null, null, null, "'true'", "'udf'", "'undefined'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "K_ALL", "K_AND", "K_ARRAY", "K_AS", "K_ASC", 
		"K_BETWEEN", "K_BY", "K_DESC", "K_DISTINCT", "K_ESCAPE", "K_EXISTS", "K_FIRST", 
		"K_FALSE", "K_FROM", "K_GROUP", "K_IN", "K_JOIN", "K_LAST", "K_LEFT", 
		"K_LIKE", "K_LIMIT", "K_NOT", "K_NULL", "K_OFFSET", "K_OR", "K_ORDER", 
		"K_RANK", "K_RIGHT", "K_SELECT", "K_TOP", "K_TRUE", "K_UDF", "K_UNDEFINED", 
		"K_VALUE", "K_WHERE", "WS", "NUMERIC_LITERAL", "STRING_LITERAL", "LEX_IDENTIFIER", 
		"PARAMETER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(sqlParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; sql_query();
			State = 95; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_queryContext : ParserRuleContext {
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Offset_limit_clauseContext offset_limit_clause() {
			return GetRuleContext<Offset_limit_clauseContext>(0);
		}
		public Sql_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSql_query(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSql_query(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_query(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_queryContext sql_query() {
		Sql_queryContext _localctx = new Sql_queryContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; select_clause();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_FROM) {
				{
				State = 98; from_clause();
				}
			}

			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 101; where_clause();
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_GROUP) {
				{
				State = 104; group_by_clause();
				}
			}

			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 107; order_by_clause();
				}
			}

			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_OFFSET) {
				{
				State = 110; offset_limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(sqlParser.K_SELECT, 0); }
		public SelectionContext selection() {
			return GetRuleContext<SelectionContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(sqlParser.K_DISTINCT, 0); }
		public Top_specContext top_spec() {
			return GetRuleContext<Top_specContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(K_SELECT);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_DISTINCT) {
				{
				State = 114; Match(K_DISTINCT);
				}
			}

			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TOP) {
				{
				State = 117; top_spec();
				}
			}

			State = 120; selection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_specContext : ParserRuleContext {
		public ITerminalNode K_TOP() { return GetToken(sqlParser.K_TOP, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Top_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterTop_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitTop_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_specContext top_spec() {
		Top_specContext _localctx = new Top_specContext(Context, State);
		EnterRule(_localctx, 6, RULE_top_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(K_TOP);
			State = 123;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public Select_star_specContext select_star_spec() {
			return GetRuleContext<Select_star_specContext>(0);
		}
		public Select_value_specContext select_value_spec() {
			return GetRuleContext<Select_value_specContext>(0);
		}
		public Select_list_specContext select_list_spec() {
			return GetRuleContext<Select_list_specContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_selection);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; select_star_spec();
				}
				break;
			case K_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; select_value_spec();
				}
				break;
			case T__2:
			case T__5:
			case T__12:
			case T__13:
			case T__24:
			case T__25:
			case K_ALL:
			case K_ARRAY:
			case K_EXISTS:
			case K_FIRST:
			case K_FALSE:
			case K_LAST:
			case K_LEFT:
			case K_NOT:
			case K_NULL:
			case K_RIGHT:
			case K_TRUE:
			case K_UDF:
			case K_UNDEFINED:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case LEX_IDENTIFIER:
			case PARAMETER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; select_list_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_star_specContext : ParserRuleContext {
		public Select_star_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_star_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_star_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_star_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_star_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_star_specContext select_star_spec() {
		Select_star_specContext _localctx = new Select_star_specContext(Context, State);
		EnterRule(_localctx, 10, RULE_select_star_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_value_specContext : ParserRuleContext {
		public ITerminalNode K_VALUE() { return GetToken(sqlParser.K_VALUE, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Select_value_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_value_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_value_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_value_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_value_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_value_specContext select_value_spec() {
		Select_value_specContext _localctx = new Select_value_specContext(Context, State);
		EnterRule(_localctx, 12, RULE_select_value_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(K_VALUE);
			State = 133; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_specContext : ParserRuleContext {
		public Select_itemContext[] select_item() {
			return GetRuleContexts<Select_itemContext>();
		}
		public Select_itemContext select_item(int i) {
			return GetRuleContext<Select_itemContext>(i);
		}
		public Select_list_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_specContext select_list_spec() {
		Select_list_specContext _localctx = new Select_list_specContext(Context, State);
		EnterRule(_localctx, 14, RULE_select_list_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; select_item();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 136; Match(T__1);
				State = 137; select_item();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_itemContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(sqlParser.K_AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Select_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_itemContext select_item() {
		Select_itemContext _localctx = new Select_itemContext(Context, State);
		EnterRule(_localctx, 16, RULE_select_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; scalar_expression(0);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_AS) {
				{
				State = 144; Match(K_AS);
				State = 145; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode K_FROM() { return GetToken(sqlParser.K_FROM, 0); }
		public Collection_expressionContext collection_expression() {
			return GetRuleContext<Collection_expressionContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(K_FROM);
			State = 149; collection_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_expressionContext : ParserRuleContext {
		public Collection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_expression; } }
	 
		public Collection_expressionContext() { }
		public virtual void CopyFrom(Collection_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JoinCollectionExpressionContext : Collection_expressionContext {
		public Collection_expressionContext[] collection_expression() {
			return GetRuleContexts<Collection_expressionContext>();
		}
		public Collection_expressionContext collection_expression(int i) {
			return GetRuleContext<Collection_expressionContext>(i);
		}
		public ITerminalNode K_JOIN() { return GetToken(sqlParser.K_JOIN, 0); }
		public JoinCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterJoinCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitJoinCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasedCollectionExpressionContext : Collection_expressionContext {
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(sqlParser.K_AS, 0); }
		public AliasedCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAliasedCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAliasedCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasedCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIteratorCollectionExpressionContext : Collection_expressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(sqlParser.K_IN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public ArrayIteratorCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayIteratorCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayIteratorCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIteratorCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_expressionContext collection_expression() {
		return collection_expression(0);
	}

	private Collection_expressionContext collection_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Collection_expressionContext _localctx = new Collection_expressionContext(Context, _parentState);
		Collection_expressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_collection_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new AliasedCollectionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 152; collection();
				State = 157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 153; Match(K_AS);
						}
					}

					State = 156; identifier();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ArrayIteratorCollectionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159; identifier();
				State = 160; Match(K_IN);
				State = 161; collection();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinCollectionExpressionContext(new Collection_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_collection_expression);
					State = 165;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 166; Match(K_JOIN);
					State = 167; collection_expression(2);
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
	 
		public CollectionContext() { }
		public virtual void CopyFrom(CollectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputPathCollectionContext : CollectionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public InputPathCollectionContext(CollectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterInputPathCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitInputPathCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputPathCollection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryCollectionContext : CollectionContext {
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public SubqueryCollectionContext(CollectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSubqueryCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSubqueryCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_collection);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ALL:
			case K_FIRST:
			case K_LAST:
			case LEX_IDENTIFIER:
				_localctx = new InputPathCollectionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; identifier();
				State = 175;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 174; path_expression(0);
					}
					break;
				}
				}
				break;
			case T__2:
				_localctx = new SubqueryCollectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; Match(T__2);
				State = 178; sql_query();
				State = 179; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
	 
		public Path_expressionContext() { }
		public virtual void CopyFrom(Path_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringPathExpressionContext : Path_expressionContext {
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public StringPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterStringPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitStringPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EpsilonPathExpressionContext : Path_expressionContext {
		public EpsilonPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEpsilonPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEpsilonPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEpsilonPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierPathExpressionContext : Path_expressionContext {
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIdentifierPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIdentifierPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberPathExpressionContext : Path_expressionContext {
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public NumberPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterNumberPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitNumberPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		return path_expression(0);
	}

	private Path_expressionContext path_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Path_expressionContext _localctx = new Path_expressionContext(Context, _parentState);
		Path_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_path_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EpsilonPathExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new IdentifierPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 184;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 185; Match(T__4);
						State = 186; identifier();
						}
						break;
					case 2:
						{
						_localctx = new NumberPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 187;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 188; Match(T__5);
						State = 189; Match(NUMERIC_LITERAL);
						State = 190; Match(T__6);
						}
						break;
					case 3:
						{
						_localctx = new StringPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 191;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 192; Match(T__5);
						State = 193; Match(STRING_LITERAL);
						State = 194; Match(T__6);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(sqlParser.K_WHERE, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(K_WHERE);
			State = 201; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		public ITerminalNode K_GROUP() { return GetToken(sqlParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(sqlParser.K_BY, 0); }
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_group_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(K_GROUP);
			State = 204; Match(K_BY);
			State = 205; scalar_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode K_ORDER() { return GetToken(sqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(sqlParser.K_BY, 0); }
		public Order_by_itemsContext order_by_items() {
			return GetRuleContext<Order_by_itemsContext>(0);
		}
		public ITerminalNode K_RANK() { return GetToken(sqlParser.K_RANK, 0); }
		public Score_expression_order_by_itemsContext score_expression_order_by_items() {
			return GetRuleContext<Score_expression_order_by_itemsContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_order_by_clause);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; Match(K_ORDER);
				State = 208; Match(K_BY);
				State = 209; order_by_items();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(K_ORDER);
				State = 211; Match(K_BY);
				State = 212; Match(K_RANK);
				State = 213; score_expression_order_by_items();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Score_expression_order_by_itemsContext : ParserRuleContext {
		public Score_expression_order_by_itemContext[] score_expression_order_by_item() {
			return GetRuleContexts<Score_expression_order_by_itemContext>();
		}
		public Score_expression_order_by_itemContext score_expression_order_by_item(int i) {
			return GetRuleContext<Score_expression_order_by_itemContext>(i);
		}
		public Score_expression_order_by_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score_expression_order_by_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterScore_expression_order_by_items(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitScore_expression_order_by_items(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScore_expression_order_by_items(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Score_expression_order_by_itemsContext score_expression_order_by_items() {
		Score_expression_order_by_itemsContext _localctx = new Score_expression_order_by_itemsContext(Context, State);
		EnterRule(_localctx, 32, RULE_score_expression_order_by_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; score_expression_order_by_item();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 217; Match(T__1);
				State = 218; score_expression_order_by_item();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Score_expression_order_by_itemContext : ParserRuleContext {
		public Function_call_scalar_expressionContext function_call_scalar_expression() {
			return GetRuleContext<Function_call_scalar_expressionContext>(0);
		}
		public Sort_orderContext sort_order() {
			return GetRuleContext<Sort_orderContext>(0);
		}
		public Score_expression_order_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score_expression_order_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterScore_expression_order_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitScore_expression_order_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScore_expression_order_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Score_expression_order_by_itemContext score_expression_order_by_item() {
		Score_expression_order_by_itemContext _localctx = new Score_expression_order_by_itemContext(Context, State);
		EnterRule(_localctx, 34, RULE_score_expression_order_by_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; function_call_scalar_expression();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 225; sort_order();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_itemsContext : ParserRuleContext {
		public Order_by_itemContext[] order_by_item() {
			return GetRuleContexts<Order_by_itemContext>();
		}
		public Order_by_itemContext order_by_item(int i) {
			return GetRuleContext<Order_by_itemContext>(i);
		}
		public Order_by_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_items(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_items(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_items(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_itemsContext order_by_items() {
		Order_by_itemsContext _localctx = new Order_by_itemsContext(Context, State);
		EnterRule(_localctx, 36, RULE_order_by_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; order_by_item();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 229; Match(T__1);
				State = 230; order_by_item();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_itemContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Sort_orderContext sort_order() {
			return GetRuleContext<Sort_orderContext>(0);
		}
		public Order_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_itemContext order_by_item() {
		Order_by_itemContext _localctx = new Order_by_itemContext(Context, State);
		EnterRule(_localctx, 38, RULE_order_by_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; scalar_expression(0);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 237; sort_order();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_orderContext : ParserRuleContext {
		public ITerminalNode K_ASC() { return GetToken(sqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(sqlParser.K_DESC, 0); }
		public Sort_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSort_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSort_order(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_orderContext sort_order() {
		Sort_orderContext _localctx = new Sort_orderContext(Context, State);
		EnterRule(_localctx, 40, RULE_sort_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = TokenStream.LA(1);
			if ( !(_la==K_ASC || _la==K_DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_limit_clauseContext : ParserRuleContext {
		public ITerminalNode K_OFFSET() { return GetToken(sqlParser.K_OFFSET, 0); }
		public Offset_countContext offset_count() {
			return GetRuleContext<Offset_countContext>(0);
		}
		public ITerminalNode K_LIMIT() { return GetToken(sqlParser.K_LIMIT, 0); }
		public Limit_countContext limit_count() {
			return GetRuleContext<Limit_countContext>(0);
		}
		public Offset_limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_limit_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOffset_limit_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOffset_limit_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_limit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_limit_clauseContext offset_limit_clause() {
		Offset_limit_clauseContext _localctx = new Offset_limit_clauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_offset_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(K_OFFSET);
			State = 243; offset_count();
			State = 244; Match(K_LIMIT);
			State = 245; limit_count();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_countContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Offset_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOffset_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOffset_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_countContext offset_count() {
		Offset_countContext _localctx = new Offset_countContext(Context, State);
		EnterRule(_localctx, 44, RULE_offset_count);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_countContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Limit_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLimit_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLimit_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_countContext limit_count() {
		Limit_countContext _localctx = new Limit_countContext(Context, State);
		EnterRule(_localctx, 46, RULE_limit_count);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expressionContext : ParserRuleContext {
		public Scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression; } }
	 
		public Scalar_expressionContext() { }
		public virtual void CopyFrom(Scalar_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalScalarExpressionContext : Scalar_expressionContext {
		public Logical_scalar_expressionContext logical_scalar_expression() {
			return GetRuleContext<Logical_scalar_expressionContext>(0);
		}
		public LogicalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLogicalScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLogicalScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalScalarExpressionContext : Scalar_expressionContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public ConditionalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterConditionalScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitConditionalScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceScalarExpressionContext : Scalar_expressionContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public CoalesceScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterCoalesceScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitCoalesceScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenScalarExpressionContext : Scalar_expressionContext {
		public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		public ITerminalNode K_BETWEEN() { return GetToken(sqlParser.K_BETWEEN, 0); }
		public ITerminalNode K_AND() { return GetToken(sqlParser.K_AND, 0); }
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public BetweenScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBetweenScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBetweenScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expressionContext scalar_expression() {
		return scalar_expression(0);
	}

	private Scalar_expressionContext scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Scalar_expressionContext _localctx = new Scalar_expressionContext(Context, _parentState);
		Scalar_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_scalar_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				_localctx = new LogicalScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 252; logical_scalar_expression(0);
				}
				break;
			case 2:
				{
				_localctx = new BetweenScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 253; binary_scalar_expression(0);
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 254; Match(K_NOT);
					}
				}

				State = 257; Match(K_BETWEEN);
				State = 258; binary_scalar_expression(0);
				State = 259; Match(K_AND);
				State = 260; binary_scalar_expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 275;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 273;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ConditionalScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
						State = 264;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 265; Match(T__7);
						State = 266; scalar_expression(0);
						State = 267; Match(T__8);
						State = 268; scalar_expression(5);
						}
						break;
					case 2:
						{
						_localctx = new CoalesceScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
						State = 270;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 271; Match(T__9);
						State = 272; scalar_expression(4);
						}
						break;
					}
					} 
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_scalar_expressionContext : ParserRuleContext {
		public Binary_scalar_expressionContext binary_scalar_expression() {
			return GetRuleContext<Binary_scalar_expressionContext>(0);
		}
		public In_scalar_expressionContext in_scalar_expression() {
			return GetRuleContext<In_scalar_expressionContext>(0);
		}
		public Like_scalar_expressionContext like_scalar_expression() {
			return GetRuleContext<Like_scalar_expressionContext>(0);
		}
		public Logical_scalar_expressionContext[] logical_scalar_expression() {
			return GetRuleContexts<Logical_scalar_expressionContext>();
		}
		public Logical_scalar_expressionContext logical_scalar_expression(int i) {
			return GetRuleContext<Logical_scalar_expressionContext>(i);
		}
		public ITerminalNode K_AND() { return GetToken(sqlParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(sqlParser.K_OR, 0); }
		public Logical_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLogical_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLogical_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_scalar_expressionContext logical_scalar_expression() {
		return logical_scalar_expression(0);
	}

	private Logical_scalar_expressionContext logical_scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_scalar_expressionContext _localctx = new Logical_scalar_expressionContext(Context, _parentState);
		Logical_scalar_expressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_logical_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 279; binary_scalar_expression(0);
				}
				break;
			case 2:
				{
				State = 280; in_scalar_expression();
				}
				break;
			case 3:
				{
				State = 281; like_scalar_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 290;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new Logical_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_scalar_expression);
						State = 284;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 285; Match(K_AND);
						State = 286; logical_scalar_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_scalar_expression);
						State = 287;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 288; Match(K_OR);
						State = 289; logical_scalar_expression(2);
						}
						break;
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class In_scalar_expressionContext : ParserRuleContext {
		public Binary_scalar_expressionContext binary_scalar_expression() {
			return GetRuleContext<Binary_scalar_expressionContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(sqlParser.K_IN, 0); }
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public In_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIn_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIn_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_scalar_expressionContext in_scalar_expression() {
		In_scalar_expressionContext _localctx = new In_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_in_scalar_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; binary_scalar_expression(0);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_NOT) {
				{
				State = 296; Match(K_NOT);
				}
			}

			State = 299; Match(K_IN);
			State = 300; Match(T__2);
			State = 301; scalar_expression_list();
			State = 302; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Like_scalar_expressionContext : ParserRuleContext {
		public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		public ITerminalNode K_LIKE() { return GetToken(sqlParser.K_LIKE, 0); }
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public Escape_expressionContext escape_expression() {
			return GetRuleContext<Escape_expressionContext>(0);
		}
		public Like_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLike_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLike_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Like_scalar_expressionContext like_scalar_expression() {
		Like_scalar_expressionContext _localctx = new Like_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_like_scalar_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; binary_scalar_expression(0);
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_NOT) {
				{
				State = 305; Match(K_NOT);
				}
			}

			State = 308; Match(K_LIKE);
			State = 309; binary_scalar_expression(0);
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 310; escape_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Escape_expressionContext : ParserRuleContext {
		public ITerminalNode K_ESCAPE() { return GetToken(sqlParser.K_ESCAPE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public Escape_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escape_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEscape_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEscape_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscape_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Escape_expressionContext escape_expression() {
		Escape_expressionContext _localctx = new Escape_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_escape_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(K_ESCAPE);
			State = 314; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_scalar_expressionContext : ParserRuleContext {
		public Unary_scalar_expressionContext unary_scalar_expression() {
			return GetRuleContext<Unary_scalar_expressionContext>(0);
		}
		public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		public Multiplicative_operatorContext multiplicative_operator() {
			return GetRuleContext<Multiplicative_operatorContext>(0);
		}
		public Additive_operatorContext additive_operator() {
			return GetRuleContext<Additive_operatorContext>(0);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Equality_operatorContext equality_operator() {
			return GetRuleContext<Equality_operatorContext>(0);
		}
		public Bitwise_and_operatorContext bitwise_and_operator() {
			return GetRuleContext<Bitwise_and_operatorContext>(0);
		}
		public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() {
			return GetRuleContext<Bitwise_exclusive_or_operatorContext>(0);
		}
		public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() {
			return GetRuleContext<Bitwise_inclusive_or_operatorContext>(0);
		}
		public String_concat_operatorContext string_concat_operator() {
			return GetRuleContext<String_concat_operatorContext>(0);
		}
		public Binary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBinary_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBinary_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_scalar_expressionContext binary_scalar_expression() {
		return binary_scalar_expression(0);
	}

	private Binary_scalar_expressionContext binary_scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Binary_scalar_expressionContext _localctx = new Binary_scalar_expressionContext(Context, _parentState);
		Binary_scalar_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_binary_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 317; unary_scalar_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 351;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 319;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 320; multiplicative_operator();
						State = 321; binary_scalar_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 323;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 324; additive_operator();
						State = 325; binary_scalar_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 327;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 328; relational_operator();
						State = 329; binary_scalar_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 331;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 332; equality_operator();
						State = 333; binary_scalar_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 335;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 336; bitwise_and_operator();
						State = 337; binary_scalar_expression(5);
						}
						break;
					case 6:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 339;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 340; bitwise_exclusive_or_operator();
						State = 341; binary_scalar_expression(4);
						}
						break;
					case 7:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 343;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 344; bitwise_inclusive_or_operator();
						State = 345; binary_scalar_expression(3);
						}
						break;
					case 8:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 347;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 348; string_concat_operator();
						State = 349; binary_scalar_expression(2);
						}
						break;
					}
					} 
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_operatorContext : ParserRuleContext {
		public Multiplicative_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterMultiplicative_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitMultiplicative_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_operatorContext multiplicative_operator() {
		Multiplicative_operatorContext _localctx = new Multiplicative_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_multiplicative_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_operatorContext : ParserRuleContext {
		public Additive_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAdditive_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAdditive_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_operatorContext additive_operator() {
		Additive_operatorContext _localctx = new Additive_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_additive_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_operatorContext : ParserRuleContext {
		public Equality_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEquality_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEquality_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_operatorContext equality_operator() {
		Equality_operatorContext _localctx = new Equality_operatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_equality_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_and_operatorContext : ParserRuleContext {
		public Bitwise_and_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_and_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_and_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_and_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_and_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_and_operatorContext bitwise_and_operator() {
		Bitwise_and_operatorContext _localctx = new Bitwise_and_operatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_bitwise_and_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_exclusive_or_operatorContext : ParserRuleContext {
		public Bitwise_exclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_exclusive_or_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_exclusive_or_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_exclusive_or_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_exclusive_or_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() {
		Bitwise_exclusive_or_operatorContext _localctx = new Bitwise_exclusive_or_operatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_bitwise_exclusive_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_inclusive_or_operatorContext : ParserRuleContext {
		public Bitwise_inclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_inclusive_or_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_inclusive_or_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_inclusive_or_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_inclusive_or_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() {
		Bitwise_inclusive_or_operatorContext _localctx = new Bitwise_inclusive_or_operatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_bitwise_inclusive_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_concat_operatorContext : ParserRuleContext {
		public String_concat_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_concat_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterString_concat_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitString_concat_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_concat_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_concat_operatorContext string_concat_operator() {
		String_concat_operatorContext _localctx = new String_concat_operatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_string_concat_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_scalar_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Unary_scalar_expressionContext unary_scalar_expression() {
			return GetRuleContext<Unary_scalar_expressionContext>(0);
		}
		public Unary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterUnary_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitUnary_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_scalar_expressionContext unary_scalar_expression() {
		Unary_scalar_expressionContext _localctx = new Unary_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_unary_scalar_expression);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__5:
			case T__25:
			case K_ALL:
			case K_ARRAY:
			case K_EXISTS:
			case K_FIRST:
			case K_FALSE:
			case K_LAST:
			case K_LEFT:
			case K_NULL:
			case K_RIGHT:
			case K_TRUE:
			case K_UDF:
			case K_UNDEFINED:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case LEX_IDENTIFIER:
			case PARAMETER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; primary_expression(0);
				}
				break;
			case T__12:
			case T__13:
			case T__24:
			case K_NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; unary_operator();
				State = 374; unary_scalar_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__24) | (1L << K_NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
	 
		public Primary_expressionContext() { }
		public virtual void CopyFrom(Primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AllScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_ALL() { return GetToken(sqlParser.K_ALL, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public AllScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAllScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAllScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralScalarExpressionContext : Primary_expressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLiteralScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLiteralScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreateScalarExpressionContext : Primary_expressionContext {
		public Object_property_listContext object_property_list() {
			return GetRuleContext<Object_property_listContext>(0);
		}
		public ObjectCreateScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObjectCreateScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObjectCreateScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreateScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FirstScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_FIRST() { return GetToken(sqlParser.K_FIRST, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public FirstScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFirstScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFirstScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreateScalarExpressionContext : Primary_expressionContext {
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ArrayCreateScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayCreateScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayCreateScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreateScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexerScalarExpressionContext : Primary_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public MemberIndexerScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterMemberIndexerScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitMemberIndexerScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexerScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryScalarExpressionContext : Primary_expressionContext {
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public SubqueryScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSubqueryScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSubqueryScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyRefScalarExpressionBaseContext : Primary_expressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyRefScalarExpressionBaseContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallScalarExpressionContext : Primary_expressionContext {
		public Function_call_scalar_expressionContext function_call_scalar_expression() {
			return GetRuleContext<Function_call_scalar_expressionContext>(0);
		}
		public FunctionCallScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFunctionCallScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFunctionCallScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedScalarExperessionContext : Primary_expressionContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ParenthesizedScalarExperessionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterParenthesizedScalarExperession(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitParenthesizedScalarExperession(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedScalarExperession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterRefScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public ParameterRefScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterParameterRefScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitParameterRefScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterRefScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_EXISTS() { return GetToken(sqlParser.K_EXISTS, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ExistsScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterExistsScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitExistsScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_ARRAY() { return GetToken(sqlParser.K_ARRAY, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ArrayScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LastScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_LAST() { return GetToken(sqlParser.K_LAST, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public LastScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLastScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLastScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyRefScalarExpressionRecursiveContext : Primary_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyRefScalarExpressionRecursiveContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionRecursive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionRecursive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionRecursive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		return primary_expression(0);
	}

	private Primary_expressionContext primary_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, _parentState);
		Primary_expressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_primary_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				_localctx = new PropertyRefScalarExpressionBaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 381; identifier();
				}
				break;
			case 2:
				{
				_localctx = new ParameterRefScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382; Match(PARAMETER);
				}
				break;
			case 3:
				{
				_localctx = new LiteralScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 383; literal();
				}
				break;
			case 4:
				{
				_localctx = new ArrayCreateScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 384; Match(T__5);
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__24) | (1L << T__25) | (1L << K_ALL) | (1L << K_ARRAY) | (1L << K_EXISTS) | (1L << K_FIRST) | (1L << K_FALSE) | (1L << K_LAST) | (1L << K_LEFT) | (1L << K_NOT) | (1L << K_NULL) | (1L << K_RIGHT) | (1L << K_TRUE) | (1L << K_UDF) | (1L << K_UNDEFINED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NUMERIC_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (LEX_IDENTIFIER - 64)) | (1L << (PARAMETER - 64)))) != 0)) {
					{
					State = 385; scalar_expression_list();
					}
				}

				State = 388; Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new ObjectCreateScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 389; Match(T__25);
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL) {
					{
					State = 390; object_property_list();
					}
				}

				State = 393; Match(T__26);
				}
				break;
			case 6:
				{
				_localctx = new ParenthesizedScalarExperessionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394; Match(T__2);
				State = 395; scalar_expression(0);
				State = 396; Match(T__3);
				}
				break;
			case 7:
				{
				_localctx = new SubqueryScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 398; Match(T__2);
				State = 399; sql_query();
				State = 400; Match(T__3);
				}
				break;
			case 8:
				{
				_localctx = new ExistsScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 402; Match(K_EXISTS);
				State = 403; Match(T__2);
				State = 404; sql_query();
				State = 405; Match(T__3);
				}
				break;
			case 9:
				{
				_localctx = new ArrayScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407; Match(K_ARRAY);
				State = 408; Match(T__2);
				State = 409; sql_query();
				State = 410; Match(T__3);
				}
				break;
			case 10:
				{
				_localctx = new AllScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 412; Match(K_ALL);
				State = 413; Match(T__2);
				State = 414; sql_query();
				State = 415; Match(T__3);
				}
				break;
			case 11:
				{
				_localctx = new FirstScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 417; Match(K_FIRST);
				State = 418; Match(T__2);
				State = 419; sql_query();
				State = 420; Match(T__3);
				}
				break;
			case 12:
				{
				_localctx = new LastScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 422; Match(K_LAST);
				State = 423; Match(T__2);
				State = 424; sql_query();
				State = 425; Match(T__3);
				}
				break;
			case 13:
				{
				_localctx = new FunctionCallScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 427; function_call_scalar_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 440;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 438;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new PropertyRefScalarExpressionRecursiveContext(new Primary_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary_expression);
						State = 430;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 431; Match(T__4);
						State = 432; identifier();
						}
						break;
					case 2:
						{
						_localctx = new MemberIndexerScalarExpressionContext(new Primary_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary_expression);
						State = 433;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 434; Match(T__5);
						State = 435; scalar_expression(0);
						State = 436; Match(T__6);
						}
						break;
					}
					} 
				}
				State = 442;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_scalar_expressionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode K_UDF() { return GetToken(sqlParser.K_UDF, 0); }
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ITerminalNode K_LEFT() { return GetToken(sqlParser.K_LEFT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(sqlParser.K_RIGHT, 0); }
		public Function_call_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_scalar_expressionContext function_call_scalar_expression() {
		Function_call_scalar_expressionContext _localctx = new Function_call_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_function_call_scalar_expression);
		int _la;
		try {
			State = 466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ALL:
			case K_FIRST:
			case K_LAST:
			case K_UDF:
			case LEX_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_UDF) {
					{
					State = 443; Match(K_UDF);
					State = 444; Match(T__4);
					}
				}

				State = 447; identifier();
				State = 448; Match(T__2);
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__24) | (1L << T__25) | (1L << K_ALL) | (1L << K_ARRAY) | (1L << K_EXISTS) | (1L << K_FIRST) | (1L << K_FALSE) | (1L << K_LAST) | (1L << K_LEFT) | (1L << K_NOT) | (1L << K_NULL) | (1L << K_RIGHT) | (1L << K_TRUE) | (1L << K_UDF) | (1L << K_UNDEFINED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NUMERIC_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (LEX_IDENTIFIER - 64)) | (1L << (PARAMETER - 64)))) != 0)) {
					{
					State = 449; scalar_expression_list();
					}
				}

				State = 452; Match(T__3);
				}
				break;
			case K_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454; Match(K_LEFT);
				State = 455; Match(T__2);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__24) | (1L << T__25) | (1L << K_ALL) | (1L << K_ARRAY) | (1L << K_EXISTS) | (1L << K_FIRST) | (1L << K_FALSE) | (1L << K_LAST) | (1L << K_LEFT) | (1L << K_NOT) | (1L << K_NULL) | (1L << K_RIGHT) | (1L << K_TRUE) | (1L << K_UDF) | (1L << K_UNDEFINED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NUMERIC_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (LEX_IDENTIFIER - 64)) | (1L << (PARAMETER - 64)))) != 0)) {
					{
					State = 456; scalar_expression_list();
					}
				}

				State = 459; Match(T__3);
				}
				break;
			case K_RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 460; Match(K_RIGHT);
				State = 461; Match(T__2);
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << T__12) | (1L << T__13) | (1L << T__24) | (1L << T__25) | (1L << K_ALL) | (1L << K_ARRAY) | (1L << K_EXISTS) | (1L << K_FIRST) | (1L << K_FALSE) | (1L << K_LAST) | (1L << K_LEFT) | (1L << K_NOT) | (1L << K_NULL) | (1L << K_RIGHT) | (1L << K_TRUE) | (1L << K_UDF) | (1L << K_UNDEFINED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NUMERIC_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (LEX_IDENTIFIER - 64)) | (1L << (PARAMETER - 64)))) != 0)) {
					{
					State = 462; scalar_expression_list();
					}
				}

				State = 465; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expression_listContext : ParserRuleContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Scalar_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterScalar_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitScalar_expression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expression_listContext scalar_expression_list() {
		Scalar_expression_listContext _localctx = new Scalar_expression_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_scalar_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; scalar_expression(0);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 469; Match(T__1);
				State = 470; scalar_expression(0);
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_property_listContext : ParserRuleContext {
		public Object_propertyContext[] object_property() {
			return GetRuleContexts<Object_propertyContext>();
		}
		public Object_propertyContext object_property(int i) {
			return GetRuleContext<Object_propertyContext>(i);
		}
		public Object_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObject_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObject_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_property_listContext object_property_list() {
		Object_property_listContext _localctx = new Object_property_listContext(Context, State);
		EnterRule(_localctx, 86, RULE_object_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; object_property();
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 477; Match(T__1);
				State = 478; object_property();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertyContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Object_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObject_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObject_property(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertyContext object_property() {
		Object_propertyContext _localctx = new Object_propertyContext(Context, State);
		EnterRule(_localctx, 88, RULE_object_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(STRING_LITERAL);
			State = 485; Match(T__8);
			State = 486; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode LEX_IDENTIFIER() { return GetToken(sqlParser.LEX_IDENTIFIER, 0); }
		public ITerminalNode K_ALL() { return GetToken(sqlParser.K_ALL, 0); }
		public ITerminalNode K_FIRST() { return GetToken(sqlParser.K_FIRST, 0); }
		public ITerminalNode K_LAST() { return GetToken(sqlParser.K_LAST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (K_ALL - 28)) | (1L << (K_FIRST - 28)) | (1L << (K_LAST - 28)) | (1L << (LEX_IDENTIFIER - 28)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode K_TRUE() { return GetToken(sqlParser.K_TRUE, 0); }
		public ITerminalNode K_FALSE() { return GetToken(sqlParser.K_FALSE, 0); }
		public ITerminalNode K_NULL() { return GetToken(sqlParser.K_NULL, 0); }
		public ITerminalNode K_UNDEFINED() { return GetToken(sqlParser.K_UNDEFINED, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (K_FALSE - 40)) | (1L << (K_NULL - 40)) | (1L << (K_TRUE - 40)) | (1L << (K_UNDEFINED - 40)) | (1L << (NUMERIC_LITERAL - 40)) | (1L << (STRING_LITERAL - 40)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return collection_expression_sempred((Collection_expressionContext)_localctx, predIndex);
		case 12: return path_expression_sempred((Path_expressionContext)_localctx, predIndex);
		case 24: return scalar_expression_sempred((Scalar_expressionContext)_localctx, predIndex);
		case 25: return logical_scalar_expression_sempred((Logical_scalar_expressionContext)_localctx, predIndex);
		case 29: return binary_scalar_expression_sempred((Binary_scalar_expressionContext)_localctx, predIndex);
		case 40: return primary_expression_sempred((Primary_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool collection_expression_sempred(Collection_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool path_expression_sempred(Path_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool scalar_expression_sempred(Scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}
	private bool logical_scalar_expression_sempred(Logical_scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool binary_scalar_expression_sempred(Binary_scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primary_expression_sempred(Primary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x45', '\x1EF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x66', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'i', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'l', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'o', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'r', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'v', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 'y', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x83', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x8D', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x90', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x95', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9D', '\n', 
		'\f', '\x3', '\f', '\x5', '\f', '\xA0', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA6', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xAB', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xAE', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xB2', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xB8', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\xC6', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xC9', '\v', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD9', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xDE', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xE1', '\v', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE5', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xEA', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\xED', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xF1', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x102', '\n', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x109', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x114', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x117', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x11D', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\a', '\x1B', '\x125', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', 
		'\x128', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x12C', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x135', '\n', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x13A', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', 
		'\x162', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x165', '\v', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x5', '(', '\x17B', '\n', '(', '\x3', ')', '\x3', 
		')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x185', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x18A', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x5', '*', '\x1AF', '\n', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\a', '*', '\x1B9', '\n', '*', '\f', '*', '\xE', '*', '\x1BC', '\v', '*', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x1C0', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x1C5', '\n', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1CC', '\n', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x1D2', '\n', '+', 
		'\x3', '+', '\x5', '+', '\x1D5', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\a', ',', '\x1DA', '\n', ',', '\f', ',', '\xE', ',', '\x1DD', '\v', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x1E2', '\n', '-', 
		'\f', '-', '\xE', '-', '\x1E5', '\v', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x2', '\b', '\x16', '\x1A', '\x32', '\x34', '<', 'R', 
		'\x31', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '\x2', '\v', '\x4', '\x2', '\x42', '\x42', '\x45', '\x45', 
		'\x4', '\x2', '\"', '\"', '%', '%', '\x4', '\x2', '\x3', '\x3', '\r', 
		'\xE', '\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '\x11', '\x14', '\x3', 
		'\x2', '\x15', '\x16', '\x5', '\x2', '\xF', '\x10', '\x1B', '\x1B', '\x33', 
		'\x33', '\x6', '\x2', '\x1E', '\x1E', ')', ')', '/', '/', '\x44', '\x44', 
		'\a', '\x2', '*', '*', '\x34', '\x34', '<', '<', '>', '>', '\x42', '\x43', 
		'\x2', '\x204', '\x2', '`', '\x3', '\x2', '\x2', '\x2', '\x4', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 's', '\x3', '\x2', '\x2', '\x2', '\b', 
		'|', '\x3', '\x2', '\x2', '\x2', '\n', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x84', '\x3', '\x2', '\x2', '\x2', '\xE', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x89', '\x3', '\x2', '\x2', '\x2', '\x12', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xD8', '\x3', '\x2', '\x2', '\x2', '\"', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xE2', '\x3', '\x2', '\x2', '\x2', '&', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xEE', '\x3', '\x2', '\x2', '\x2', '*', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF4', '\x3', '\x2', '\x2', '\x2', '.', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x108', '\x3', '\x2', '\x2', '\x2', '\x34', '\x11C', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x129', '\x3', '\x2', '\x2', '\x2', '\x38', '\x132', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x13E', '\x3', '\x2', '\x2', '\x2', '>', '\x166', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x168', '\x3', '\x2', '\x2', '\x2', '\x42', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x16E', '\x3', '\x2', '\x2', '\x2', 'H', '\x170', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x172', '\x3', '\x2', '\x2', '\x2', 'L', '\x174', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x17C', '\x3', '\x2', '\x2', '\x2', 'R', '\x1AE', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x1D4', '\x3', '\x2', '\x2', '\x2', 'V', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\\', '\x1EA', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x1EC', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x5', 
		'\x4', '\x3', '\x2', '\x61', '\x62', '\a', '\x2', '\x2', '\x3', '\x62', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', '\x6', '\x4', 
		'\x2', '\x64', '\x66', '\x5', '\x14', '\v', '\x2', '\x65', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'h', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\x5', '\x1C', '\xF', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', '\x1E', '\x10', 
		'\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x5', ' ', '\x11', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'r', '\x5', ',', '\x17', 
		'\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'r', '\x5', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\a', ':', '\x2', 
		'\x2', 't', 'v', '\a', '&', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'y', '\x5', '\b', '\x5', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x5', '\n', '\x6', '\x2', '{', '\a', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\a', ';', '\x2', '\x2', '}', '~', '\t', '\x2', '\x2', 
		'\x2', '~', '\t', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x83', '\x5', '\f', 
		'\a', '\x2', '\x80', '\x83', '\x5', '\xE', '\b', '\x2', '\x81', '\x83', 
		'\x5', '\x10', '\t', '\x2', '\x82', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\v', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\a', '\x3', '\x2', '\x2', '\x85', '\r', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\a', '?', '\x2', '\x2', '\x87', '\x88', '\x5', '\x32', '\x1A', 
		'\x2', '\x88', '\xF', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8E', '\x5', 
		'\x12', '\n', '\x2', '\x8A', '\x8B', '\a', '\x4', '\x2', '\x2', '\x8B', 
		'\x8D', '\x5', '\x12', '\n', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x94', '\x5', '\x32', '\x1A', '\x2', '\x92', '\x93', '\a', 
		'!', '\x2', '\x2', '\x93', '\x95', '\x5', '\\', '/', '\x2', '\x94', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x13', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '+', 
		'\x2', '\x2', '\x97', '\x98', '\x5', '\x16', '\f', '\x2', '\x98', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\b', '\f', '\x1', '\x2', 
		'\x9A', '\x9F', '\x5', '\x18', '\r', '\x2', '\x9B', '\x9D', '\a', '!', 
		'\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\xA0', '\x5', '\\', '/', '\x2', '\x9F', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\\', '/', '\x2', '\xA2', 
		'\xA3', '\a', '-', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x18', '\r', 
		'\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\f', '\x3', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '.', '\x2', '\x2', '\xA9', '\xAB', '\x5', 
		'\x16', '\f', '\x4', '\xAA', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB1', '\x5', '\\', '/', '\x2', '\xB0', '\xB2', '\x5', '\x1A', '\xE', 
		'\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\a', '\x5', '\x2', '\x2', '\xB4', '\xB5', '\x5', '\x4', '\x3', 
		'\x2', '\xB5', '\xB6', '\a', '\x6', '\x2', '\x2', '\xB6', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xC7', '\b', '\xE', '\x1', '\x2', '\xBA', '\xBB', '\f', 
		'\x6', '\x2', '\x2', '\xBB', '\xBC', '\a', '\a', '\x2', '\x2', '\xBC', 
		'\xC6', '\x5', '\\', '/', '\x2', '\xBD', '\xBE', '\f', '\x5', '\x2', '\x2', 
		'\xBE', '\xBF', '\a', '\b', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x42', 
		'\x2', '\x2', '\xC0', '\xC6', '\a', '\t', '\x2', '\x2', '\xC1', '\xC2', 
		'\f', '\x4', '\x2', '\x2', '\xC2', '\xC3', '\a', '\b', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x43', '\x2', '\x2', '\xC4', '\xC6', '\a', '\t', '\x2', 
		'\x2', '\xC5', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '@', '\x2', '\x2', '\xCB', '\xCC', '\x5', '\x32', '\x1A', 
		'\x2', '\xCC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		',', '\x2', '\x2', '\xCE', '\xCF', '\a', '$', '\x2', '\x2', '\xCF', '\xD0', 
		'\x5', 'V', ',', '\x2', '\xD0', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x37', '\x2', '\x2', '\xD2', '\xD3', '\a', '$', '\x2', 
		'\x2', '\xD3', '\xD9', '\x5', '&', '\x14', '\x2', '\xD4', '\xD5', '\a', 
		'\x37', '\x2', '\x2', '\xD5', '\xD6', '\a', '$', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '\x38', '\x2', '\x2', '\xD7', '\xD9', '\x5', '\"', '\x12', 
		'\x2', '\xD8', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '!', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDF', '\x5', '$', '\x13', '\x2', '\xDB', '\xDC', '\a', '\x4', '\x2', 
		'\x2', '\xDC', '\xDE', '\x5', '$', '\x13', '\x2', '\xDD', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '#', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', 'T', '+', '\x2', '\xE3', '\xE5', 
		'\x5', '*', '\x16', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xEB', '\x5', '(', '\x15', '\x2', '\xE7', '\xE8', 
		'\a', '\x4', '\x2', '\x2', '\xE8', '\xEA', '\x5', '(', '\x15', '\x2', 
		'\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\x5', '\x32', 
		'\x1A', '\x2', '\xEF', '\xF1', '\x5', '*', '\x16', '\x2', '\xF0', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', ')', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\t', '\x3', 
		'\x2', '\x2', '\xF3', '+', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', 
		'\a', '\x35', '\x2', '\x2', '\xF5', '\xF6', '\x5', '.', '\x18', '\x2', 
		'\xF6', '\xF7', '\a', '\x32', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\x30', 
		'\x19', '\x2', '\xF8', '-', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', 
		'\t', '\x2', '\x2', '\x2', '\xFA', '/', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFC', '\t', '\x2', '\x2', '\x2', '\xFC', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\b', '\x1A', '\x1', '\x2', '\xFE', '\x109', '\x5', 
		'\x34', '\x1B', '\x2', '\xFF', '\x101', '\x5', '<', '\x1F', '\x2', '\x100', 
		'\x102', '\a', '\x33', '\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', '#', '\x2', '\x2', 
		'\x104', '\x105', '\x5', '<', '\x1F', '\x2', '\x105', '\x106', '\a', '\x1F', 
		'\x2', '\x2', '\x106', '\x107', '\x5', '<', '\x1F', '\x2', '\x107', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x109', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\f', '\x6', '\x2', '\x2', '\x10B', 
		'\x10C', '\a', '\n', '\x2', '\x2', '\x10C', '\x10D', '\x5', '\x32', '\x1A', 
		'\x2', '\x10D', '\x10E', '\a', '\v', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'\x32', '\x1A', '\a', '\x10F', '\x114', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\f', '\x5', '\x2', '\x2', '\x111', '\x112', '\a', '\f', '\x2', 
		'\x2', '\x112', '\x114', '\x5', '\x32', '\x1A', '\x6', '\x113', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x119', '\b', '\x1B', '\x1', '\x2', '\x119', '\x11D', 
		'\x5', '<', '\x1F', '\x2', '\x11A', '\x11D', '\x5', '\x36', '\x1C', '\x2', 
		'\x11B', '\x11D', '\x5', '\x38', '\x1D', '\x2', '\x11C', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11F', '\f', '\x4', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '\x1F', '\x2', '\x2', '\x120', '\x125', '\x5', '\x34', '\x1B', '\x5', 
		'\x121', '\x122', '\f', '\x3', '\x2', '\x2', '\x122', '\x123', '\a', '\x36', 
		'\x2', '\x2', '\x123', '\x125', '\x5', '\x34', '\x1B', '\x4', '\x124', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x124', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x35', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12B', '\x5', '<', '\x1F', '\x2', '\x12A', 
		'\x12C', '\a', '\x33', '\x2', '\x2', '\x12B', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '-', '\x2', '\x2', 
		'\x12E', '\x12F', '\a', '\x5', '\x2', '\x2', '\x12F', '\x130', '\x5', 
		'V', ',', '\x2', '\x130', '\x131', '\a', '\x6', '\x2', '\x2', '\x131', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x132', '\x134', '\x5', '<', '\x1F', 
		'\x2', '\x133', '\x135', '\a', '\x33', '\x2', '\x2', '\x134', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\a', 
		'\x31', '\x2', '\x2', '\x137', '\x139', '\x5', '<', '\x1F', '\x2', '\x138', 
		'\x13A', '\x5', ':', '\x1E', '\x2', '\x139', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', '\'', '\x2', '\x2', 
		'\x13C', '\x13D', '\a', '\x43', '\x2', '\x2', '\x13D', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x13E', '\x13F', '\b', '\x1F', '\x1', '\x2', '\x13F', '\x140', 
		'\x5', 'N', '(', '\x2', '\x140', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x142', '\f', '\n', '\x2', '\x2', '\x142', '\x143', '\x5', '>', 
		' ', '\x2', '\x143', '\x144', '\x5', '<', '\x1F', '\v', '\x144', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\f', '\t', '\x2', '\x2', 
		'\x146', '\x147', '\x5', '@', '!', '\x2', '\x147', '\x148', '\x5', '<', 
		'\x1F', '\n', '\x148', '\x162', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', 
		'\f', '\b', '\x2', '\x2', '\x14A', '\x14B', '\x5', '\x42', '\"', '\x2', 
		'\x14B', '\x14C', '\x5', '<', '\x1F', '\t', '\x14C', '\x162', '\x3', '\x2', 
		'\x2', '\x2', '\x14D', '\x14E', '\f', '\a', '\x2', '\x2', '\x14E', '\x14F', 
		'\x5', '\x44', '#', '\x2', '\x14F', '\x150', '\x5', '<', '\x1F', '\b', 
		'\x150', '\x162', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\f', 
		'\x6', '\x2', '\x2', '\x152', '\x153', '\x5', '\x46', '$', '\x2', '\x153', 
		'\x154', '\x5', '<', '\x1F', '\a', '\x154', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\f', '\x5', '\x2', '\x2', '\x156', '\x157', 
		'\x5', 'H', '%', '\x2', '\x157', '\x158', '\x5', '<', '\x1F', '\x6', '\x158', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\f', '\x4', '\x2', 
		'\x2', '\x15A', '\x15B', '\x5', 'J', '&', '\x2', '\x15B', '\x15C', '\x5', 
		'<', '\x1F', '\x5', '\x15C', '\x162', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\f', '\x3', '\x2', '\x2', '\x15E', '\x15F', '\x5', 'L', '\'', 
		'\x2', '\x15F', '\x160', '\x5', '<', '\x1F', '\x4', '\x160', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x145', '\x3', '\x2', '\x2', '\x2', '\x161', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x161', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x159', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '=', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\t', '\x4', '\x2', 
		'\x2', '\x167', '?', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\t', 
		'\x5', '\x2', '\x2', '\x169', '\x41', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16B', '\t', '\x6', '\x2', '\x2', '\x16B', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x16D', '\t', '\a', '\x2', '\x2', '\x16D', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x16F', '\a', '\x17', '\x2', '\x2', '\x16F', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\a', '\x18', '\x2', 
		'\x2', '\x171', 'I', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\a', 
		'\x19', '\x2', '\x2', '\x173', 'K', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x175', '\a', '\x1A', '\x2', '\x2', '\x175', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x17B', '\x5', 'R', '*', '\x2', '\x177', '\x178', '\x5', 
		'P', ')', '\x2', '\x178', '\x179', '\x5', 'N', '(', '\x2', '\x179', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x177', '\x3', '\x2', '\x2', '\x2', '\x17B', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x17C', '\x17D', '\t', '\b', '\x2', '\x2', '\x17D', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\b', '*', '\x1', '\x2', 
		'\x17F', '\x1AF', '\x5', '\\', '/', '\x2', '\x180', '\x1AF', '\a', '\x45', 
		'\x2', '\x2', '\x181', '\x1AF', '\x5', '^', '\x30', '\x2', '\x182', '\x184', 
		'\a', '\b', '\x2', '\x2', '\x183', '\x185', '\x5', 'V', ',', '\x2', '\x184', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x1AF', 
		'\a', '\t', '\x2', '\x2', '\x187', '\x189', '\a', '\x1C', '\x2', '\x2', 
		'\x188', '\x18A', '\x5', 'X', '-', '\x2', '\x189', '\x188', '\x3', '\x2', 
		'\x2', '\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x1AF', '\a', '\x1D', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '\x5', '\x2', '\x2', '\x18D', '\x18E', '\x5', 
		'\x32', '\x1A', '\x2', '\x18E', '\x18F', '\a', '\x6', '\x2', '\x2', '\x18F', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\a', '\x5', '\x2', 
		'\x2', '\x191', '\x192', '\x5', '\x4', '\x3', '\x2', '\x192', '\x193', 
		'\a', '\x6', '\x2', '\x2', '\x193', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x195', '\a', '(', '\x2', '\x2', '\x195', '\x196', '\a', '\x5', 
		'\x2', '\x2', '\x196', '\x197', '\x5', '\x4', '\x3', '\x2', '\x197', '\x198', 
		'\a', '\x6', '\x2', '\x2', '\x198', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19A', '\a', ' ', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x5', 
		'\x2', '\x2', '\x19B', '\x19C', '\x5', '\x4', '\x3', '\x2', '\x19C', '\x19D', 
		'\a', '\x6', '\x2', '\x2', '\x19D', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19F', '\a', '\x1E', '\x2', '\x2', '\x19F', '\x1A0', '\a', 
		'\x5', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '\x4', '\x3', '\x2', '\x1A1', 
		'\x1A2', '\a', '\x6', '\x2', '\x2', '\x1A2', '\x1AF', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\a', ')', '\x2', '\x2', '\x1A4', '\x1A5', '\a', 
		'\x5', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '\x4', '\x3', '\x2', '\x1A6', 
		'\x1A7', '\a', '\x6', '\x2', '\x2', '\x1A7', '\x1AF', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\a', '/', '\x2', '\x2', '\x1A9', '\x1AA', '\a', 
		'\x5', '\x2', '\x2', '\x1AA', '\x1AB', '\x5', '\x4', '\x3', '\x2', '\x1AB', 
		'\x1AC', '\a', '\x6', '\x2', '\x2', '\x1AC', '\x1AF', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1AF', '\x5', 'T', '+', '\x2', '\x1AE', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x180', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x182', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x187', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x194', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\f', '\n', '\x2', '\x2', 
		'\x1B1', '\x1B2', '\a', '\a', '\x2', '\x2', '\x1B2', '\x1B9', '\x5', '\\', 
		'/', '\x2', '\x1B3', '\x1B4', '\f', '\t', '\x2', '\x2', '\x1B4', '\x1B5', 
		'\a', '\b', '\x2', '\x2', '\x1B5', '\x1B6', '\x5', '\x32', '\x1A', '\x2', 
		'\x1B6', '\x1B7', '\a', '\t', '\x2', '\x2', '\x1B7', '\x1B9', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', 'S', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\a', '=', '\x2', 
		'\x2', '\x1BE', '\x1C0', '\a', '\a', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x5', '\\', '/', 
		'\x2', '\x1C2', '\x1C4', '\a', '\x5', '\x2', '\x2', '\x1C3', '\x1C5', 
		'\x5', 'V', ',', '\x2', '\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '\x6', '\x2', '\x2', '\x1C7', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '\x30', '\x2', 
		'\x2', '\x1C9', '\x1CB', '\a', '\x5', '\x2', '\x2', '\x1CA', '\x1CC', 
		'\x5', 'V', ',', '\x2', '\x1CB', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1D5', '\a', '\x6', '\x2', '\x2', '\x1CE', 
		'\x1CF', '\a', '\x39', '\x2', '\x2', '\x1CF', '\x1D1', '\a', '\x5', '\x2', 
		'\x2', '\x1D0', '\x1D2', '\x5', 'V', ',', '\x2', '\x1D1', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D5', '\a', '\x6', '\x2', 
		'\x2', '\x1D4', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', 'U', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1DB', '\x5', '\x32', 
		'\x1A', '\x2', '\x1D7', '\x1D8', '\a', '\x4', '\x2', '\x2', '\x1D8', '\x1DA', 
		'\x5', '\x32', '\x1A', '\x2', '\x1D9', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x1E3', '\x5', 'Z', '.', '\x2', '\x1DF', '\x1E0', '\a', 
		'\x4', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', 'Z', '.', '\x2', '\x1E1', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', 
		'\x43', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\v', '\x2', '\x2', '\x1E8', 
		'\x1E9', '\x5', '\x32', '\x1A', '\x2', '\x1E9', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\x1EB', '\t', '\t', '\x2', '\x2', '\x1EB', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\t', '\n', '\x2', '\x2', '\x1ED', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x32', '\x65', 'h', 'k', 'n', 'q', 'u', 
		'x', '\x82', '\x8E', '\x94', '\x9C', '\x9F', '\xA5', '\xAC', '\xB1', '\xB7', 
		'\xC5', '\xC7', '\xD8', '\xDF', '\xE4', '\xEB', '\xF0', '\x101', '\x108', 
		'\x113', '\x115', '\x11C', '\x124', '\x126', '\x12B', '\x134', '\x139', 
		'\x161', '\x163', '\x17A', '\x184', '\x189', '\x1AE', '\x1B8', '\x1BA', 
		'\x1BF', '\x1C4', '\x1CB', '\x1D1', '\x1D4', '\x1DB', '\x1E3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
