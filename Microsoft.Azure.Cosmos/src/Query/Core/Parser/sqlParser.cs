//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from sql.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
internal partial class sqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, K_ALL=28, K_AND=29, K_ARRAY=30, K_AS=31, 
		K_ASC=32, K_BETWEEN=33, K_BY=34, K_DESC=35, K_DISTINCT=36, K_ESCAPE=37, 
		K_EXISTS=38, K_FIRST=39, K_FALSE=40, K_FROM=41, K_GROUP=42, K_IN=43, K_JOIN=44, 
		K_LAST=45, K_LEFT=46, K_LIKE=47, K_LIMIT=48, K_NOT=49, K_NULL=50, K_OFFSET=51, 
		K_OR=52, K_ORDER=53, K_RIGHT=54, K_SELECT=55, K_TOP=56, K_TRUE=57, K_UDF=58, 
		K_UNDEFINED=59, K_VALUE=60, K_WHERE=61, WS=62, NUMERIC_LITERAL=63, STRING_LITERAL=64, 
		LEX_IDENTIFIER=65, PARAMETER=66;
	public const int
		RULE_program = 0, RULE_sql_query = 1, RULE_select_clause = 2, RULE_top_spec = 3, 
		RULE_selection = 4, RULE_select_star_spec = 5, RULE_select_value_spec = 6, 
		RULE_select_list_spec = 7, RULE_select_item = 8, RULE_from_clause = 9, 
		RULE_collection_expression = 10, RULE_collection = 11, RULE_path_expression = 12, 
		RULE_where_clause = 13, RULE_group_by_clause = 14, RULE_order_by_clause = 15, 
		RULE_order_by_items = 16, RULE_order_by_item = 17, RULE_sort_order = 18, 
		RULE_offset_limit_clause = 19, RULE_offset_count = 20, RULE_limit_count = 21, 
		RULE_scalar_expression = 22, RULE_logical_scalar_expression = 23, RULE_in_scalar_expression = 24, 
		RULE_like_scalar_expression = 25, RULE_escape_expression = 26, RULE_binary_scalar_expression = 27, 
		RULE_multiplicative_operator = 28, RULE_additive_operator = 29, RULE_relational_operator = 30, 
		RULE_equality_operator = 31, RULE_bitwise_and_operator = 32, RULE_bitwise_exclusive_or_operator = 33, 
		RULE_bitwise_inclusive_or_operator = 34, RULE_string_concat_operator = 35, 
		RULE_unary_scalar_expression = 36, RULE_unary_operator = 37, RULE_primary_expression = 38, 
		RULE_function_call_scalar_expression = 39, RULE_scalar_expression_list = 40, 
		RULE_object_property_list = 41, RULE_object_property = 42, RULE_identifier = 43, 
		RULE_literal = 44;
	public static readonly string[] ruleNames = {
		"program", "sql_query", "select_clause", "top_spec", "selection", "select_star_spec", 
		"select_value_spec", "select_list_spec", "select_item", "from_clause", 
		"collection_expression", "collection", "path_expression", "where_clause", 
		"group_by_clause", "order_by_clause", "order_by_items", "order_by_item", 
		"sort_order", "offset_limit_clause", "offset_count", "limit_count", "scalar_expression", 
		"logical_scalar_expression", "in_scalar_expression", "like_scalar_expression", 
		"escape_expression", "binary_scalar_expression", "multiplicative_operator", 
		"additive_operator", "relational_operator", "equality_operator", "bitwise_and_operator", 
		"bitwise_exclusive_or_operator", "bitwise_inclusive_or_operator", "string_concat_operator", 
		"unary_scalar_expression", "unary_operator", "primary_expression", "function_call_scalar_expression", 
		"scalar_expression_list", "object_property_list", "object_property", "identifier", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "','", "'('", "')'", "'.'", "'['", "']'", "'?'", "':'", "'??'", 
		"'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'>='", "'<='", "'='", "'!='", 
		"'&'", "'^'", "'|'", "'||'", "'~'", "'{'", "'}'", null, null, null, null, 
		null, null, null, null, null, null, null, null, "'false'", null, null, 
		null, null, null, null, null, null, null, "'null'", null, null, null, 
		null, null, null, "'true'", "'udf'", "'undefined'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "K_ALL", "K_AND", "K_ARRAY", "K_AS", "K_ASC", 
		"K_BETWEEN", "K_BY", "K_DESC", "K_DISTINCT", "K_ESCAPE", "K_EXISTS", "K_FIRST", 
		"K_FALSE", "K_FROM", "K_GROUP", "K_IN", "K_JOIN", "K_LAST", "K_LEFT", 
		"K_LIKE", "K_LIMIT", "K_NOT", "K_NULL", "K_OFFSET", "K_OR", "K_ORDER", 
		"K_RIGHT", "K_SELECT", "K_TOP", "K_TRUE", "K_UDF", "K_UNDEFINED", "K_VALUE", 
		"K_WHERE", "WS", "NUMERIC_LITERAL", "STRING_LITERAL", "LEX_IDENTIFIER", 
		"PARAMETER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(sqlParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; sql_query();
			State = 91; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_queryContext : ParserRuleContext {
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Offset_limit_clauseContext offset_limit_clause() {
			return GetRuleContext<Offset_limit_clauseContext>(0);
		}
		public Sql_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSql_query(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSql_query(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_query(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_queryContext sql_query() {
		Sql_queryContext _localctx = new Sql_queryContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; select_clause();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_FROM) {
				{
				State = 94; from_clause();
				}
			}

			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 97; where_clause();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_GROUP) {
				{
				State = 100; group_by_clause();
				}
			}

			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 103; order_by_clause();
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_OFFSET) {
				{
				State = 106; offset_limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(sqlParser.K_SELECT, 0); }
		public SelectionContext selection() {
			return GetRuleContext<SelectionContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(sqlParser.K_DISTINCT, 0); }
		public Top_specContext top_spec() {
			return GetRuleContext<Top_specContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(K_SELECT);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_DISTINCT) {
				{
				State = 110; Match(K_DISTINCT);
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TOP) {
				{
				State = 113; top_spec();
				}
			}

			State = 116; selection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_specContext : ParserRuleContext {
		public ITerminalNode K_TOP() { return GetToken(sqlParser.K_TOP, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Top_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterTop_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitTop_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_specContext top_spec() {
		Top_specContext _localctx = new Top_specContext(Context, State);
		EnterRule(_localctx, 6, RULE_top_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(K_TOP);
			State = 119;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public Select_star_specContext select_star_spec() {
			return GetRuleContext<Select_star_specContext>(0);
		}
		public Select_value_specContext select_value_spec() {
			return GetRuleContext<Select_value_specContext>(0);
		}
		public Select_list_specContext select_list_spec() {
			return GetRuleContext<Select_list_specContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_selection);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; select_star_spec();
				}
				break;
			case K_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; select_value_spec();
				}
				break;
			case T__2:
			case T__5:
			case T__12:
			case T__13:
			case T__24:
			case T__25:
			case K_ALL:
			case K_ARRAY:
			case K_EXISTS:
			case K_FIRST:
			case K_FALSE:
			case K_LAST:
			case K_LEFT:
			case K_NOT:
			case K_NULL:
			case K_RIGHT:
			case K_TRUE:
			case K_UDF:
			case K_UNDEFINED:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case LEX_IDENTIFIER:
			case PARAMETER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; select_list_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_star_specContext : ParserRuleContext {
		public Select_star_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_star_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_star_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_star_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_star_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_star_specContext select_star_spec() {
		Select_star_specContext _localctx = new Select_star_specContext(Context, State);
		EnterRule(_localctx, 10, RULE_select_star_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_value_specContext : ParserRuleContext {
		public ITerminalNode K_VALUE() { return GetToken(sqlParser.K_VALUE, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Select_value_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_value_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_value_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_value_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_value_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_value_specContext select_value_spec() {
		Select_value_specContext _localctx = new Select_value_specContext(Context, State);
		EnterRule(_localctx, 12, RULE_select_value_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(K_VALUE);
			State = 129; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_specContext : ParserRuleContext {
		public Select_itemContext[] select_item() {
			return GetRuleContexts<Select_itemContext>();
		}
		public Select_itemContext select_item(int i) {
			return GetRuleContext<Select_itemContext>(i);
		}
		public Select_list_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_specContext select_list_spec() {
		Select_list_specContext _localctx = new Select_list_specContext(Context, State);
		EnterRule(_localctx, 14, RULE_select_list_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; select_item();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 132; Match(T__1);
				State = 133; select_item();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_itemContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(sqlParser.K_AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Select_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_itemContext select_item() {
		Select_itemContext _localctx = new Select_itemContext(Context, State);
		EnterRule(_localctx, 16, RULE_select_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; scalar_expression(0);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_AS) {
				{
				State = 140; Match(K_AS);
				State = 141; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode K_FROM() { return GetToken(sqlParser.K_FROM, 0); }
		public Collection_expressionContext collection_expression() {
			return GetRuleContext<Collection_expressionContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(K_FROM);
			State = 145; collection_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_expressionContext : ParserRuleContext {
		public Collection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_expression; } }
	 
		public Collection_expressionContext() { }
		public virtual void CopyFrom(Collection_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JoinCollectionExpressionContext : Collection_expressionContext {
		public Collection_expressionContext[] collection_expression() {
			return GetRuleContexts<Collection_expressionContext>();
		}
		public Collection_expressionContext collection_expression(int i) {
			return GetRuleContext<Collection_expressionContext>(i);
		}
		public ITerminalNode K_JOIN() { return GetToken(sqlParser.K_JOIN, 0); }
		public JoinCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterJoinCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitJoinCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasedCollectionExpressionContext : Collection_expressionContext {
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(sqlParser.K_AS, 0); }
		public AliasedCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAliasedCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAliasedCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasedCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIteratorCollectionExpressionContext : Collection_expressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(sqlParser.K_IN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public ArrayIteratorCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayIteratorCollectionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayIteratorCollectionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIteratorCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_expressionContext collection_expression() {
		return collection_expression(0);
	}

	private Collection_expressionContext collection_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Collection_expressionContext _localctx = new Collection_expressionContext(Context, _parentState);
		Collection_expressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_collection_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new AliasedCollectionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 148; collection();
				State = 153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 149; Match(K_AS);
						}
					}

					State = 152; identifier();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ArrayIteratorCollectionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155; identifier();
				State = 156; Match(K_IN);
				State = 157; collection();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinCollectionExpressionContext(new Collection_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_collection_expression);
					State = 161;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 162; Match(K_JOIN);
					State = 163; collection_expression(2);
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
	 
		public CollectionContext() { }
		public virtual void CopyFrom(CollectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputPathCollectionContext : CollectionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public InputPathCollectionContext(CollectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterInputPathCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitInputPathCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputPathCollection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryCollectionContext : CollectionContext {
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public SubqueryCollectionContext(CollectionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSubqueryCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSubqueryCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_collection);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ALL:
			case K_FIRST:
			case K_LAST:
			case LEX_IDENTIFIER:
				_localctx = new InputPathCollectionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; identifier();
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 170; path_expression(0);
					}
					break;
				}
				}
				break;
			case T__2:
				_localctx = new SubqueryCollectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; Match(T__2);
				State = 174; sql_query();
				State = 175; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
	 
		public Path_expressionContext() { }
		public virtual void CopyFrom(Path_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringPathExpressionContext : Path_expressionContext {
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public StringPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterStringPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitStringPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EpsilonPathExpressionContext : Path_expressionContext {
		public EpsilonPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEpsilonPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEpsilonPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEpsilonPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierPathExpressionContext : Path_expressionContext {
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIdentifierPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIdentifierPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberPathExpressionContext : Path_expressionContext {
		public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public NumberPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterNumberPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitNumberPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		return path_expression(0);
	}

	private Path_expressionContext path_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Path_expressionContext _localctx = new Path_expressionContext(Context, _parentState);
		Path_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_path_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EpsilonPathExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new IdentifierPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 180;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 181; Match(T__4);
						State = 182; identifier();
						}
						break;
					case 2:
						{
						_localctx = new NumberPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 183;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 184; Match(T__5);
						State = 185; Match(NUMERIC_LITERAL);
						State = 186; Match(T__6);
						}
						break;
					case 3:
						{
						_localctx = new StringPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 187;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 188; Match(T__5);
						State = 189; Match(STRING_LITERAL);
						State = 190; Match(T__6);
						}
						break;
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(sqlParser.K_WHERE, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(K_WHERE);
			State = 197; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		public ITerminalNode K_GROUP() { return GetToken(sqlParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(sqlParser.K_BY, 0); }
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_group_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(K_GROUP);
			State = 200; Match(K_BY);
			State = 201; scalar_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode K_ORDER() { return GetToken(sqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(sqlParser.K_BY, 0); }
		public Order_by_itemsContext order_by_items() {
			return GetRuleContext<Order_by_itemsContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(K_ORDER);
			State = 204; Match(K_BY);
			State = 205; order_by_items();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_itemsContext : ParserRuleContext {
		public Order_by_itemContext[] order_by_item() {
			return GetRuleContexts<Order_by_itemContext>();
		}
		public Order_by_itemContext order_by_item(int i) {
			return GetRuleContext<Order_by_itemContext>(i);
		}
		public Order_by_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_items(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_items(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_items(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_itemsContext order_by_items() {
		Order_by_itemsContext _localctx = new Order_by_itemsContext(Context, State);
		EnterRule(_localctx, 32, RULE_order_by_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; order_by_item();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 208; Match(T__1);
				State = 209; order_by_item();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_itemContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Sort_orderContext sort_order() {
			return GetRuleContext<Sort_orderContext>(0);
		}
		public Order_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_itemContext order_by_item() {
		Order_by_itemContext _localctx = new Order_by_itemContext(Context, State);
		EnterRule(_localctx, 34, RULE_order_by_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; scalar_expression(0);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 216; sort_order();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_orderContext : ParserRuleContext {
		public ITerminalNode K_ASC() { return GetToken(sqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(sqlParser.K_DESC, 0); }
		public Sort_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSort_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSort_order(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_orderContext sort_order() {
		Sort_orderContext _localctx = new Sort_orderContext(Context, State);
		EnterRule(_localctx, 36, RULE_sort_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !(_la==K_ASC || _la==K_DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_limit_clauseContext : ParserRuleContext {
		public ITerminalNode K_OFFSET() { return GetToken(sqlParser.K_OFFSET, 0); }
		public Offset_countContext offset_count() {
			return GetRuleContext<Offset_countContext>(0);
		}
		public ITerminalNode K_LIMIT() { return GetToken(sqlParser.K_LIMIT, 0); }
		public Limit_countContext limit_count() {
			return GetRuleContext<Limit_countContext>(0);
		}
		public Offset_limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_limit_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOffset_limit_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOffset_limit_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_limit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_limit_clauseContext offset_limit_clause() {
		Offset_limit_clauseContext _localctx = new Offset_limit_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_offset_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(K_OFFSET);
			State = 222; offset_count();
			State = 223; Match(K_LIMIT);
			State = 224; limit_count();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_countContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Offset_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOffset_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOffset_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_countContext offset_count() {
		Offset_countContext _localctx = new Offset_countContext(Context, State);
		EnterRule(_localctx, 40, RULE_offset_count);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_countContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Limit_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLimit_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLimit_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_countContext limit_count() {
		Limit_countContext _localctx = new Limit_countContext(Context, State);
		EnterRule(_localctx, 42, RULE_limit_count);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expressionContext : ParserRuleContext {
		public Scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression; } }
	 
		public Scalar_expressionContext() { }
		public virtual void CopyFrom(Scalar_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalScalarExpressionContext : Scalar_expressionContext {
		public Logical_scalar_expressionContext logical_scalar_expression() {
			return GetRuleContext<Logical_scalar_expressionContext>(0);
		}
		public LogicalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLogicalScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLogicalScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalScalarExpressionContext : Scalar_expressionContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public ConditionalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterConditionalScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitConditionalScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceScalarExpressionContext : Scalar_expressionContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public CoalesceScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterCoalesceScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitCoalesceScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenScalarExpressionContext : Scalar_expressionContext {
		public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		public ITerminalNode K_BETWEEN() { return GetToken(sqlParser.K_BETWEEN, 0); }
		public ITerminalNode K_AND() { return GetToken(sqlParser.K_AND, 0); }
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public BetweenScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBetweenScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBetweenScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expressionContext scalar_expression() {
		return scalar_expression(0);
	}

	private Scalar_expressionContext scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Scalar_expressionContext _localctx = new Scalar_expressionContext(Context, _parentState);
		Scalar_expressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_scalar_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new LogicalScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 231; logical_scalar_expression(0);
				}
				break;
			case 2:
				{
				_localctx = new BetweenScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 232; binary_scalar_expression(0);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 233; Match(K_NOT);
					}
				}

				State = 236; Match(K_BETWEEN);
				State = 237; binary_scalar_expression(0);
				State = 238; Match(K_AND);
				State = 239; binary_scalar_expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 252;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new ConditionalScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
						State = 243;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 244; Match(T__7);
						State = 245; scalar_expression(0);
						State = 246; Match(T__8);
						State = 247; scalar_expression(5);
						}
						break;
					case 2:
						{
						_localctx = new CoalesceScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
						State = 249;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 250; Match(T__9);
						State = 251; scalar_expression(4);
						}
						break;
					}
					} 
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_scalar_expressionContext : ParserRuleContext {
		public Binary_scalar_expressionContext binary_scalar_expression() {
			return GetRuleContext<Binary_scalar_expressionContext>(0);
		}
		public In_scalar_expressionContext in_scalar_expression() {
			return GetRuleContext<In_scalar_expressionContext>(0);
		}
		public Like_scalar_expressionContext like_scalar_expression() {
			return GetRuleContext<Like_scalar_expressionContext>(0);
		}
		public Logical_scalar_expressionContext[] logical_scalar_expression() {
			return GetRuleContexts<Logical_scalar_expressionContext>();
		}
		public Logical_scalar_expressionContext logical_scalar_expression(int i) {
			return GetRuleContext<Logical_scalar_expressionContext>(i);
		}
		public ITerminalNode K_AND() { return GetToken(sqlParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(sqlParser.K_OR, 0); }
		public Logical_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLogical_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLogical_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_scalar_expressionContext logical_scalar_expression() {
		return logical_scalar_expression(0);
	}

	private Logical_scalar_expressionContext logical_scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_scalar_expressionContext _localctx = new Logical_scalar_expressionContext(Context, _parentState);
		Logical_scalar_expressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_logical_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 258; binary_scalar_expression(0);
				}
				break;
			case 2:
				{
				State = 259; in_scalar_expression();
				}
				break;
			case 3:
				{
				State = 260; like_scalar_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 269;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new Logical_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_scalar_expression);
						State = 263;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 264; Match(K_AND);
						State = 265; logical_scalar_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_scalar_expression);
						State = 266;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 267; Match(K_OR);
						State = 268; logical_scalar_expression(2);
						}
						break;
					}
					} 
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class In_scalar_expressionContext : ParserRuleContext {
		public Binary_scalar_expressionContext binary_scalar_expression() {
			return GetRuleContext<Binary_scalar_expressionContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(sqlParser.K_IN, 0); }
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public In_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIn_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIn_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_scalar_expressionContext in_scalar_expression() {
		In_scalar_expressionContext _localctx = new In_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_in_scalar_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; binary_scalar_expression(0);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_NOT) {
				{
				State = 275; Match(K_NOT);
				}
			}

			State = 278; Match(K_IN);
			State = 279; Match(T__2);
			State = 280; scalar_expression_list();
			State = 281; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Like_scalar_expressionContext : ParserRuleContext {
		public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		public ITerminalNode K_LIKE() { return GetToken(sqlParser.K_LIKE, 0); }
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public Escape_expressionContext escape_expression() {
			return GetRuleContext<Escape_expressionContext>(0);
		}
		public Like_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLike_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLike_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Like_scalar_expressionContext like_scalar_expression() {
		Like_scalar_expressionContext _localctx = new Like_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_like_scalar_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; binary_scalar_expression(0);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_NOT) {
				{
				State = 284; Match(K_NOT);
				}
			}

			State = 287; Match(K_LIKE);
			State = 288; binary_scalar_expression(0);
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 289; escape_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Escape_expressionContext : ParserRuleContext {
		public ITerminalNode K_ESCAPE() { return GetToken(sqlParser.K_ESCAPE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public Escape_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escape_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEscape_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEscape_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscape_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Escape_expressionContext escape_expression() {
		Escape_expressionContext _localctx = new Escape_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_escape_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(K_ESCAPE);
			State = 293; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_scalar_expressionContext : ParserRuleContext {
		public Unary_scalar_expressionContext unary_scalar_expression() {
			return GetRuleContext<Unary_scalar_expressionContext>(0);
		}
		public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		public Multiplicative_operatorContext multiplicative_operator() {
			return GetRuleContext<Multiplicative_operatorContext>(0);
		}
		public Additive_operatorContext additive_operator() {
			return GetRuleContext<Additive_operatorContext>(0);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Equality_operatorContext equality_operator() {
			return GetRuleContext<Equality_operatorContext>(0);
		}
		public Bitwise_and_operatorContext bitwise_and_operator() {
			return GetRuleContext<Bitwise_and_operatorContext>(0);
		}
		public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() {
			return GetRuleContext<Bitwise_exclusive_or_operatorContext>(0);
		}
		public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() {
			return GetRuleContext<Bitwise_inclusive_or_operatorContext>(0);
		}
		public String_concat_operatorContext string_concat_operator() {
			return GetRuleContext<String_concat_operatorContext>(0);
		}
		public Binary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBinary_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBinary_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_scalar_expressionContext binary_scalar_expression() {
		return binary_scalar_expression(0);
	}

	private Binary_scalar_expressionContext binary_scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Binary_scalar_expressionContext _localctx = new Binary_scalar_expressionContext(Context, _parentState);
		Binary_scalar_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_binary_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 296; unary_scalar_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 330;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 298;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 299; multiplicative_operator();
						State = 300; binary_scalar_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 302;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 303; additive_operator();
						State = 304; binary_scalar_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 306;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 307; relational_operator();
						State = 308; binary_scalar_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 310;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 311; equality_operator();
						State = 312; binary_scalar_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 314;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 315; bitwise_and_operator();
						State = 316; binary_scalar_expression(5);
						}
						break;
					case 6:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 318;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 319; bitwise_exclusive_or_operator();
						State = 320; binary_scalar_expression(4);
						}
						break;
					case 7:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 322;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 323; bitwise_inclusive_or_operator();
						State = 324; binary_scalar_expression(3);
						}
						break;
					case 8:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327; string_concat_operator();
						State = 328; binary_scalar_expression(2);
						}
						break;
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_operatorContext : ParserRuleContext {
		public Multiplicative_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterMultiplicative_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitMultiplicative_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_operatorContext multiplicative_operator() {
		Multiplicative_operatorContext _localctx = new Multiplicative_operatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplicative_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_operatorContext : ParserRuleContext {
		public Additive_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAdditive_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAdditive_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_operatorContext additive_operator() {
		Additive_operatorContext _localctx = new Additive_operatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_additive_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_operatorContext : ParserRuleContext {
		public Equality_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEquality_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEquality_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_operatorContext equality_operator() {
		Equality_operatorContext _localctx = new Equality_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_equality_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_and_operatorContext : ParserRuleContext {
		public Bitwise_and_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_and_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_and_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_and_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_and_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_and_operatorContext bitwise_and_operator() {
		Bitwise_and_operatorContext _localctx = new Bitwise_and_operatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_bitwise_and_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_exclusive_or_operatorContext : ParserRuleContext {
		public Bitwise_exclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_exclusive_or_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_exclusive_or_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_exclusive_or_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_exclusive_or_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() {
		Bitwise_exclusive_or_operatorContext _localctx = new Bitwise_exclusive_or_operatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_bitwise_exclusive_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_inclusive_or_operatorContext : ParserRuleContext {
		public Bitwise_inclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_inclusive_or_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_inclusive_or_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_inclusive_or_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_inclusive_or_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() {
		Bitwise_inclusive_or_operatorContext _localctx = new Bitwise_inclusive_or_operatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_bitwise_inclusive_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_concat_operatorContext : ParserRuleContext {
		public String_concat_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_concat_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterString_concat_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitString_concat_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_concat_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_concat_operatorContext string_concat_operator() {
		String_concat_operatorContext _localctx = new String_concat_operatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_string_concat_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_scalar_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Unary_scalar_expressionContext unary_scalar_expression() {
			return GetRuleContext<Unary_scalar_expressionContext>(0);
		}
		public Unary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterUnary_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitUnary_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_scalar_expressionContext unary_scalar_expression() {
		Unary_scalar_expressionContext _localctx = new Unary_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_unary_scalar_expression);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__5:
			case T__25:
			case K_ALL:
			case K_ARRAY:
			case K_EXISTS:
			case K_FIRST:
			case K_FALSE:
			case K_LAST:
			case K_LEFT:
			case K_NULL:
			case K_RIGHT:
			case K_TRUE:
			case K_UDF:
			case K_UNDEFINED:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case LEX_IDENTIFIER:
			case PARAMETER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351; primary_expression(0);
				}
				break;
			case T__12:
			case T__13:
			case T__24:
			case K_NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 352; unary_operator();
				State = 353; unary_scalar_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__24) | (1L << K_NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
	 
		public Primary_expressionContext() { }
		public virtual void CopyFrom(Primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AllScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_ALL() { return GetToken(sqlParser.K_ALL, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public AllScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAllScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAllScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralScalarExpressionContext : Primary_expressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLiteralScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLiteralScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreateScalarExpressionContext : Primary_expressionContext {
		public Object_property_listContext object_property_list() {
			return GetRuleContext<Object_property_listContext>(0);
		}
		public ObjectCreateScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObjectCreateScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObjectCreateScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreateScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FirstScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_FIRST() { return GetToken(sqlParser.K_FIRST, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public FirstScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFirstScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFirstScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreateScalarExpressionContext : Primary_expressionContext {
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ArrayCreateScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayCreateScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayCreateScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreateScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexerScalarExpressionContext : Primary_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public MemberIndexerScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterMemberIndexerScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitMemberIndexerScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexerScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryScalarExpressionContext : Primary_expressionContext {
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public SubqueryScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSubqueryScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSubqueryScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyRefScalarExpressionBaseContext : Primary_expressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyRefScalarExpressionBaseContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallScalarExpressionContext : Primary_expressionContext {
		public Function_call_scalar_expressionContext function_call_scalar_expression() {
			return GetRuleContext<Function_call_scalar_expressionContext>(0);
		}
		public FunctionCallScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFunctionCallScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFunctionCallScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedScalarExperessionContext : Primary_expressionContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ParenthesizedScalarExperessionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterParenthesizedScalarExperession(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitParenthesizedScalarExperession(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedScalarExperession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterRefScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public ParameterRefScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterParameterRefScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitParameterRefScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterRefScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_EXISTS() { return GetToken(sqlParser.K_EXISTS, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ExistsScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterExistsScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitExistsScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_ARRAY() { return GetToken(sqlParser.K_ARRAY, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ArrayScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LastScalarExpressionContext : Primary_expressionContext {
		public ITerminalNode K_LAST() { return GetToken(sqlParser.K_LAST, 0); }
		public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public LastScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLastScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLastScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyRefScalarExpressionRecursiveContext : Primary_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyRefScalarExpressionRecursiveContext(Primary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionRecursive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionRecursive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionRecursive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		return primary_expression(0);
	}

	private Primary_expressionContext primary_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, _parentState);
		Primary_expressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_primary_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new PropertyRefScalarExpressionBaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 360; identifier();
				}
				break;
			case 2:
				{
				_localctx = new ParameterRefScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361; Match(PARAMETER);
				}
				break;
			case 3:
				{
				_localctx = new LiteralScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362; literal();
				}
				break;
			case 4:
				{
				_localctx = new ArrayCreateScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363; Match(T__5);
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (T__2 - 3)) | (1L << (T__5 - 3)) | (1L << (T__12 - 3)) | (1L << (T__13 - 3)) | (1L << (T__24 - 3)) | (1L << (T__25 - 3)) | (1L << (K_ALL - 3)) | (1L << (K_ARRAY - 3)) | (1L << (K_EXISTS - 3)) | (1L << (K_FIRST - 3)) | (1L << (K_FALSE - 3)) | (1L << (K_LAST - 3)) | (1L << (K_LEFT - 3)) | (1L << (K_NOT - 3)) | (1L << (K_NULL - 3)) | (1L << (K_RIGHT - 3)) | (1L << (K_TRUE - 3)) | (1L << (K_UDF - 3)) | (1L << (K_UNDEFINED - 3)) | (1L << (NUMERIC_LITERAL - 3)) | (1L << (STRING_LITERAL - 3)) | (1L << (LEX_IDENTIFIER - 3)) | (1L << (PARAMETER - 3)))) != 0)) {
					{
					State = 364; scalar_expression_list();
					}
				}

				State = 367; Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new ObjectCreateScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368; Match(T__25);
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL) {
					{
					State = 369; object_property_list();
					}
				}

				State = 372; Match(T__26);
				}
				break;
			case 6:
				{
				_localctx = new ParenthesizedScalarExperessionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 373; Match(T__2);
				State = 374; scalar_expression(0);
				State = 375; Match(T__3);
				}
				break;
			case 7:
				{
				_localctx = new SubqueryScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 377; Match(T__2);
				State = 378; sql_query();
				State = 379; Match(T__3);
				}
				break;
			case 8:
				{
				_localctx = new ExistsScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 381; Match(K_EXISTS);
				State = 382; Match(T__2);
				State = 383; sql_query();
				State = 384; Match(T__3);
				}
				break;
			case 9:
				{
				_localctx = new ArrayScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386; Match(K_ARRAY);
				State = 387; Match(T__2);
				State = 388; sql_query();
				State = 389; Match(T__3);
				}
				break;
			case 10:
				{
				_localctx = new AllScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391; Match(K_ALL);
				State = 392; Match(T__2);
				State = 393; sql_query();
				State = 394; Match(T__3);
				}
				break;
			case 11:
				{
				_localctx = new FirstScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396; Match(K_FIRST);
				State = 397; Match(T__2);
				State = 398; sql_query();
				State = 399; Match(T__3);
				}
				break;
			case 12:
				{
				_localctx = new LastScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 401; Match(K_LAST);
				State = 402; Match(T__2);
				State = 403; sql_query();
				State = 404; Match(T__3);
				}
				break;
			case 13:
				{
				_localctx = new FunctionCallScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 406; function_call_scalar_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new PropertyRefScalarExpressionRecursiveContext(new Primary_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary_expression);
						State = 409;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 410; Match(T__4);
						State = 411; identifier();
						}
						break;
					case 2:
						{
						_localctx = new MemberIndexerScalarExpressionContext(new Primary_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary_expression);
						State = 412;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 413; Match(T__5);
						State = 414; scalar_expression(0);
						State = 415; Match(T__6);
						}
						break;
					}
					} 
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_scalar_expressionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode K_UDF() { return GetToken(sqlParser.K_UDF, 0); }
		public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ITerminalNode K_LEFT() { return GetToken(sqlParser.K_LEFT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(sqlParser.K_RIGHT, 0); }
		public Function_call_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call_scalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call_scalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_scalar_expressionContext function_call_scalar_expression() {
		Function_call_scalar_expressionContext _localctx = new Function_call_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_call_scalar_expression);
		int _la;
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ALL:
			case K_FIRST:
			case K_LAST:
			case K_UDF:
			case LEX_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_UDF) {
					{
					State = 422; Match(K_UDF);
					State = 423; Match(T__4);
					}
				}

				State = 426; identifier();
				State = 427; Match(T__2);
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (T__2 - 3)) | (1L << (T__5 - 3)) | (1L << (T__12 - 3)) | (1L << (T__13 - 3)) | (1L << (T__24 - 3)) | (1L << (T__25 - 3)) | (1L << (K_ALL - 3)) | (1L << (K_ARRAY - 3)) | (1L << (K_EXISTS - 3)) | (1L << (K_FIRST - 3)) | (1L << (K_FALSE - 3)) | (1L << (K_LAST - 3)) | (1L << (K_LEFT - 3)) | (1L << (K_NOT - 3)) | (1L << (K_NULL - 3)) | (1L << (K_RIGHT - 3)) | (1L << (K_TRUE - 3)) | (1L << (K_UDF - 3)) | (1L << (K_UNDEFINED - 3)) | (1L << (NUMERIC_LITERAL - 3)) | (1L << (STRING_LITERAL - 3)) | (1L << (LEX_IDENTIFIER - 3)) | (1L << (PARAMETER - 3)))) != 0)) {
					{
					State = 428; scalar_expression_list();
					}
				}

				State = 431; Match(T__3);
				}
				break;
			case K_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433; Match(K_LEFT);
				State = 434; Match(T__2);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (T__2 - 3)) | (1L << (T__5 - 3)) | (1L << (T__12 - 3)) | (1L << (T__13 - 3)) | (1L << (T__24 - 3)) | (1L << (T__25 - 3)) | (1L << (K_ALL - 3)) | (1L << (K_ARRAY - 3)) | (1L << (K_EXISTS - 3)) | (1L << (K_FIRST - 3)) | (1L << (K_FALSE - 3)) | (1L << (K_LAST - 3)) | (1L << (K_LEFT - 3)) | (1L << (K_NOT - 3)) | (1L << (K_NULL - 3)) | (1L << (K_RIGHT - 3)) | (1L << (K_TRUE - 3)) | (1L << (K_UDF - 3)) | (1L << (K_UNDEFINED - 3)) | (1L << (NUMERIC_LITERAL - 3)) | (1L << (STRING_LITERAL - 3)) | (1L << (LEX_IDENTIFIER - 3)) | (1L << (PARAMETER - 3)))) != 0)) {
					{
					State = 435; scalar_expression_list();
					}
				}

				State = 438; Match(T__3);
				}
				break;
			case K_RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439; Match(K_RIGHT);
				State = 440; Match(T__2);
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (T__2 - 3)) | (1L << (T__5 - 3)) | (1L << (T__12 - 3)) | (1L << (T__13 - 3)) | (1L << (T__24 - 3)) | (1L << (T__25 - 3)) | (1L << (K_ALL - 3)) | (1L << (K_ARRAY - 3)) | (1L << (K_EXISTS - 3)) | (1L << (K_FIRST - 3)) | (1L << (K_FALSE - 3)) | (1L << (K_LAST - 3)) | (1L << (K_LEFT - 3)) | (1L << (K_NOT - 3)) | (1L << (K_NULL - 3)) | (1L << (K_RIGHT - 3)) | (1L << (K_TRUE - 3)) | (1L << (K_UDF - 3)) | (1L << (K_UNDEFINED - 3)) | (1L << (NUMERIC_LITERAL - 3)) | (1L << (STRING_LITERAL - 3)) | (1L << (LEX_IDENTIFIER - 3)) | (1L << (PARAMETER - 3)))) != 0)) {
					{
					State = 441; scalar_expression_list();
					}
				}

				State = 444; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expression_listContext : ParserRuleContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Scalar_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterScalar_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitScalar_expression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expression_listContext scalar_expression_list() {
		Scalar_expression_listContext _localctx = new Scalar_expression_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_scalar_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; scalar_expression(0);
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 448; Match(T__1);
				State = 449; scalar_expression(0);
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_property_listContext : ParserRuleContext {
		public Object_propertyContext[] object_property() {
			return GetRuleContexts<Object_propertyContext>();
		}
		public Object_propertyContext object_property(int i) {
			return GetRuleContext<Object_propertyContext>(i);
		}
		public Object_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObject_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObject_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_property_listContext object_property_list() {
		Object_property_listContext _localctx = new Object_property_listContext(Context, State);
		EnterRule(_localctx, 82, RULE_object_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; object_property();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 456; Match(T__1);
				State = 457; object_property();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertyContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Object_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObject_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObject_property(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertyContext object_property() {
		Object_propertyContext _localctx = new Object_propertyContext(Context, State);
		EnterRule(_localctx, 84, RULE_object_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(STRING_LITERAL);
			State = 464; Match(T__8);
			State = 465; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode LEX_IDENTIFIER() { return GetToken(sqlParser.LEX_IDENTIFIER, 0); }
		public ITerminalNode K_ALL() { return GetToken(sqlParser.K_ALL, 0); }
		public ITerminalNode K_FIRST() { return GetToken(sqlParser.K_FIRST, 0); }
		public ITerminalNode K_LAST() { return GetToken(sqlParser.K_LAST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (K_ALL - 28)) | (1L << (K_FIRST - 28)) | (1L << (K_LAST - 28)) | (1L << (LEX_IDENTIFIER - 28)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode K_TRUE() { return GetToken(sqlParser.K_TRUE, 0); }
		public ITerminalNode K_FALSE() { return GetToken(sqlParser.K_FALSE, 0); }
		public ITerminalNode K_NULL() { return GetToken(sqlParser.K_NULL, 0); }
		public ITerminalNode K_UNDEFINED() { return GetToken(sqlParser.K_UNDEFINED, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (K_FALSE - 40)) | (1L << (K_NULL - 40)) | (1L << (K_TRUE - 40)) | (1L << (K_UNDEFINED - 40)) | (1L << (NUMERIC_LITERAL - 40)) | (1L << (STRING_LITERAL - 40)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return collection_expression_sempred((Collection_expressionContext)_localctx, predIndex);
		case 12: return path_expression_sempred((Path_expressionContext)_localctx, predIndex);
		case 22: return scalar_expression_sempred((Scalar_expressionContext)_localctx, predIndex);
		case 23: return logical_scalar_expression_sempred((Logical_scalar_expressionContext)_localctx, predIndex);
		case 27: return binary_scalar_expression_sempred((Binary_scalar_expressionContext)_localctx, predIndex);
		case 38: return primary_expression_sempred((Primary_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool collection_expression_sempred(Collection_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool path_expression_sempred(Path_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool scalar_expression_sempred(Scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}
	private bool logical_scalar_expression_sempred(Logical_scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool binary_scalar_expression_sempred(Binary_scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primary_expression_sempred(Primary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x44', '\x1DA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x62', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x65', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'h', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'k', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'n', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', 'r', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 'u', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x7F', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x89', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x8C', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x91', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x99', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x9C', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA2', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xA7', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xAA', '\v', '\f', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xAE', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xB4', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xC2', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xC5', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\a', '\x12', '\xD5', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xD8', 
		'\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xDC', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xED', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xF4', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', 
		'\x18', '\xFF', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x102', '\v', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x108', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x110', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\x113', '\v', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x117', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x120', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x125', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x14D', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x150', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x166', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', 
		'\x170', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x175', 
		'\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x19A', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x1A4', 
		'\n', '(', '\f', '(', '\xE', '(', '\x1A7', '\v', '(', '\x3', ')', '\x3', 
		')', '\x5', ')', '\x1AB', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x1B0', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x1B7', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x1BD', '\n', ')', '\x3', ')', '\x5', 
		')', '\x1C0', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', 
		'\x1C5', '\n', '*', '\f', '*', '\xE', '*', '\x1C8', '\v', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\a', '+', '\x1CD', '\n', '+', '\f', '+', 
		'\xE', '+', '\x1D0', '\v', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x2', 
		'\b', '\x16', '\x1A', '.', '\x30', '\x38', 'N', '/', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\x2', '\v', '\x4', '\x2', 
		'\x41', '\x41', '\x44', '\x44', '\x4', '\x2', '\"', '\"', '%', '%', '\x4', 
		'\x2', '\x3', '\x3', '\r', '\xE', '\x3', '\x2', '\xF', '\x10', '\x3', 
		'\x2', '\x11', '\x14', '\x3', '\x2', '\x15', '\x16', '\x5', '\x2', '\xF', 
		'\x10', '\x1B', '\x1B', '\x33', '\x33', '\x6', '\x2', '\x1E', '\x1E', 
		')', ')', '/', '/', '\x43', '\x43', '\a', '\x2', '*', '*', '\x34', '\x34', 
		';', ';', '=', '=', '\x41', '\x42', '\x2', '\x1EE', '\x2', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '_', '\x3', '\x2', '\x2', '\x2', '\x6', 'o', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'x', '\x3', '\x2', '\x2', '\x2', '\n', 
		'~', '\x3', '\x2', '\x2', '\x2', '\f', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x82', '\x3', '\x2', '\x2', '\x2', '\x10', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x14', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xCD', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '$', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xDD', '\x3', '\x2', '\x2', '\x2', '(', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xE4', '\x3', '\x2', '\x2', '\x2', ',', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x32', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x36', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x129', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '<', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x155', '\x3', '\x2', '\x2', '\x2', '@', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x159', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x46', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x15F', '\x3', '\x2', '\x2', '\x2', 'J', '\x165', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x167', '\x3', '\x2', '\x2', '\x2', 'N', '\x199', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1C1', '\x3', '\x2', '\x2', '\x2', 'T', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1D1', '\x3', '\x2', '\x2', '\x2', 'X', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\x5', '\x4', '\x3', '\x2', ']', '^', '\a', '\x2', '\x2', '\x3', 
		'^', '\x3', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x5', '\x6', '\x4', 
		'\x2', '`', '\x62', '\x5', '\x14', '\v', '\x2', '\x61', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', '\x1C', '\xF', '\x2', 
		'\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x5', 
		'\x1E', '\x10', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 'i', 
		'k', '\x5', ' ', '\x11', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x5', '(', '\x15', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'q', '\a', '\x39', '\x2', '\x2', 'p', 'r', '\a', '&', '\x2', 
		'\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', '\b', '\x5', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\n', '\x6', 
		'\x2', 'w', '\a', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', ':', '\x2', 
		'\x2', 'y', 'z', '\t', '\x2', '\x2', '\x2', 'z', '\t', '\x3', '\x2', '\x2', 
		'\x2', '{', '\x7F', '\x5', '\f', '\a', '\x2', '|', '\x7F', '\x5', '\xE', 
		'\b', '\x2', '}', '\x7F', '\x5', '\x10', '\t', '\x2', '~', '{', '\x3', 
		'\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\v', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\a', '\x3', '\x2', '\x2', '\x81', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', '>', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'.', '\x18', '\x2', '\x84', '\xF', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x8A', '\x5', '\x12', '\n', '\x2', '\x86', '\x87', '\a', '\x4', '\x2', 
		'\x2', '\x87', '\x89', '\x5', '\x12', '\n', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x90', '\x5', '.', '\x18', '\x2', '\x8E', 
		'\x8F', '\a', '!', '\x2', '\x2', '\x8F', '\x91', '\x5', 'X', '-', '\x2', 
		'\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x13', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\a', '+', '\x2', '\x2', '\x93', '\x94', '\x5', '\x16', '\f', '\x2', '\x94', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\b', '\f', '\x1', 
		'\x2', '\x96', '\x9B', '\x5', '\x18', '\r', '\x2', '\x97', '\x99', '\a', 
		'!', '\x2', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9C', '\x5', 'X', '-', '\x2', '\x9B', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', 'X', '-', '\x2', 
		'\x9E', '\x9F', '\a', '-', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x18', 
		'\r', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\f', '\x3', 
		'\x2', '\x2', '\xA4', '\xA5', '\a', '.', '\x2', '\x2', '\xA5', '\xA7', 
		'\x5', '\x16', '\f', '\x4', '\xA6', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAD', '\x5', 'X', '-', '\x2', '\xAC', '\xAE', '\x5', '\x1A', 
		'\xE', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\a', '\x5', '\x2', '\x2', '\xB0', '\xB1', '\x5', '\x4', 
		'\x3', '\x2', '\xB1', '\xB2', '\a', '\x6', '\x2', '\x2', '\xB2', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xC3', '\b', '\xE', '\x1', '\x2', '\xB6', '\xB7', 
		'\f', '\x6', '\x2', '\x2', '\xB7', '\xB8', '\a', '\a', '\x2', '\x2', '\xB8', 
		'\xC2', '\x5', 'X', '-', '\x2', '\xB9', '\xBA', '\f', '\x5', '\x2', '\x2', 
		'\xBA', '\xBB', '\a', '\b', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x41', 
		'\x2', '\x2', '\xBC', '\xC2', '\a', '\t', '\x2', '\x2', '\xBD', '\xBE', 
		'\f', '\x4', '\x2', '\x2', '\xBE', '\xBF', '\a', '\b', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\x42', '\x2', '\x2', '\xC0', '\xC2', '\a', '\t', '\x2', 
		'\x2', '\xC1', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\a', '?', '\x2', '\x2', '\xC7', '\xC8', '\x5', '.', '\x18', '\x2', 
		'\xC8', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', ',', 
		'\x2', '\x2', '\xCA', '\xCB', '\a', '$', '\x2', '\x2', '\xCB', '\xCC', 
		'\x5', 'R', '*', '\x2', '\xCC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\a', '\x37', '\x2', '\x2', '\xCE', '\xCF', '\a', '$', '\x2', 
		'\x2', '\xCF', '\xD0', '\x5', '\"', '\x12', '\x2', '\xD0', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD6', '\x5', '$', '\x13', '\x2', '\xD2', 
		'\xD3', '\a', '\x4', '\x2', '\x2', '\xD3', '\xD5', '\x5', '$', '\x13', 
		'\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\x5', 
		'.', '\x18', '\x2', '\xDA', '\xDC', '\x5', '&', '\x14', '\x2', '\xDB', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '%', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\t', 
		'\x3', '\x2', '\x2', '\xDE', '\'', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\a', '\x35', '\x2', '\x2', '\xE0', '\xE1', '\x5', '*', '\x16', 
		'\x2', '\xE1', '\xE2', '\a', '\x32', '\x2', '\x2', '\xE2', '\xE3', '\x5', 
		',', '\x17', '\x2', '\xE3', ')', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', 
		'\t', '\x2', '\x2', '\x2', '\xE5', '+', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\t', '\x2', '\x2', '\x2', '\xE7', '-', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\b', '\x18', '\x1', '\x2', '\xE9', '\xF4', '\x5', '\x30', 
		'\x19', '\x2', '\xEA', '\xEC', '\x5', '\x38', '\x1D', '\x2', '\xEB', '\xED', 
		'\a', '\x33', '\x2', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xEF', '\a', '#', '\x2', '\x2', '\xEF', '\xF0', 
		'\x5', '\x38', '\x1D', '\x2', '\xF0', '\xF1', '\a', '\x1F', '\x2', '\x2', 
		'\xF1', '\xF2', '\x5', '\x38', '\x1D', '\x2', '\xF2', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\f', '\x6', '\x2', '\x2', '\xF6', '\xF7', '\a', '\n', 
		'\x2', '\x2', '\xF7', '\xF8', '\x5', '.', '\x18', '\x2', '\xF8', '\xF9', 
		'\a', '\v', '\x2', '\x2', '\xF9', '\xFA', '\x5', '.', '\x18', '\a', '\xFA', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\f', '\x5', '\x2', 
		'\x2', '\xFC', '\xFD', '\a', '\f', '\x2', '\x2', '\xFD', '\xFF', '\x5', 
		'.', '\x18', '\x6', '\xFE', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\b', 
		'\x19', '\x1', '\x2', '\x104', '\x108', '\x5', '\x38', '\x1D', '\x2', 
		'\x105', '\x108', '\x5', '\x32', '\x1A', '\x2', '\x106', '\x108', '\x5', 
		'\x34', '\x1B', '\x2', '\x107', '\x103', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x111', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\f', '\x4', '\x2', '\x2', '\x10A', '\x10B', '\a', '\x1F', '\x2', '\x2', 
		'\x10B', '\x110', '\x5', '\x30', '\x19', '\x5', '\x10C', '\x10D', '\f', 
		'\x3', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x36', '\x2', '\x2', '\x10E', 
		'\x110', '\x5', '\x30', '\x19', '\x4', '\x10F', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\x10F', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x116', '\x5', '\x38', '\x1D', '\x2', '\x115', '\x117', '\a', '\x33', 
		'\x2', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x119', '\a', '-', '\x2', '\x2', '\x119', '\x11A', '\a', '\x5', 
		'\x2', '\x2', '\x11A', '\x11B', '\x5', 'R', '*', '\x2', '\x11B', '\x11C', 
		'\a', '\x6', '\x2', '\x2', '\x11C', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11F', '\x5', '\x38', '\x1D', '\x2', '\x11E', '\x120', '\a', 
		'\x33', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x122', '\a', '\x31', '\x2', '\x2', '\x122', '\x124', 
		'\x5', '\x38', '\x1D', '\x2', '\x123', '\x125', '\x5', '\x36', '\x1C', 
		'\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\a', '\'', '\x2', '\x2', '\x127', '\x128', '\a', '\x42', 
		'\x2', '\x2', '\x128', '\x37', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', 
		'\b', '\x1D', '\x1', '\x2', '\x12A', '\x12B', '\x5', 'J', '&', '\x2', 
		'\x12B', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\f', 
		'\n', '\x2', '\x2', '\x12D', '\x12E', '\x5', ':', '\x1E', '\x2', '\x12E', 
		'\x12F', '\x5', '\x38', '\x1D', '\v', '\x12F', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x130', '\x131', '\f', '\t', '\x2', '\x2', '\x131', '\x132', 
		'\x5', '<', '\x1F', '\x2', '\x132', '\x133', '\x5', '\x38', '\x1D', '\n', 
		'\x133', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\f', 
		'\b', '\x2', '\x2', '\x135', '\x136', '\x5', '>', ' ', '\x2', '\x136', 
		'\x137', '\x5', '\x38', '\x1D', '\t', '\x137', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x138', '\x139', '\f', '\a', '\x2', '\x2', '\x139', '\x13A', 
		'\x5', '@', '!', '\x2', '\x13A', '\x13B', '\x5', '\x38', '\x1D', '\b', 
		'\x13B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\f', 
		'\x6', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\x42', '\"', '\x2', '\x13E', 
		'\x13F', '\x5', '\x38', '\x1D', '\a', '\x13F', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x140', '\x141', '\f', '\x5', '\x2', '\x2', '\x141', '\x142', 
		'\x5', '\x44', '#', '\x2', '\x142', '\x143', '\x5', '\x38', '\x1D', '\x6', 
		'\x143', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\f', 
		'\x4', '\x2', '\x2', '\x145', '\x146', '\x5', '\x46', '$', '\x2', '\x146', 
		'\x147', '\x5', '\x38', '\x1D', '\x5', '\x147', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x148', '\x149', '\f', '\x3', '\x2', '\x2', '\x149', '\x14A', 
		'\x5', 'H', '%', '\x2', '\x14A', '\x14B', '\x5', '\x38', '\x1D', '\x4', 
		'\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x130', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', 
		'\t', '\x4', '\x2', '\x2', '\x152', ';', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x154', '\t', '\x5', '\x2', '\x2', '\x154', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\t', '\x6', '\x2', '\x2', '\x156', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x158', '\t', '\a', '\x2', '\x2', '\x158', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\a', '\x17', '\x2', 
		'\x2', '\x15A', '\x43', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\a', '\x18', '\x2', '\x2', '\x15C', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\a', '\x19', '\x2', '\x2', '\x15E', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x15F', '\x160', '\a', '\x1A', '\x2', '\x2', '\x160', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x166', '\x5', 'N', '(', '\x2', 
		'\x162', '\x163', '\x5', 'L', '\'', '\x2', '\x163', '\x164', '\x5', 'J', 
		'&', '\x2', '\x164', '\x166', '\x3', '\x2', '\x2', '\x2', '\x165', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x166', 'K', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\t', '\b', 
		'\x2', '\x2', '\x168', 'M', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', 
		'\b', '(', '\x1', '\x2', '\x16A', '\x19A', '\x5', 'X', '-', '\x2', '\x16B', 
		'\x19A', '\a', '\x44', '\x2', '\x2', '\x16C', '\x19A', '\x5', 'Z', '.', 
		'\x2', '\x16D', '\x16F', '\a', '\b', '\x2', '\x2', '\x16E', '\x170', '\x5', 
		'R', '*', '\x2', '\x16F', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x19A', '\a', '\t', '\x2', '\x2', '\x172', '\x174', '\a', 
		'\x1C', '\x2', '\x2', '\x173', '\x175', '\x5', 'T', '+', '\x2', '\x174', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x19A', 
		'\a', '\x1D', '\x2', '\x2', '\x177', '\x178', '\a', '\x5', '\x2', '\x2', 
		'\x178', '\x179', '\x5', '.', '\x18', '\x2', '\x179', '\x17A', '\a', '\x6', 
		'\x2', '\x2', '\x17A', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\a', '\x5', '\x2', '\x2', '\x17C', '\x17D', '\x5', '\x4', '\x3', '\x2', 
		'\x17D', '\x17E', '\a', '\x6', '\x2', '\x2', '\x17E', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x17F', '\x180', '\a', '(', '\x2', '\x2', '\x180', 
		'\x181', '\a', '\x5', '\x2', '\x2', '\x181', '\x182', '\x5', '\x4', '\x3', 
		'\x2', '\x182', '\x183', '\a', '\x6', '\x2', '\x2', '\x183', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\a', ' ', '\x2', '\x2', 
		'\x185', '\x186', '\a', '\x5', '\x2', '\x2', '\x186', '\x187', '\x5', 
		'\x4', '\x3', '\x2', '\x187', '\x188', '\a', '\x6', '\x2', '\x2', '\x188', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\a', '\x1E', '\x2', 
		'\x2', '\x18A', '\x18B', '\a', '\x5', '\x2', '\x2', '\x18B', '\x18C', 
		'\x5', '\x4', '\x3', '\x2', '\x18C', '\x18D', '\a', '\x6', '\x2', '\x2', 
		'\x18D', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', 
		')', '\x2', '\x2', '\x18F', '\x190', '\a', '\x5', '\x2', '\x2', '\x190', 
		'\x191', '\x5', '\x4', '\x3', '\x2', '\x191', '\x192', '\a', '\x6', '\x2', 
		'\x2', '\x192', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', 
		'\a', '/', '\x2', '\x2', '\x194', '\x195', '\a', '\x5', '\x2', '\x2', 
		'\x195', '\x196', '\x5', '\x4', '\x3', '\x2', '\x196', '\x197', '\a', 
		'\x6', '\x2', '\x2', '\x197', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x19A', '\x5', 'P', ')', '\x2', '\x199', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x199', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x172', '\x3', '\x2', '\x2', '\x2', '\x199', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x199', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x199', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x189', '\x3', '\x2', '\x2', '\x2', '\x199', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x19C', '\f', '\n', '\x2', '\x2', '\x19C', 
		'\x19D', '\a', '\a', '\x2', '\x2', '\x19D', '\x1A4', '\x5', 'X', '-', 
		'\x2', '\x19E', '\x19F', '\f', '\t', '\x2', '\x2', '\x19F', '\x1A0', '\a', 
		'\b', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '.', '\x18', '\x2', '\x1A1', 
		'\x1A2', '\a', '\t', '\x2', '\x2', '\x1A2', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', 'O', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\a', '<', '\x2', 
		'\x2', '\x1A9', '\x1AB', '\a', '\a', '\x2', '\x2', '\x1AA', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x5', 'X', '-', 
		'\x2', '\x1AD', '\x1AF', '\a', '\x5', '\x2', '\x2', '\x1AE', '\x1B0', 
		'\x5', 'R', '*', '\x2', '\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\a', '\x6', '\x2', '\x2', '\x1B2', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x30', '\x2', 
		'\x2', '\x1B4', '\x1B6', '\a', '\x5', '\x2', '\x2', '\x1B5', '\x1B7', 
		'\x5', 'R', '*', '\x2', '\x1B6', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1C0', '\a', '\x6', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\a', '\x38', '\x2', '\x2', '\x1BA', '\x1BC', '\a', '\x5', '\x2', 
		'\x2', '\x1BB', '\x1BD', '\x5', 'R', '*', '\x2', '\x1BC', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C0', '\a', '\x6', '\x2', 
		'\x2', '\x1BF', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C6', '\x5', '.', 
		'\x18', '\x2', '\x1C2', '\x1C3', '\a', '\x4', '\x2', '\x2', '\x1C3', '\x1C5', 
		'\x5', '.', '\x18', '\x2', '\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CE', '\x5', 'V', ',', '\x2', '\x1CA', '\x1CB', '\a', 
		'\x4', '\x2', '\x2', '\x1CB', '\x1CD', '\x5', 'V', ',', '\x2', '\x1CC', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', 
		'\x42', '\x2', '\x2', '\x1D2', '\x1D3', '\a', '\v', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\x5', '.', '\x18', '\x2', '\x1D4', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D6', '\t', '\t', '\x2', '\x2', '\x1D6', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\t', '\n', '\x2', '\x2', '\x1D8', 
		'[', '\x3', '\x2', '\x2', '\x2', '/', '\x61', '\x64', 'g', 'j', 'm', 'q', 
		't', '~', '\x8A', '\x90', '\x98', '\x9B', '\xA1', '\xA8', '\xAD', '\xB3', 
		'\xC1', '\xC3', '\xD6', '\xDB', '\xEC', '\xF3', '\xFE', '\x100', '\x107', 
		'\x10F', '\x111', '\x116', '\x11F', '\x124', '\x14C', '\x14E', '\x165', 
		'\x16F', '\x174', '\x199', '\x1A3', '\x1A5', '\x1AA', '\x1AF', '\x1B6', 
		'\x1BC', '\x1BF', '\x1C6', '\x1CE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
