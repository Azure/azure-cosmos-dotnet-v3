//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from sql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
internal partial class sqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, K_ALL=28, K_AND=29, K_ARRAY=30, K_AS=31, 
		K_ASC=32, K_BETWEEN=33, K_BY=34, K_DESC=35, K_DISTINCT=36, K_ESCAPE=37, 
		K_EXISTS=38, K_FIRST=39, K_FALSE=40, K_FROM=41, K_GROUP=42, K_IN=43, K_JOIN=44, 
		K_LAST=45, K_LEFT=46, K_LIKE=47, K_LIMIT=48, K_NOT=49, K_NULL=50, K_OFFSET=51, 
		K_OR=52, K_ORDER=53, K_RIGHT=54, K_SELECT=55, K_TOP=56, K_TRUE=57, K_UDF=58, 
		K_UNDEFINED=59, K_VALUE=60, K_WHERE=61, WS=62, NUMERIC_LITERAL=63, STRING_LITERAL=64, 
		LEX_IDENTIFIER=65, PARAMETER=66;
	public const int
		RULE_program = 0, RULE_sql_query = 1, RULE_select_clause = 2, RULE_top_spec = 3, 
		RULE_selection = 4, RULE_select_star_spec = 5, RULE_select_value_spec = 6, 
		RULE_select_list_spec = 7, RULE_select_item = 8, RULE_from_clause = 9, 
		RULE_collection_expression = 10, RULE_collection = 11, RULE_path_expression = 12, 
		RULE_where_clause = 13, RULE_group_by_clause = 14, RULE_order_by_clause = 15, 
		RULE_order_by_items = 16, RULE_order_by_item = 17, RULE_sort_order = 18, 
		RULE_offset_limit_clause = 19, RULE_offset_count = 20, RULE_limit_count = 21, 
		RULE_scalar_expression = 22, RULE_logical_scalar_expression = 23, RULE_in_scalar_expression = 24, 
		RULE_like_scalar_expression = 25, RULE_escape_expression = 26, RULE_binary_scalar_expression = 27, 
		RULE_multiplicative_operator = 28, RULE_additive_operator = 29, RULE_relational_operator = 30, 
		RULE_equality_operator = 31, RULE_bitwise_and_operator = 32, RULE_bitwise_exclusive_or_operator = 33, 
		RULE_bitwise_inclusive_or_operator = 34, RULE_string_concat_operator = 35, 
		RULE_unary_scalar_expression = 36, RULE_unary_operator = 37, RULE_primary_expression = 38, 
		RULE_function_call_scalar_expression = 39, RULE_scalar_expression_list = 40, 
		RULE_object_property_list = 41, RULE_object_property = 42, RULE_identifier = 43, 
		RULE_literal = 44;
	public static readonly string[] ruleNames = {
		"program", "sql_query", "select_clause", "top_spec", "selection", "select_star_spec", 
		"select_value_spec", "select_list_spec", "select_item", "from_clause", 
		"collection_expression", "collection", "path_expression", "where_clause", 
		"group_by_clause", "order_by_clause", "order_by_items", "order_by_item", 
		"sort_order", "offset_limit_clause", "offset_count", "limit_count", "scalar_expression", 
		"logical_scalar_expression", "in_scalar_expression", "like_scalar_expression", 
		"escape_expression", "binary_scalar_expression", "multiplicative_operator", 
		"additive_operator", "relational_operator", "equality_operator", "bitwise_and_operator", 
		"bitwise_exclusive_or_operator", "bitwise_inclusive_or_operator", "string_concat_operator", 
		"unary_scalar_expression", "unary_operator", "primary_expression", "function_call_scalar_expression", 
		"scalar_expression_list", "object_property_list", "object_property", "identifier", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "','", "'('", "')'", "'.'", "'['", "']'", "'?'", "':'", "'??'", 
		"'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'>='", "'<='", "'='", "'!='", 
		"'&'", "'^'", "'|'", "'||'", "'~'", "'{'", "'}'", null, null, null, null, 
		null, null, null, null, null, null, null, null, "'false'", null, null, 
		null, null, null, null, null, null, null, "'null'", null, null, null, 
		null, null, null, "'true'", "'udf'", "'undefined'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "K_ALL", "K_AND", "K_ARRAY", "K_AS", "K_ASC", 
		"K_BETWEEN", "K_BY", "K_DESC", "K_DISTINCT", "K_ESCAPE", "K_EXISTS", "K_FIRST", 
		"K_FALSE", "K_FROM", "K_GROUP", "K_IN", "K_JOIN", "K_LAST", "K_LEFT", 
		"K_LIKE", "K_LIMIT", "K_NOT", "K_NULL", "K_OFFSET", "K_OR", "K_ORDER", 
		"K_RIGHT", "K_SELECT", "K_TOP", "K_TRUE", "K_UDF", "K_UNDEFINED", "K_VALUE", 
		"K_WHERE", "WS", "NUMERIC_LITERAL", "STRING_LITERAL", "LEX_IDENTIFIER", 
		"PARAMETER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static sqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sqlParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			sql_query();
			State = 91;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Offset_limit_clauseContext offset_limit_clause() {
			return GetRuleContext<Offset_limit_clauseContext>(0);
		}
		public Sql_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSql_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSql_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_query(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_queryContext sql_query() {
		Sql_queryContext _localctx = new Sql_queryContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			select_clause();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_FROM) {
				{
				State = 94;
				from_clause();
				}
			}

			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 97;
				where_clause();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_GROUP) {
				{
				State = 100;
				group_by_clause();
				}
			}

			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 103;
				order_by_clause();
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_OFFSET) {
				{
				State = 106;
				offset_limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SELECT() { return GetToken(sqlParser.K_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext selection() {
			return GetRuleContext<SelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DISTINCT() { return GetToken(sqlParser.K_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_specContext top_spec() {
			return GetRuleContext<Top_specContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(K_SELECT);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_DISTINCT) {
				{
				State = 110;
				Match(K_DISTINCT);
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TOP) {
				{
				State = 113;
				top_spec();
				}
			}

			State = 116;
			selection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TOP() { return GetToken(sqlParser.K_TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Top_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterTop_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitTop_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_specContext top_spec() {
		Top_specContext _localctx = new Top_specContext(Context, State);
		EnterRule(_localctx, 6, RULE_top_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(K_TOP);
			State = 119;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_star_specContext select_star_spec() {
			return GetRuleContext<Select_star_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_value_specContext select_value_spec() {
			return GetRuleContext<Select_value_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_specContext select_list_spec() {
			return GetRuleContext<Select_list_specContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_selection);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				select_star_spec();
				}
				break;
			case K_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				select_value_spec();
				}
				break;
			case T__2:
			case T__5:
			case T__12:
			case T__13:
			case T__24:
			case T__25:
			case K_ALL:
			case K_ARRAY:
			case K_EXISTS:
			case K_FIRST:
			case K_FALSE:
			case K_LAST:
			case K_LEFT:
			case K_NOT:
			case K_NULL:
			case K_RIGHT:
			case K_TRUE:
			case K_UDF:
			case K_UNDEFINED:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case LEX_IDENTIFIER:
			case PARAMETER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				select_list_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_star_specContext : ParserRuleContext {
		public Select_star_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_star_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_star_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_star_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_star_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_star_specContext select_star_spec() {
		Select_star_specContext _localctx = new Select_star_specContext(Context, State);
		EnterRule(_localctx, 10, RULE_select_star_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_value_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VALUE() { return GetToken(sqlParser.K_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Select_value_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_value_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_value_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_value_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_value_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_value_specContext select_value_spec() {
		Select_value_specContext _localctx = new Select_value_specContext(Context, State);
		EnterRule(_localctx, 12, RULE_select_value_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(K_VALUE);
			State = 129;
			scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_itemContext[] select_item() {
			return GetRuleContexts<Select_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_itemContext select_item(int i) {
			return GetRuleContext<Select_itemContext>(i);
		}
		public Select_list_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_specContext select_list_spec() {
		Select_list_specContext _localctx = new Select_list_specContext(Context, State);
		EnterRule(_localctx, 14, RULE_select_list_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			select_item();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 132;
				Match(T__1);
				State = 133;
				select_item();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(sqlParser.K_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Select_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSelect_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSelect_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_itemContext select_item() {
		Select_itemContext _localctx = new Select_itemContext(Context, State);
		EnterRule(_localctx, 16, RULE_select_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			scalar_expression(0);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_AS) {
				{
				State = 140;
				Match(K_AS);
				State = 141;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FROM() { return GetToken(sqlParser.K_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collection_expressionContext collection_expression() {
			return GetRuleContext<Collection_expressionContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(K_FROM);
			State = 145;
			collection_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_expressionContext : ParserRuleContext {
		public Collection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_expression; } }
	 
		public Collection_expressionContext() { }
		public virtual void CopyFrom(Collection_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JoinCollectionExpressionContext : Collection_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Collection_expressionContext[] collection_expression() {
			return GetRuleContexts<Collection_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collection_expressionContext collection_expression(int i) {
			return GetRuleContext<Collection_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_JOIN() { return GetToken(sqlParser.K_JOIN, 0); }
		public JoinCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterJoinCollectionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitJoinCollectionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasedCollectionExpressionContext : Collection_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(sqlParser.K_AS, 0); }
		public AliasedCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAliasedCollectionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAliasedCollectionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasedCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIteratorCollectionExpressionContext : Collection_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IN() { return GetToken(sqlParser.K_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public ArrayIteratorCollectionExpressionContext(Collection_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayIteratorCollectionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayIteratorCollectionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIteratorCollectionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_expressionContext collection_expression() {
		return collection_expression(0);
	}

	private Collection_expressionContext collection_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Collection_expressionContext _localctx = new Collection_expressionContext(Context, _parentState);
		Collection_expressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_collection_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new AliasedCollectionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 148;
				collection();
				State = 153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 149;
						Match(K_AS);
						}
					}

					State = 152;
					identifier();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ArrayIteratorCollectionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155;
				identifier();
				State = 156;
				Match(K_IN);
				State = 157;
				collection();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinCollectionExpressionContext(new Collection_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_collection_expression);
					State = 161;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 162;
					Match(K_JOIN);
					State = 163;
					collection_expression(2);
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
	 
		public CollectionContext() { }
		public virtual void CopyFrom(CollectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputPathCollectionContext : CollectionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public InputPathCollectionContext(CollectionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterInputPathCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitInputPathCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputPathCollection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryCollectionContext : CollectionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public SubqueryCollectionContext(CollectionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSubqueryCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSubqueryCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_collection);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ALL:
			case K_FIRST:
			case K_LAST:
			case LEX_IDENTIFIER:
				_localctx = new InputPathCollectionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				identifier();
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 170;
					path_expression(0);
					}
					break;
				}
				}
				break;
			case T__2:
				_localctx = new SubqueryCollectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				Match(T__2);
				State = 174;
				sql_query();
				State = 175;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
	 
		public Path_expressionContext() { }
		public virtual void CopyFrom(Path_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringPathExpressionContext : Path_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public StringPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterStringPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitStringPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EpsilonPathExpressionContext : Path_expressionContext {
		public EpsilonPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEpsilonPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEpsilonPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEpsilonPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierPathExpressionContext : Path_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIdentifierPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIdentifierPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberPathExpressionContext : Path_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		public NumberPathExpressionContext(Path_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterNumberPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitNumberPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		return path_expression(0);
	}

	private Path_expressionContext path_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Path_expressionContext _localctx = new Path_expressionContext(Context, _parentState);
		Path_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_path_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EpsilonPathExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new IdentifierPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 180;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 181;
						Match(T__4);
						State = 182;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new NumberPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 183;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 184;
						Match(T__5);
						State = 185;
						Match(NUMERIC_LITERAL);
						State = 186;
						Match(T__6);
						}
						break;
					case 3:
						{
						_localctx = new StringPathExpressionContext(new Path_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path_expression);
						State = 187;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 188;
						Match(T__5);
						State = 189;
						Match(STRING_LITERAL);
						State = 190;
						Match(T__6);
						}
						break;
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE() { return GetToken(sqlParser.K_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(K_WHERE);
			State = 197;
			scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_GROUP() { return GetToken(sqlParser.K_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BY() { return GetToken(sqlParser.K_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_specContext select_list_spec() {
			return GetRuleContext<Select_list_specContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_group_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(K_GROUP);
			State = 200;
			Match(K_BY);
			State = 201;
			select_list_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ORDER() { return GetToken(sqlParser.K_ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BY() { return GetToken(sqlParser.K_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_itemsContext order_by_items() {
			return GetRuleContext<Order_by_itemsContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(K_ORDER);
			State = 204;
			Match(K_BY);
			State = 205;
			order_by_items();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_itemContext[] order_by_item() {
			return GetRuleContexts<Order_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_itemContext order_by_item(int i) {
			return GetRuleContext<Order_by_itemContext>(i);
		}
		public Order_by_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_items(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_itemsContext order_by_items() {
		Order_by_itemsContext _localctx = new Order_by_itemsContext(Context, State);
		EnterRule(_localctx, 32, RULE_order_by_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			order_by_item();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 208;
				Match(T__1);
				State = 209;
				order_by_item();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_orderContext sort_order() {
			return GetRuleContext<Sort_orderContext>(0);
		}
		public Order_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_itemContext order_by_item() {
		Order_by_itemContext _localctx = new Order_by_itemContext(Context, State);
		EnterRule(_localctx, 34, RULE_order_by_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			scalar_expression(0);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 216;
				sort_order();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_orderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ASC() { return GetToken(sqlParser.K_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DESC() { return GetToken(sqlParser.K_DESC, 0); }
		public Sort_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSort_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSort_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_orderContext sort_order() {
		Sort_orderContext _localctx = new Sort_orderContext(Context, State);
		EnterRule(_localctx, 36, RULE_sort_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !(_la==K_ASC || _la==K_DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OFFSET() { return GetToken(sqlParser.K_OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Offset_countContext offset_count() {
			return GetRuleContext<Offset_countContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIMIT() { return GetToken(sqlParser.K_LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Limit_countContext limit_count() {
			return GetRuleContext<Limit_countContext>(0);
		}
		public Offset_limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOffset_limit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOffset_limit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_limit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_limit_clauseContext offset_limit_clause() {
		Offset_limit_clauseContext _localctx = new Offset_limit_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_offset_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(K_OFFSET);
			State = 222;
			offset_count();
			State = 223;
			Match(K_LIMIT);
			State = 224;
			limit_count();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_countContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Offset_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_count; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterOffset_count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitOffset_count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_countContext offset_count() {
		Offset_countContext _localctx = new Offset_countContext(Context, State);
		EnterRule(_localctx, 40, RULE_offset_count);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_countContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public Limit_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_count; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLimit_count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLimit_count(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_countContext limit_count() {
		Limit_countContext _localctx = new Limit_countContext(Context, State);
		EnterRule(_localctx, 42, RULE_limit_count);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC_LITERAL || _la==PARAMETER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expressionContext : ParserRuleContext {
		public Scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression; } }
	 
		public Scalar_expressionContext() { }
		public virtual void CopyFrom(Scalar_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalScalarExpressionContext : Scalar_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_scalar_expressionContext logical_scalar_expression() {
			return GetRuleContext<Logical_scalar_expressionContext>(0);
		}
		public LogicalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLogicalScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLogicalScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalScalarExpressionContext : Scalar_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public ConditionalScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterConditionalScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitConditionalScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceScalarExpressionContext : Scalar_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public CoalesceScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterCoalesceScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitCoalesceScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenScalarExpressionContext : Scalar_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BETWEEN() { return GetToken(sqlParser.K_BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(sqlParser.K_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public BetweenScalarExpressionContext(Scalar_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBetweenScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBetweenScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expressionContext scalar_expression() {
		return scalar_expression(0);
	}

	private Scalar_expressionContext scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Scalar_expressionContext _localctx = new Scalar_expressionContext(Context, _parentState);
		Scalar_expressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_scalar_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new LogicalScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 231;
				logical_scalar_expression(0);
				}
				break;
			case 2:
				{
				_localctx = new BetweenScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 232;
				binary_scalar_expression(0);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 233;
					Match(K_NOT);
					}
				}

				State = 236;
				Match(K_BETWEEN);
				State = 237;
				binary_scalar_expression(0);
				State = 238;
				Match(K_AND);
				State = 239;
				binary_scalar_expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 254;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 252;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new ConditionalScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
						State = 243;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 244;
						Match(T__7);
						State = 245;
						scalar_expression(0);
						State = 246;
						Match(T__8);
						State = 247;
						scalar_expression(5);
						}
						break;
					case 2:
						{
						_localctx = new CoalesceScalarExpressionContext(new Scalar_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
						State = 249;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 250;
						Match(T__9);
						State = 251;
						scalar_expression(4);
						}
						break;
					}
					} 
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_scalar_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext binary_scalar_expression() {
			return GetRuleContext<Binary_scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_scalar_expressionContext in_scalar_expression() {
			return GetRuleContext<In_scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Like_scalar_expressionContext like_scalar_expression() {
			return GetRuleContext<Like_scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_scalar_expressionContext[] logical_scalar_expression() {
			return GetRuleContexts<Logical_scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_scalar_expressionContext logical_scalar_expression(int i) {
			return GetRuleContext<Logical_scalar_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(sqlParser.K_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(sqlParser.K_OR, 0); }
		public Logical_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_scalar_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLogical_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLogical_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_scalar_expressionContext logical_scalar_expression() {
		return logical_scalar_expression(0);
	}

	private Logical_scalar_expressionContext logical_scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_scalar_expressionContext _localctx = new Logical_scalar_expressionContext(Context, _parentState);
		Logical_scalar_expressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_logical_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 258;
				binary_scalar_expression(0);
				}
				break;
			case 2:
				{
				State = 259;
				in_scalar_expression();
				}
				break;
			case 3:
				{
				State = 260;
				like_scalar_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 269;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new Logical_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_scalar_expression);
						State = 263;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 264;
						Match(K_AND);
						State = 265;
						logical_scalar_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_scalar_expression);
						State = 266;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 267;
						Match(K_OR);
						State = 268;
						logical_scalar_expression(2);
						}
						break;
					}
					} 
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class In_scalar_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext binary_scalar_expression() {
			return GetRuleContext<Binary_scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IN() { return GetToken(sqlParser.K_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public In_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_scalar_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIn_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIn_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_scalar_expressionContext in_scalar_expression() {
		In_scalar_expressionContext _localctx = new In_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_in_scalar_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			binary_scalar_expression(0);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_NOT) {
				{
				State = 275;
				Match(K_NOT);
				}
			}

			State = 278;
			Match(K_IN);
			State = 279;
			Match(T__2);
			State = 280;
			scalar_expression_list();
			State = 281;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Like_scalar_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIKE() { return GetToken(sqlParser.K_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Escape_expressionContext escape_expression() {
			return GetRuleContext<Escape_expressionContext>(0);
		}
		public Like_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like_scalar_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLike_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLike_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Like_scalar_expressionContext like_scalar_expression() {
		Like_scalar_expressionContext _localctx = new Like_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_like_scalar_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			binary_scalar_expression(0);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_NOT) {
				{
				State = 284;
				Match(K_NOT);
				}
			}

			State = 287;
			Match(K_LIKE);
			State = 288;
			binary_scalar_expression(0);
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 289;
				escape_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Escape_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ESCAPE() { return GetToken(sqlParser.K_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		public Escape_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escape_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEscape_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEscape_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscape_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Escape_expressionContext escape_expression() {
		Escape_expressionContext _localctx = new Escape_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_escape_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(K_ESCAPE);
			State = 293;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_scalar_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_scalar_expressionContext unary_scalar_expression() {
			return GetRuleContext<Unary_scalar_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext[] binary_scalar_expression() {
			return GetRuleContexts<Binary_scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_scalar_expressionContext binary_scalar_expression(int i) {
			return GetRuleContext<Binary_scalar_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_operatorContext multiplicative_operator() {
			return GetRuleContext<Multiplicative_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_operatorContext additive_operator() {
			return GetRuleContext<Additive_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_operatorContext equality_operator() {
			return GetRuleContext<Equality_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_and_operatorContext bitwise_and_operator() {
			return GetRuleContext<Bitwise_and_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() {
			return GetRuleContext<Bitwise_exclusive_or_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() {
			return GetRuleContext<Bitwise_inclusive_or_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_concat_operatorContext string_concat_operator() {
			return GetRuleContext<String_concat_operatorContext>(0);
		}
		public Binary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_scalar_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBinary_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBinary_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_scalar_expressionContext binary_scalar_expression() {
		return binary_scalar_expression(0);
	}

	private Binary_scalar_expressionContext binary_scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Binary_scalar_expressionContext _localctx = new Binary_scalar_expressionContext(Context, _parentState);
		Binary_scalar_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_binary_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 296;
			unary_scalar_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 330;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 298;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 299;
						multiplicative_operator();
						State = 300;
						binary_scalar_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 302;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 303;
						additive_operator();
						State = 304;
						binary_scalar_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 306;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 307;
						relational_operator();
						State = 308;
						binary_scalar_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 310;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 311;
						equality_operator();
						State = 312;
						binary_scalar_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 314;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 315;
						bitwise_and_operator();
						State = 316;
						binary_scalar_expression(5);
						}
						break;
					case 6:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 318;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 319;
						bitwise_exclusive_or_operator();
						State = 320;
						binary_scalar_expression(4);
						}
						break;
					case 7:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 322;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 323;
						bitwise_inclusive_or_operator();
						State = 324;
						binary_scalar_expression(3);
						}
						break;
					case 8:
						{
						_localctx = new Binary_scalar_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_binary_scalar_expression);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327;
						string_concat_operator();
						State = 328;
						binary_scalar_expression(2);
						}
						break;
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_operatorContext : ParserRuleContext {
		public Multiplicative_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterMultiplicative_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitMultiplicative_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_operatorContext multiplicative_operator() {
		Multiplicative_operatorContext _localctx = new Multiplicative_operatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplicative_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6146L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_operatorContext : ParserRuleContext {
		public Additive_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAdditive_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAdditive_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_operatorContext additive_operator() {
		Additive_operatorContext _localctx = new Additive_operatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_additive_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 491520L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_operatorContext : ParserRuleContext {
		public Equality_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterEquality_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitEquality_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_operatorContext equality_operator() {
		Equality_operatorContext _localctx = new Equality_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_equality_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_and_operatorContext : ParserRuleContext {
		public Bitwise_and_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_and_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_and_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_and_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_and_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_and_operatorContext bitwise_and_operator() {
		Bitwise_and_operatorContext _localctx = new Bitwise_and_operatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_bitwise_and_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_exclusive_or_operatorContext : ParserRuleContext {
		public Bitwise_exclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_exclusive_or_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_exclusive_or_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_exclusive_or_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_exclusive_or_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() {
		Bitwise_exclusive_or_operatorContext _localctx = new Bitwise_exclusive_or_operatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_bitwise_exclusive_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_inclusive_or_operatorContext : ParserRuleContext {
		public Bitwise_inclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_inclusive_or_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterBitwise_inclusive_or_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitBitwise_inclusive_or_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_inclusive_or_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() {
		Bitwise_inclusive_or_operatorContext _localctx = new Bitwise_inclusive_or_operatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_bitwise_inclusive_or_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_concat_operatorContext : ParserRuleContext {
		public String_concat_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_concat_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterString_concat_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitString_concat_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_concat_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_concat_operatorContext string_concat_operator() {
		String_concat_operatorContext _localctx = new String_concat_operatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_string_concat_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_scalar_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_scalar_expressionContext unary_scalar_expression() {
			return GetRuleContext<Unary_scalar_expressionContext>(0);
		}
		public Unary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_scalar_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterUnary_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitUnary_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_scalar_expressionContext unary_scalar_expression() {
		Unary_scalar_expressionContext _localctx = new Unary_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_unary_scalar_expression);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__5:
			case T__25:
			case K_ALL:
			case K_ARRAY:
			case K_EXISTS:
			case K_FIRST:
			case K_FALSE:
			case K_LAST:
			case K_LEFT:
			case K_NULL:
			case K_RIGHT:
			case K_TRUE:
			case K_UDF:
			case K_UNDEFINED:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case LEX_IDENTIFIER:
			case PARAMETER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				primary_expression(0);
				}
				break;
			case T__12:
			case T__13:
			case T__24:
			case K_NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 352;
				unary_operator();
				State = 353;
				unary_scalar_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(sqlParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 562949987000320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
	 
		public Primary_expressionContext() { }
		public virtual void CopyFrom(Primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AllScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(sqlParser.K_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public AllScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterAllScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitAllScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLiteralScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLiteralScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreateScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_property_listContext object_property_list() {
			return GetRuleContext<Object_property_listContext>(0);
		}
		public ObjectCreateScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObjectCreateScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObjectCreateScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreateScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FirstScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FIRST() { return GetToken(sqlParser.K_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public FirstScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFirstScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFirstScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreateScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		public ArrayCreateScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayCreateScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayCreateScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreateScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexerScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public MemberIndexerScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterMemberIndexerScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitMemberIndexerScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexerScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public SubqueryScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterSubqueryScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitSubqueryScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyRefScalarExpressionBaseContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyRefScalarExpressionBaseContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_scalar_expressionContext function_call_scalar_expression() {
			return GetRuleContext<Function_call_scalar_expressionContext>(0);
		}
		public FunctionCallScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFunctionCallScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFunctionCallScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedScalarExperessionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ParenthesizedScalarExperessionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterParenthesizedScalarExperession(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitParenthesizedScalarExperession(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedScalarExperession(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterRefScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(sqlParser.PARAMETER, 0); }
		public ParameterRefScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterParameterRefScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitParameterRefScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterRefScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXISTS() { return GetToken(sqlParser.K_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ExistsScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterExistsScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitExistsScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ARRAY() { return GetToken(sqlParser.K_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public ArrayScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterArrayScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitArrayScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LastScalarExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LAST() { return GetToken(sqlParser.K_LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_queryContext sql_query() {
			return GetRuleContext<Sql_queryContext>(0);
		}
		public LastScalarExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLastScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLastScalarExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyRefScalarExpressionRecursiveContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyRefScalarExpressionRecursiveContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterPropertyRefScalarExpressionRecursive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitPropertyRefScalarExpressionRecursive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyRefScalarExpressionRecursive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		return primary_expression(0);
	}

	private Primary_expressionContext primary_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, _parentState);
		Primary_expressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_primary_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				_localctx = new PropertyRefScalarExpressionBaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 360;
				identifier();
				}
				break;
			case 2:
				{
				_localctx = new ParameterRefScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				Match(PARAMETER);
				}
				break;
			case 3:
				{
				_localctx = new LiteralScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362;
				literal();
				}
				break;
			case 4:
				{
				_localctx = new ArrayCreateScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				Match(T__5);
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & -1024344374156194807L) != 0)) {
					{
					State = 364;
					scalar_expression_list();
					}
				}

				State = 367;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new ObjectCreateScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368;
				Match(T__25);
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL) {
					{
					State = 369;
					object_property_list();
					}
				}

				State = 372;
				Match(T__26);
				}
				break;
			case 6:
				{
				_localctx = new ParenthesizedScalarExperessionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 373;
				Match(T__2);
				State = 374;
				scalar_expression(0);
				State = 375;
				Match(T__3);
				}
				break;
			case 7:
				{
				_localctx = new SubqueryScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 377;
				Match(T__2);
				State = 378;
				sql_query();
				State = 379;
				Match(T__3);
				}
				break;
			case 8:
				{
				_localctx = new ExistsScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 381;
				Match(K_EXISTS);
				State = 382;
				Match(T__2);
				State = 383;
				sql_query();
				State = 384;
				Match(T__3);
				}
				break;
			case 9:
				{
				_localctx = new ArrayScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				Match(K_ARRAY);
				State = 387;
				Match(T__2);
				State = 388;
				sql_query();
				State = 389;
				Match(T__3);
				}
				break;
			case 10:
				{
				_localctx = new AllScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391;
				Match(K_ALL);
				State = 392;
				Match(T__2);
				State = 393;
				sql_query();
				State = 394;
				Match(T__3);
				}
				break;
			case 11:
				{
				_localctx = new FirstScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396;
				Match(K_FIRST);
				State = 397;
				Match(T__2);
				State = 398;
				sql_query();
				State = 399;
				Match(T__3);
				}
				break;
			case 12:
				{
				_localctx = new LastScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 401;
				Match(K_LAST);
				State = 402;
				Match(T__2);
				State = 403;
				sql_query();
				State = 404;
				Match(T__3);
				}
				break;
			case 13:
				{
				_localctx = new FunctionCallScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 406;
				function_call_scalar_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new PropertyRefScalarExpressionRecursiveContext(new Primary_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary_expression);
						State = 409;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 410;
						Match(T__4);
						State = 411;
						identifier();
						}
						break;
					case 2:
						{
						_localctx = new MemberIndexerScalarExpressionContext(new Primary_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primary_expression);
						State = 412;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 413;
						Match(T__5);
						State = 414;
						scalar_expression(0);
						State = 415;
						Match(T__6);
						}
						break;
					}
					} 
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_scalar_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UDF() { return GetToken(sqlParser.K_UDF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expression_listContext scalar_expression_list() {
			return GetRuleContext<Scalar_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LEFT() { return GetToken(sqlParser.K_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_RIGHT() { return GetToken(sqlParser.K_RIGHT, 0); }
		public Function_call_scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_scalar_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call_scalar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_scalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_scalar_expressionContext function_call_scalar_expression() {
		Function_call_scalar_expressionContext _localctx = new Function_call_scalar_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_call_scalar_expression);
		int _la;
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ALL:
			case K_FIRST:
			case K_LAST:
			case K_UDF:
			case LEX_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_UDF) {
					{
					State = 422;
					Match(K_UDF);
					State = 423;
					Match(T__4);
					}
				}

				State = 426;
				identifier();
				State = 427;
				Match(T__2);
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & -1024344374156194807L) != 0)) {
					{
					State = 428;
					scalar_expression_list();
					}
				}

				State = 431;
				Match(T__3);
				}
				break;
			case K_LEFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				Match(K_LEFT);
				State = 434;
				Match(T__2);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & -1024344374156194807L) != 0)) {
					{
					State = 435;
					scalar_expression_list();
					}
				}

				State = 438;
				Match(T__3);
				}
				break;
			case K_RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439;
				Match(K_RIGHT);
				State = 440;
				Match(T__2);
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & -1024344374156194807L) != 0)) {
					{
					State = 441;
					scalar_expression_list();
					}
				}

				State = 444;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Scalar_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterScalar_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitScalar_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expression_listContext scalar_expression_list() {
		Scalar_expression_listContext _localctx = new Scalar_expression_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_scalar_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			scalar_expression(0);
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 448;
				Match(T__1);
				State = 449;
				scalar_expression(0);
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_property_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertyContext[] object_property() {
			return GetRuleContexts<Object_propertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertyContext object_property(int i) {
			return GetRuleContext<Object_propertyContext>(i);
		}
		public Object_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObject_property_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObject_property_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_property_listContext object_property_list() {
		Object_property_listContext _localctx = new Object_property_listContext(Context, State);
		EnterRule(_localctx, 82, RULE_object_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			object_property();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 456;
				Match(T__1);
				State = 457;
				object_property();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Object_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterObject_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitObject_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertyContext object_property() {
		Object_propertyContext _localctx = new Object_propertyContext(Context, State);
		EnterRule(_localctx, 84, RULE_object_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(STRING_LITERAL);
			State = 464;
			Match(T__8);
			State = 465;
			scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEX_IDENTIFIER() { return GetToken(sqlParser.LEX_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(sqlParser.K_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FIRST() { return GetToken(sqlParser.K_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LAST() { return GetToken(sqlParser.K_LAST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 137439086593L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(sqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(sqlParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TRUE() { return GetToken(sqlParser.K_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FALSE() { return GetToken(sqlParser.K_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(sqlParser.K_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UNDEFINED() { return GetToken(sqlParser.K_UNDEFINED, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IsqlListener typedListener = listener as IsqlListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 25822209L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return collection_expression_sempred((Collection_expressionContext)_localctx, predIndex);
		case 12: return path_expression_sempred((Path_expressionContext)_localctx, predIndex);
		case 22: return scalar_expression_sempred((Scalar_expressionContext)_localctx, predIndex);
		case 23: return logical_scalar_expression_sempred((Logical_scalar_expressionContext)_localctx, predIndex);
		case 27: return binary_scalar_expression_sempred((Binary_scalar_expressionContext)_localctx, predIndex);
		case 38: return primary_expression_sempred((Primary_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool collection_expression_sempred(Collection_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool path_expression_sempred(Path_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool scalar_expression_sempred(Scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}
	private bool logical_scalar_expression_sempred(Logical_scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool binary_scalar_expression_sempred(Binary_scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primary_expression_sempred(Primary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,472,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,1,1,1,3,1,96,8,1,1,1,3,1,99,8,1,1,1,
		3,1,102,8,1,1,1,3,1,105,8,1,1,1,3,1,108,8,1,1,2,1,2,3,2,112,8,2,1,2,3,
		2,115,8,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,3,4,125,8,4,1,5,1,5,1,6,1,6,
		1,6,1,7,1,7,1,7,5,7,135,8,7,10,7,12,7,138,9,7,1,8,1,8,1,8,3,8,143,8,8,
		1,9,1,9,1,9,1,10,1,10,1,10,3,10,151,8,10,1,10,3,10,154,8,10,1,10,1,10,
		1,10,1,10,3,10,160,8,10,1,10,1,10,1,10,5,10,165,8,10,10,10,12,10,168,9,
		10,1,11,1,11,3,11,172,8,11,1,11,1,11,1,11,1,11,3,11,178,8,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,192,8,12,10,12,
		12,12,195,9,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
		1,16,1,16,1,16,5,16,211,8,16,10,16,12,16,214,9,16,1,17,1,17,3,17,218,8,
		17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
		22,1,22,3,22,235,8,22,1,22,1,22,1,22,1,22,1,22,3,22,242,8,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,253,8,22,10,22,12,22,256,9,22,
		1,23,1,23,1,23,1,23,3,23,262,8,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,270,
		8,23,10,23,12,23,273,9,23,1,24,1,24,3,24,277,8,24,1,24,1,24,1,24,1,24,
		1,24,1,25,1,25,3,25,286,8,25,1,25,1,25,1,25,3,25,291,8,25,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,331,8,27,10,27,12,27,334,9,
		27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
		34,1,35,1,35,1,36,1,36,1,36,1,36,3,36,356,8,36,1,37,1,37,1,38,1,38,1,38,
		1,38,1,38,1,38,3,38,366,8,38,1,38,1,38,1,38,3,38,371,8,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,3,38,408,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,5,38,418,8,38,10,38,12,38,421,9,38,1,39,1,39,3,39,425,8,39,1,39,1,
		39,1,39,3,39,430,8,39,1,39,1,39,1,39,1,39,1,39,3,39,437,8,39,1,39,1,39,
		1,39,1,39,3,39,443,8,39,1,39,3,39,446,8,39,1,40,1,40,1,40,5,40,451,8,40,
		10,40,12,40,454,9,40,1,41,1,41,1,41,5,41,459,8,41,10,41,12,41,462,9,41,
		1,42,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,0,6,20,24,44,46,54,76,45,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,0,9,2,0,63,
		63,66,66,2,0,32,32,35,35,2,0,1,1,11,12,1,0,13,14,1,0,15,18,1,0,19,20,3,
		0,13,14,25,25,49,49,4,0,28,28,39,39,45,45,65,65,5,0,40,40,50,50,57,57,
		59,59,63,64,492,0,90,1,0,0,0,2,93,1,0,0,0,4,109,1,0,0,0,6,118,1,0,0,0,
		8,124,1,0,0,0,10,126,1,0,0,0,12,128,1,0,0,0,14,131,1,0,0,0,16,139,1,0,
		0,0,18,144,1,0,0,0,20,159,1,0,0,0,22,177,1,0,0,0,24,179,1,0,0,0,26,196,
		1,0,0,0,28,199,1,0,0,0,30,203,1,0,0,0,32,207,1,0,0,0,34,215,1,0,0,0,36,
		219,1,0,0,0,38,221,1,0,0,0,40,226,1,0,0,0,42,228,1,0,0,0,44,241,1,0,0,
		0,46,261,1,0,0,0,48,274,1,0,0,0,50,283,1,0,0,0,52,292,1,0,0,0,54,295,1,
		0,0,0,56,335,1,0,0,0,58,337,1,0,0,0,60,339,1,0,0,0,62,341,1,0,0,0,64,343,
		1,0,0,0,66,345,1,0,0,0,68,347,1,0,0,0,70,349,1,0,0,0,72,355,1,0,0,0,74,
		357,1,0,0,0,76,407,1,0,0,0,78,445,1,0,0,0,80,447,1,0,0,0,82,455,1,0,0,
		0,84,463,1,0,0,0,86,467,1,0,0,0,88,469,1,0,0,0,90,91,3,2,1,0,91,92,5,0,
		0,1,92,1,1,0,0,0,93,95,3,4,2,0,94,96,3,18,9,0,95,94,1,0,0,0,95,96,1,0,
		0,0,96,98,1,0,0,0,97,99,3,26,13,0,98,97,1,0,0,0,98,99,1,0,0,0,99,101,1,
		0,0,0,100,102,3,28,14,0,101,100,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,
		0,103,105,3,30,15,0,104,103,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,
		108,3,38,19,0,107,106,1,0,0,0,107,108,1,0,0,0,108,3,1,0,0,0,109,111,5,
		55,0,0,110,112,5,36,0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,
		0,113,115,3,6,3,0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,
		117,3,8,4,0,117,5,1,0,0,0,118,119,5,56,0,0,119,120,7,0,0,0,120,7,1,0,0,
		0,121,125,3,10,5,0,122,125,3,12,6,0,123,125,3,14,7,0,124,121,1,0,0,0,124,
		122,1,0,0,0,124,123,1,0,0,0,125,9,1,0,0,0,126,127,5,1,0,0,127,11,1,0,0,
		0,128,129,5,60,0,0,129,130,3,44,22,0,130,13,1,0,0,0,131,136,3,16,8,0,132,
		133,5,2,0,0,133,135,3,16,8,0,134,132,1,0,0,0,135,138,1,0,0,0,136,134,1,
		0,0,0,136,137,1,0,0,0,137,15,1,0,0,0,138,136,1,0,0,0,139,142,3,44,22,0,
		140,141,5,31,0,0,141,143,3,86,43,0,142,140,1,0,0,0,142,143,1,0,0,0,143,
		17,1,0,0,0,144,145,5,41,0,0,145,146,3,20,10,0,146,19,1,0,0,0,147,148,6,
		10,-1,0,148,153,3,22,11,0,149,151,5,31,0,0,150,149,1,0,0,0,150,151,1,0,
		0,0,151,152,1,0,0,0,152,154,3,86,43,0,153,150,1,0,0,0,153,154,1,0,0,0,
		154,160,1,0,0,0,155,156,3,86,43,0,156,157,5,43,0,0,157,158,3,22,11,0,158,
		160,1,0,0,0,159,147,1,0,0,0,159,155,1,0,0,0,160,166,1,0,0,0,161,162,10,
		1,0,0,162,163,5,44,0,0,163,165,3,20,10,2,164,161,1,0,0,0,165,168,1,0,0,
		0,166,164,1,0,0,0,166,167,1,0,0,0,167,21,1,0,0,0,168,166,1,0,0,0,169,171,
		3,86,43,0,170,172,3,24,12,0,171,170,1,0,0,0,171,172,1,0,0,0,172,178,1,
		0,0,0,173,174,5,3,0,0,174,175,3,2,1,0,175,176,5,4,0,0,176,178,1,0,0,0,
		177,169,1,0,0,0,177,173,1,0,0,0,178,23,1,0,0,0,179,193,6,12,-1,0,180,181,
		10,4,0,0,181,182,5,5,0,0,182,192,3,86,43,0,183,184,10,3,0,0,184,185,5,
		6,0,0,185,186,5,63,0,0,186,192,5,7,0,0,187,188,10,2,0,0,188,189,5,6,0,
		0,189,190,5,64,0,0,190,192,5,7,0,0,191,180,1,0,0,0,191,183,1,0,0,0,191,
		187,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,25,1,0,
		0,0,195,193,1,0,0,0,196,197,5,61,0,0,197,198,3,44,22,0,198,27,1,0,0,0,
		199,200,5,42,0,0,200,201,5,34,0,0,201,202,3,14,7,0,202,29,1,0,0,0,203,
		204,5,53,0,0,204,205,5,34,0,0,205,206,3,32,16,0,206,31,1,0,0,0,207,212,
		3,34,17,0,208,209,5,2,0,0,209,211,3,34,17,0,210,208,1,0,0,0,211,214,1,
		0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,33,1,0,0,0,214,212,1,0,0,0,215,
		217,3,44,22,0,216,218,3,36,18,0,217,216,1,0,0,0,217,218,1,0,0,0,218,35,
		1,0,0,0,219,220,7,1,0,0,220,37,1,0,0,0,221,222,5,51,0,0,222,223,3,40,20,
		0,223,224,5,48,0,0,224,225,3,42,21,0,225,39,1,0,0,0,226,227,7,0,0,0,227,
		41,1,0,0,0,228,229,7,0,0,0,229,43,1,0,0,0,230,231,6,22,-1,0,231,242,3,
		46,23,0,232,234,3,54,27,0,233,235,5,49,0,0,234,233,1,0,0,0,234,235,1,0,
		0,0,235,236,1,0,0,0,236,237,5,33,0,0,237,238,3,54,27,0,238,239,5,29,0,
		0,239,240,3,54,27,0,240,242,1,0,0,0,241,230,1,0,0,0,241,232,1,0,0,0,242,
		254,1,0,0,0,243,244,10,4,0,0,244,245,5,8,0,0,245,246,3,44,22,0,246,247,
		5,9,0,0,247,248,3,44,22,5,248,253,1,0,0,0,249,250,10,3,0,0,250,251,5,10,
		0,0,251,253,3,44,22,4,252,243,1,0,0,0,252,249,1,0,0,0,253,256,1,0,0,0,
		254,252,1,0,0,0,254,255,1,0,0,0,255,45,1,0,0,0,256,254,1,0,0,0,257,258,
		6,23,-1,0,258,262,3,54,27,0,259,262,3,48,24,0,260,262,3,50,25,0,261,257,
		1,0,0,0,261,259,1,0,0,0,261,260,1,0,0,0,262,271,1,0,0,0,263,264,10,2,0,
		0,264,265,5,29,0,0,265,270,3,46,23,3,266,267,10,1,0,0,267,268,5,52,0,0,
		268,270,3,46,23,2,269,263,1,0,0,0,269,266,1,0,0,0,270,273,1,0,0,0,271,
		269,1,0,0,0,271,272,1,0,0,0,272,47,1,0,0,0,273,271,1,0,0,0,274,276,3,54,
		27,0,275,277,5,49,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,
		278,279,5,43,0,0,279,280,5,3,0,0,280,281,3,80,40,0,281,282,5,4,0,0,282,
		49,1,0,0,0,283,285,3,54,27,0,284,286,5,49,0,0,285,284,1,0,0,0,285,286,
		1,0,0,0,286,287,1,0,0,0,287,288,5,47,0,0,288,290,3,54,27,0,289,291,3,52,
		26,0,290,289,1,0,0,0,290,291,1,0,0,0,291,51,1,0,0,0,292,293,5,37,0,0,293,
		294,5,64,0,0,294,53,1,0,0,0,295,296,6,27,-1,0,296,297,3,72,36,0,297,332,
		1,0,0,0,298,299,10,8,0,0,299,300,3,56,28,0,300,301,3,54,27,9,301,331,1,
		0,0,0,302,303,10,7,0,0,303,304,3,58,29,0,304,305,3,54,27,8,305,331,1,0,
		0,0,306,307,10,6,0,0,307,308,3,60,30,0,308,309,3,54,27,7,309,331,1,0,0,
		0,310,311,10,5,0,0,311,312,3,62,31,0,312,313,3,54,27,6,313,331,1,0,0,0,
		314,315,10,4,0,0,315,316,3,64,32,0,316,317,3,54,27,5,317,331,1,0,0,0,318,
		319,10,3,0,0,319,320,3,66,33,0,320,321,3,54,27,4,321,331,1,0,0,0,322,323,
		10,2,0,0,323,324,3,68,34,0,324,325,3,54,27,3,325,331,1,0,0,0,326,327,10,
		1,0,0,327,328,3,70,35,0,328,329,3,54,27,2,329,331,1,0,0,0,330,298,1,0,
		0,0,330,302,1,0,0,0,330,306,1,0,0,0,330,310,1,0,0,0,330,314,1,0,0,0,330,
		318,1,0,0,0,330,322,1,0,0,0,330,326,1,0,0,0,331,334,1,0,0,0,332,330,1,
		0,0,0,332,333,1,0,0,0,333,55,1,0,0,0,334,332,1,0,0,0,335,336,7,2,0,0,336,
		57,1,0,0,0,337,338,7,3,0,0,338,59,1,0,0,0,339,340,7,4,0,0,340,61,1,0,0,
		0,341,342,7,5,0,0,342,63,1,0,0,0,343,344,5,21,0,0,344,65,1,0,0,0,345,346,
		5,22,0,0,346,67,1,0,0,0,347,348,5,23,0,0,348,69,1,0,0,0,349,350,5,24,0,
		0,350,71,1,0,0,0,351,356,3,76,38,0,352,353,3,74,37,0,353,354,3,72,36,0,
		354,356,1,0,0,0,355,351,1,0,0,0,355,352,1,0,0,0,356,73,1,0,0,0,357,358,
		7,6,0,0,358,75,1,0,0,0,359,360,6,38,-1,0,360,408,3,86,43,0,361,408,5,66,
		0,0,362,408,3,88,44,0,363,365,5,6,0,0,364,366,3,80,40,0,365,364,1,0,0,
		0,365,366,1,0,0,0,366,367,1,0,0,0,367,408,5,7,0,0,368,370,5,26,0,0,369,
		371,3,82,41,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,408,
		5,27,0,0,373,374,5,3,0,0,374,375,3,44,22,0,375,376,5,4,0,0,376,408,1,0,
		0,0,377,378,5,3,0,0,378,379,3,2,1,0,379,380,5,4,0,0,380,408,1,0,0,0,381,
		382,5,38,0,0,382,383,5,3,0,0,383,384,3,2,1,0,384,385,5,4,0,0,385,408,1,
		0,0,0,386,387,5,30,0,0,387,388,5,3,0,0,388,389,3,2,1,0,389,390,5,4,0,0,
		390,408,1,0,0,0,391,392,5,28,0,0,392,393,5,3,0,0,393,394,3,2,1,0,394,395,
		5,4,0,0,395,408,1,0,0,0,396,397,5,39,0,0,397,398,5,3,0,0,398,399,3,2,1,
		0,399,400,5,4,0,0,400,408,1,0,0,0,401,402,5,45,0,0,402,403,5,3,0,0,403,
		404,3,2,1,0,404,405,5,4,0,0,405,408,1,0,0,0,406,408,3,78,39,0,407,359,
		1,0,0,0,407,361,1,0,0,0,407,362,1,0,0,0,407,363,1,0,0,0,407,368,1,0,0,
		0,407,373,1,0,0,0,407,377,1,0,0,0,407,381,1,0,0,0,407,386,1,0,0,0,407,
		391,1,0,0,0,407,396,1,0,0,0,407,401,1,0,0,0,407,406,1,0,0,0,408,419,1,
		0,0,0,409,410,10,8,0,0,410,411,5,5,0,0,411,418,3,86,43,0,412,413,10,7,
		0,0,413,414,5,6,0,0,414,415,3,44,22,0,415,416,5,7,0,0,416,418,1,0,0,0,
		417,409,1,0,0,0,417,412,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,
		1,0,0,0,420,77,1,0,0,0,421,419,1,0,0,0,422,423,5,58,0,0,423,425,5,5,0,
		0,424,422,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,3,86,43,0,427,
		429,5,3,0,0,428,430,3,80,40,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,
		1,0,0,0,431,432,5,4,0,0,432,446,1,0,0,0,433,434,5,46,0,0,434,436,5,3,0,
		0,435,437,3,80,40,0,436,435,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,
		446,5,4,0,0,439,440,5,54,0,0,440,442,5,3,0,0,441,443,3,80,40,0,442,441,
		1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,446,5,4,0,0,445,424,1,0,0,
		0,445,433,1,0,0,0,445,439,1,0,0,0,446,79,1,0,0,0,447,452,3,44,22,0,448,
		449,5,2,0,0,449,451,3,44,22,0,450,448,1,0,0,0,451,454,1,0,0,0,452,450,
		1,0,0,0,452,453,1,0,0,0,453,81,1,0,0,0,454,452,1,0,0,0,455,460,3,84,42,
		0,456,457,5,2,0,0,457,459,3,84,42,0,458,456,1,0,0,0,459,462,1,0,0,0,460,
		458,1,0,0,0,460,461,1,0,0,0,461,83,1,0,0,0,462,460,1,0,0,0,463,464,5,64,
		0,0,464,465,5,9,0,0,465,466,3,44,22,0,466,85,1,0,0,0,467,468,7,7,0,0,468,
		87,1,0,0,0,469,470,7,8,0,0,470,89,1,0,0,0,45,95,98,101,104,107,111,114,
		124,136,142,150,153,159,166,171,177,191,193,212,217,234,241,252,254,261,
		269,271,276,285,290,330,332,355,365,370,407,417,419,424,429,436,442,445,
		452,460
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
