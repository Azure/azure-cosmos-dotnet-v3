//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA RequestNameValueCollection.tt

namespace Microsoft.Azure.Documents.Collections
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Linq;
    using Microsoft.Azure.Cosmos.Core.Trace;
    using Microsoft.Azure.Documents;

    /// <summary>
    /// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA RequestNameValueCollection.tt
    /// This should be a one to one mapping with RntbdConstants.Request header token properties.
    /// This allows the TransportSerialization to directly set the property and avoid the dictionary overhead.
    /// If the property does not exists please update the RequestNameValueCollection.tt list to add the new field
    /// </summary>
    internal class RequestNameValueCollection : INameValueCollection
    {
        private static readonly StringComparer DefaultStringComparer = StringComparer.OrdinalIgnoreCase;
        private Dictionary<string, string> notCommonHeaders;

        // The INameValueCollection interface is expected to be a replacement for NameValueCollection across the projects.
        // However, there are a few APIs stil using the NameValueCollection
        //
        // As a hybrid approach in those cases, we maintain the headers internally as an instance of the new INameValueCollection and create
        // a NameValueCollection for the above public APIs. Keeping the NameValueCollection and the internal INameValueCollection in sync is
        // not only cumbersome, it may also defeat the purpose of the new dictionary-based type.
        //
        // Therefore, we want to keep the NameValueCollection consistent within the RequestHeaders APIs call. In other words,
        // once invoked, the RequestHeaders will return the same NameValueCollection.
        private NameValueCollection nameValueCollection = null;

        public string A_IM { get; set; }
        public string AddResourcePropertiesToResponse { get; set; }
        public string AllowRestoreParamsUpdate { get; set; }
        public string AllowTentativeWrites { get; set; }
        public string Authorization { get; set; }
        public string BinaryId { get; set; }
        public string BinaryPassthroughRequest { get; set; }
        public string BindReplicaDirective { get; set; }
        public string BuilderClientIdentifier { get; set; }
        public string CanCharge { get; set; }
        public string CanOfferReplaceComplete { get; set; }
        public string CanThrottle { get; set; }
        public string ChangeFeedStartFullFidelityIfNoneMatch { get; set; }
        public string ChangeFeedWireFormatVersion { get; set; }
        public string ClientRetryAttemptCount { get; set; }
        public string CollectionChildResourceContentLimitInKB { get; set; }
        public string CollectionChildResourceNameLimitInBytes { get; set; }
        public string CollectionPartitionIndex { get; set; }
        public string CollectionRemoteStorageSecurityIdentifier { get; set; }
        public string CollectionRid { get; set; }
        public string CollectionServiceIndex { get; set; }
        public string CollectionTruncate { get; set; }
        public string ConsistencyLevel { get; set; }
        public string ContentSerializationFormat { get; set; }
        public string Continuation { get; set; }
        public string CorrelatedActivityId { get; set; }
        public string DisableRUPerMinuteUsage { get; set; }
        public string EffectivePartitionKey { get; set; }
        public string EmitVerboseTracesInQuery { get; set; }
        public string EnableDynamicRidRangeAllocation { get; set; }
        public string EnableLogging { get; set; }
        public string EnableLowPrecisionOrderBy { get; set; }
        public string EnableScanInQuery { get; set; }
        public string EndEpk { get; set; }
        public string EndId { get; set; }
        public string EntityId { get; set; }
        public string EnumerationDirection { get; set; }
        public string ExcludeSystemProperties { get; set; }
        public string FanoutOperationState { get; set; }
        public string FilterBySchemaResourceId { get; set; }
        public string ForceDatabaseAccountUpdate { get; set; }
        public string ForceQueryScan { get; set; }
        public string ForceSideBySideIndexMigration { get; set; }
        public string GatewaySignature { get; set; }
        public string GetAllPartitionKeyStatistics { get; set; }
        public string HighPriorityForcedBackup { get; set; }
        public string HttpDate { get; set; }
        public string IfMatch { get; set; }
        public string IfModifiedSince { get; set; }
        public string IfNoneMatch { get; set; }
        public string IgnoreSystemLoweringMaxThroughput { get; set; }
        public string IncludePhysicalPartitionThroughputInfo { get; set; }
        public string IncludeTentativeWrites { get; set; }
        public string IndexingDirective { get; set; }
        public string IntendedCollectionRid { get; set; }
        public string IsAutoScaleRequest { get; set; }
        public string IsBatchAtomic { get; set; }
        public string IsBatchOrdered { get; set; }
        public string IsCassandraAlterTypeRequest { get; set; }
        public string IsClientEncrypted { get; set; }
        public string IsFanoutRequest { get; set; }
        public string IsInternalServerlessRequest { get; set; }
        public string IsMaterializedViewBuild { get; set; }
        public string IsMaterializedViewSourceSchemaReplaceBatchRequest { get; set; }
        public string IsMigratedFixedCollection { get; set; }
        public string IsOfferStorageRefreshRequest { get; set; }
        public string IsReadOnlyScript { get; set; }
        public string IsRetriedWriteRequest { get; set; }
        public string IsRUPerGBEnforcementRequest { get; set; }
        public string IsServerlessStorageRefreshRequest { get; set; }
        public string IsThroughputCapRequest { get; set; }
        public string IsUserRequest { get; set; }
        public string MaxPollingIntervalMilliseconds { get; set; }
        public string MergeCheckPointGLSN { get; set; }
        public string MergeStaticId { get; set; }
        public string MigrateCollectionDirective { get; set; }
        public string MigrateOfferToAutopilot { get; set; }
        public string MigrateOfferToManualThroughput { get; set; }
        public string NoRetryOn449StatusCode { get; set; }
        public string OfferReplaceRURedistribution { get; set; }
        public string OptimisticDirectExecute { get; set; }
        public string PageSize { get; set; }
        public string PartitionCount { get; set; }
        public string PartitionKey { get; set; }
        public string PartitionKeyRangeId { get; set; }
        public string PartitionResourceFilter { get; set; }
        public string PopulateAnalyticalMigrationProgress { get; set; }
        public string PopulateByokEncryptionProgress { get; set; }
        public string PopulateCapacityType { get; set; }
        public string PopulateCollectionThroughputInfo { get; set; }
        public string PopulateHighestTentativeWriteLLSN { get; set; }
        public string PopulateIndexMetrics { get; set; }
        public string PopulateIndexMetricsV2 { get; set; }
        public string PopulateLogStoreInfo { get; set; }
        public string PopulateMinGLSNForDocumentOperations { get; set; }
        public string PopulateOldestActiveSchemaId { get; set; }
        public string PopulatePartitionStatistics { get; set; }
        public string PopulateQueryMetrics { get; set; }
        public string PopulateQuotaInfo { get; set; }
        public string PopulateResourceCount { get; set; }
        public string PopulateUnflushedMergeEntryCount { get; set; }
        public string PopulateUniqueIndexReIndexProgress { get; set; }
        public string PostTriggerExclude { get; set; }
        public string PostTriggerInclude { get; set; }
        public string Prefer { get; set; }
        public string PreserveFullContent { get; set; }
        public string PreTriggerExclude { get; set; }
        public string PreTriggerInclude { get; set; }
        public string PrimaryMasterKey { get; set; }
        public string PrimaryReadonlyKey { get; set; }
        public string PriorityLevel { get; set; }
        public string ProfileRequest { get; set; }
        public string PruneCollectionSchemas { get; set; }
        public string RbacAction { get; set; }
        public string RbacResource { get; set; }
        public string RbacUserId { get; set; }
        public string ReadFeedKeyType { get; set; }
        public string RemainingTimeInMsOnClientRequest { get; set; }
        public string RemoteStorageType { get; set; }
        public string RequestedCollectionType { get; set; }
        public string ResourceId { get; set; }
        public string ResourceSchemaName { get; set; }
        public string ResourceTokenExpiry { get; set; }
        public string ResourceTypes { get; set; }
        public string ResponseContinuationTokenLimitInKB { get; set; }
        public string RestoreMetadataFilter { get; set; }
        public string RestoreParams { get; set; }
        public string RetriableWriteRequestId { get; set; }
        public string RetriableWriteRequestStartTimestamp { get; set; }
        public string SchemaHash { get; set; }
        public string SchemaId { get; set; }
        public string SchemaOwnerRid { get; set; }
        public string SDKSupportedCapabilities { get; set; }
        public string SecondaryMasterKey { get; set; }
        public string SecondaryReadonlyKey { get; set; }
        public string SessionToken { get; set; }
        public string SetMasterResourcesDeletionPending { get; set; }
        public string ShareThroughput { get; set; }
        public string ShouldBatchContinueOnError { get; set; }
        public string ShouldReturnCurrentServerDateTime { get; set; }
        public string SkipAdjustThroughputFractionsForOfferReplace { get; set; }
        public string SkipRefreshDatabaseAccountConfigs { get; set; }
        public string SourceCollectionIfMatch { get; set; }
        public string StartEpk { get; set; }
        public string StartId { get; set; }
        public string SupportedSerializationFormats { get; set; }
        public string SupportSpatialLegacyCoordinates { get; set; }
        public string SystemDocumentType { get; set; }
        public string SystemRestoreOperation { get; set; }
        public string TargetGlobalCommittedLsn { get; set; }
        public string TargetLsn { get; set; }
        public string TimeToLiveInSeconds { get; set; }
        public string TraceParent { get; set; }
        public string TraceState { get; set; }
        public string TransactionCommit { get; set; }
        public string TransactionFirstRequest { get; set; }
        public string TransactionId { get; set; }
        public string TransportRequestID { get; set; }
        public string TruncateMergeLogRequest { get; set; }
        public string UniqueIndexNameEncodingMode { get; set; }
        public string UniqueIndexReIndexingState { get; set; }
        public string UpdateMaxThroughputEverProvisioned { get; set; }
        public string UpdateOfferStateToPending { get; set; }
        public string UpdateOfferStateToRestorePending { get; set; }
        public string UseArchivalPartition { get; set; }
        public string UsePolygonsSmallerThanAHemisphere { get; set; }
        public string UseSystemBudget { get; set; }
        public string UseUserBackgroundBudget { get; set; }
        public string Version { get; set; }
        public string XDate { get; set; }

        public RequestNameValueCollection()
        {
        }

        public RequestNameValueCollection(INameValueCollection nameValueCollection)
        { 
            foreach (string key in nameValueCollection)
            {
                this.UpdateHelper(key, value: nameValueCollection.Get(key), throwIfAlreadyExists: false, ignoreNotCommonHeaders: false);
            }
        }

        public RequestNameValueCollection(IDictionary<string, string> requestHeaders)
        { 
            foreach (KeyValuePair<string, string> keyValuePair in requestHeaders)
            {
                this.UpdateHelper(key: keyValuePair.Key, value: keyValuePair.Value, throwIfAlreadyExists: false, ignoreNotCommonHeaders: false);
            }
        }

        /// <summary>
        /// Only process known headers. Ignores nameValueCollection changes by switching to per field assignment if InvalidOperationException happens while iterating over the keys.
        /// </summary>
        public static RequestNameValueCollection BuildRequestNameValueCollectionWithKnownHeadersOnly(INameValueCollection nameValueCollection)
        {
            RequestNameValueCollection requestNameValueCollection = new RequestNameValueCollection();
            try 
            {
                foreach (string key in nameValueCollection)
                {
                    requestNameValueCollection.UpdateHelper(key, value: nameValueCollection.Get(key), throwIfAlreadyExists: false, ignoreNotCommonHeaders: true);
                }
            }
            catch (InvalidOperationException e)
            {
                DefaultTrace.TraceWarning($"{nameof(RequestNameValueCollection)} Failed to iterate over nameValueCollection headers in a non thread safe manner: {e.Message}. Switching to the per property approach.");

            // Lookup by value because request headers can be used concurrently
            // It will cause an exception of looping over the dictionary and a value is modified
                requestNameValueCollection.ResourceId = nameValueCollection[WFConstants.BackendHeaders.ResourceId];
                requestNameValueCollection.Authorization = nameValueCollection[HttpConstants.HttpHeaders.Authorization];
                requestNameValueCollection.HttpDate = nameValueCollection[HttpConstants.HttpHeaders.HttpDate];
                requestNameValueCollection.XDate = nameValueCollection[HttpConstants.HttpHeaders.XDate];
                requestNameValueCollection.PageSize = nameValueCollection[HttpConstants.HttpHeaders.PageSize];
                requestNameValueCollection.SessionToken = nameValueCollection[HttpConstants.HttpHeaders.SessionToken];
                requestNameValueCollection.Continuation = nameValueCollection[HttpConstants.HttpHeaders.Continuation];
                requestNameValueCollection.IndexingDirective = nameValueCollection[HttpConstants.HttpHeaders.IndexingDirective];
                requestNameValueCollection.IfNoneMatch = nameValueCollection[HttpConstants.HttpHeaders.IfNoneMatch];
                requestNameValueCollection.PreTriggerInclude = nameValueCollection[HttpConstants.HttpHeaders.PreTriggerInclude];
                requestNameValueCollection.PostTriggerInclude = nameValueCollection[HttpConstants.HttpHeaders.PostTriggerInclude];
                requestNameValueCollection.IsFanoutRequest = nameValueCollection[WFConstants.BackendHeaders.IsFanoutRequest];
                requestNameValueCollection.CollectionPartitionIndex = nameValueCollection[WFConstants.BackendHeaders.CollectionPartitionIndex];
                requestNameValueCollection.CollectionServiceIndex = nameValueCollection[WFConstants.BackendHeaders.CollectionServiceIndex];
                requestNameValueCollection.PreTriggerExclude = nameValueCollection[HttpConstants.HttpHeaders.PreTriggerExclude];
                requestNameValueCollection.PostTriggerExclude = nameValueCollection[HttpConstants.HttpHeaders.PostTriggerExclude];
                requestNameValueCollection.ConsistencyLevel = nameValueCollection[HttpConstants.HttpHeaders.ConsistencyLevel];
                requestNameValueCollection.EntityId = nameValueCollection[WFConstants.BackendHeaders.EntityId];
                requestNameValueCollection.ResourceSchemaName = nameValueCollection[WFConstants.BackendHeaders.ResourceSchemaName];
                requestNameValueCollection.ResourceTokenExpiry = nameValueCollection[HttpConstants.HttpHeaders.ResourceTokenExpiry];
                requestNameValueCollection.EnableScanInQuery = nameValueCollection[HttpConstants.HttpHeaders.EnableScanInQuery];
                requestNameValueCollection.EmitVerboseTracesInQuery = nameValueCollection[HttpConstants.HttpHeaders.EmitVerboseTracesInQuery];
                requestNameValueCollection.BindReplicaDirective = nameValueCollection[WFConstants.BackendHeaders.BindReplicaDirective];
                requestNameValueCollection.PrimaryMasterKey = nameValueCollection[WFConstants.BackendHeaders.PrimaryMasterKey];
                requestNameValueCollection.SecondaryMasterKey = nameValueCollection[WFConstants.BackendHeaders.SecondaryMasterKey];
                requestNameValueCollection.PrimaryReadonlyKey = nameValueCollection[WFConstants.BackendHeaders.PrimaryReadonlyKey];
                requestNameValueCollection.SecondaryReadonlyKey = nameValueCollection[WFConstants.BackendHeaders.SecondaryReadonlyKey];
                requestNameValueCollection.ProfileRequest = nameValueCollection[HttpConstants.HttpHeaders.ProfileRequest];
                requestNameValueCollection.EnableLowPrecisionOrderBy = nameValueCollection[HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy];
                requestNameValueCollection.Version = nameValueCollection[HttpConstants.HttpHeaders.Version];
                requestNameValueCollection.CanCharge = nameValueCollection[HttpConstants.HttpHeaders.CanCharge];
                requestNameValueCollection.CanThrottle = nameValueCollection[HttpConstants.HttpHeaders.CanThrottle];
                requestNameValueCollection.PartitionKey = nameValueCollection[HttpConstants.HttpHeaders.PartitionKey];
                requestNameValueCollection.PartitionKeyRangeId = nameValueCollection[HttpConstants.HttpHeaders.PartitionKeyRangeId];
                requestNameValueCollection.MigrateCollectionDirective = nameValueCollection[HttpConstants.HttpHeaders.MigrateCollectionDirective];
                requestNameValueCollection.SupportSpatialLegacyCoordinates = nameValueCollection[HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates];
                requestNameValueCollection.PartitionCount = nameValueCollection[HttpConstants.HttpHeaders.PartitionCount];
                requestNameValueCollection.CollectionRid = nameValueCollection[WFConstants.BackendHeaders.CollectionRid];
                requestNameValueCollection.FilterBySchemaResourceId = nameValueCollection[HttpConstants.HttpHeaders.FilterBySchemaResourceId];
                requestNameValueCollection.UsePolygonsSmallerThanAHemisphere = nameValueCollection[HttpConstants.HttpHeaders.UsePolygonsSmallerThanAHemisphere];
                requestNameValueCollection.GatewaySignature = nameValueCollection[HttpConstants.HttpHeaders.GatewaySignature];
                requestNameValueCollection.EnableLogging = nameValueCollection[HttpConstants.HttpHeaders.EnableLogging];
                requestNameValueCollection.A_IM = nameValueCollection[HttpConstants.HttpHeaders.A_IM];
                requestNameValueCollection.PopulateQuotaInfo = nameValueCollection[HttpConstants.HttpHeaders.PopulateQuotaInfo];
                requestNameValueCollection.DisableRUPerMinuteUsage = nameValueCollection[HttpConstants.HttpHeaders.DisableRUPerMinuteUsage];
                requestNameValueCollection.PopulateQueryMetrics = nameValueCollection[HttpConstants.HttpHeaders.PopulateQueryMetrics];
                requestNameValueCollection.ResponseContinuationTokenLimitInKB = nameValueCollection[HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB];
                requestNameValueCollection.PopulatePartitionStatistics = nameValueCollection[HttpConstants.HttpHeaders.PopulatePartitionStatistics];
                requestNameValueCollection.RemoteStorageType = nameValueCollection[WFConstants.BackendHeaders.RemoteStorageType];
                requestNameValueCollection.CollectionRemoteStorageSecurityIdentifier = nameValueCollection[HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier];
                requestNameValueCollection.IfModifiedSince = nameValueCollection[HttpConstants.HttpHeaders.IfModifiedSince];
                requestNameValueCollection.PopulateCollectionThroughputInfo = nameValueCollection[HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo];
                requestNameValueCollection.RemainingTimeInMsOnClientRequest = nameValueCollection[HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest];
                requestNameValueCollection.ClientRetryAttemptCount = nameValueCollection[HttpConstants.HttpHeaders.ClientRetryAttemptCount];
                requestNameValueCollection.TargetLsn = nameValueCollection[HttpConstants.HttpHeaders.TargetLsn];
                requestNameValueCollection.TargetGlobalCommittedLsn = nameValueCollection[HttpConstants.HttpHeaders.TargetGlobalCommittedLsn];
                requestNameValueCollection.TransportRequestID = nameValueCollection[HttpConstants.HttpHeaders.TransportRequestID];
                requestNameValueCollection.RestoreMetadataFilter = nameValueCollection[HttpConstants.HttpHeaders.RestoreMetadataFilter];
                requestNameValueCollection.RestoreParams = nameValueCollection[WFConstants.BackendHeaders.RestoreParams];
                requestNameValueCollection.ShareThroughput = nameValueCollection[WFConstants.BackendHeaders.ShareThroughput];
                requestNameValueCollection.PartitionResourceFilter = nameValueCollection[WFConstants.BackendHeaders.PartitionResourceFilter];
                requestNameValueCollection.IsReadOnlyScript = nameValueCollection[HttpConstants.HttpHeaders.IsReadOnlyScript];
                requestNameValueCollection.IsAutoScaleRequest = nameValueCollection[HttpConstants.HttpHeaders.IsAutoScaleRequest];
                requestNameValueCollection.ForceQueryScan = nameValueCollection[HttpConstants.HttpHeaders.ForceQueryScan];
                requestNameValueCollection.CanOfferReplaceComplete = nameValueCollection[HttpConstants.HttpHeaders.CanOfferReplaceComplete];
                requestNameValueCollection.ExcludeSystemProperties = nameValueCollection[WFConstants.BackendHeaders.ExcludeSystemProperties];
                requestNameValueCollection.BinaryId = nameValueCollection[WFConstants.BackendHeaders.BinaryId];
                requestNameValueCollection.TimeToLiveInSeconds = nameValueCollection[WFConstants.BackendHeaders.TimeToLiveInSeconds];
                requestNameValueCollection.EffectivePartitionKey = nameValueCollection[WFConstants.BackendHeaders.EffectivePartitionKey];
                requestNameValueCollection.BinaryPassthroughRequest = nameValueCollection[WFConstants.BackendHeaders.BinaryPassthroughRequest];
                requestNameValueCollection.EnableDynamicRidRangeAllocation = nameValueCollection[WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation];
                requestNameValueCollection.EnumerationDirection = nameValueCollection[HttpConstants.HttpHeaders.EnumerationDirection];
                requestNameValueCollection.StartId = nameValueCollection[HttpConstants.HttpHeaders.StartId];
                requestNameValueCollection.EndId = nameValueCollection[HttpConstants.HttpHeaders.EndId];
                requestNameValueCollection.FanoutOperationState = nameValueCollection[WFConstants.BackendHeaders.FanoutOperationState];
                requestNameValueCollection.StartEpk = nameValueCollection[HttpConstants.HttpHeaders.StartEpk];
                requestNameValueCollection.EndEpk = nameValueCollection[HttpConstants.HttpHeaders.EndEpk];
                requestNameValueCollection.ReadFeedKeyType = nameValueCollection[HttpConstants.HttpHeaders.ReadFeedKeyType];
                requestNameValueCollection.ContentSerializationFormat = nameValueCollection[HttpConstants.HttpHeaders.ContentSerializationFormat];
                requestNameValueCollection.AllowTentativeWrites = nameValueCollection[HttpConstants.HttpHeaders.AllowTentativeWrites];
                requestNameValueCollection.IsUserRequest = nameValueCollection[WFConstants.BackendHeaders.IsUserRequest];
                requestNameValueCollection.PreserveFullContent = nameValueCollection[HttpConstants.HttpHeaders.PreserveFullContent];
                requestNameValueCollection.IncludeTentativeWrites = nameValueCollection[HttpConstants.HttpHeaders.IncludeTentativeWrites];
                requestNameValueCollection.PopulateResourceCount = nameValueCollection[HttpConstants.HttpHeaders.PopulateResourceCount];
                requestNameValueCollection.MergeStaticId = nameValueCollection[HttpConstants.HttpHeaders.MergeStaticId];
                requestNameValueCollection.IsBatchAtomic = nameValueCollection[HttpConstants.HttpHeaders.IsBatchAtomic];
                requestNameValueCollection.ShouldBatchContinueOnError = nameValueCollection[HttpConstants.HttpHeaders.ShouldBatchContinueOnError];
                requestNameValueCollection.IsBatchOrdered = nameValueCollection[HttpConstants.HttpHeaders.IsBatchOrdered];
                requestNameValueCollection.SchemaOwnerRid = nameValueCollection[WFConstants.BackendHeaders.SchemaOwnerRid];
                requestNameValueCollection.SchemaHash = nameValueCollection[WFConstants.BackendHeaders.SchemaHash];
                requestNameValueCollection.IsRUPerGBEnforcementRequest = nameValueCollection[HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest];
                requestNameValueCollection.MaxPollingIntervalMilliseconds = nameValueCollection[HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds];
                requestNameValueCollection.PopulateLogStoreInfo = nameValueCollection[WFConstants.BackendHeaders.PopulateLogStoreInfo];
                requestNameValueCollection.GetAllPartitionKeyStatistics = nameValueCollection[HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics];
                requestNameValueCollection.ForceSideBySideIndexMigration = nameValueCollection[HttpConstants.HttpHeaders.ForceSideBySideIndexMigration];
                requestNameValueCollection.CollectionChildResourceNameLimitInBytes = nameValueCollection[WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes];
                requestNameValueCollection.CollectionChildResourceContentLimitInKB = nameValueCollection[WFConstants.BackendHeaders.CollectionChildResourceContentLimitInKB];
                requestNameValueCollection.MergeCheckPointGLSN = nameValueCollection[WFConstants.BackendHeaders.MergeCheckPointGLSN];
                requestNameValueCollection.Prefer = nameValueCollection[HttpConstants.HttpHeaders.Prefer];
                requestNameValueCollection.UniqueIndexNameEncodingMode = nameValueCollection[WFConstants.BackendHeaders.UniqueIndexNameEncodingMode];
                requestNameValueCollection.PopulateUnflushedMergeEntryCount = nameValueCollection[WFConstants.BackendHeaders.PopulateUnflushedMergeEntryCount];
                requestNameValueCollection.MigrateOfferToManualThroughput = nameValueCollection[HttpConstants.HttpHeaders.MigrateOfferToManualThroughput];
                requestNameValueCollection.MigrateOfferToAutopilot = nameValueCollection[HttpConstants.HttpHeaders.MigrateOfferToAutopilot];
                requestNameValueCollection.IsClientEncrypted = nameValueCollection[HttpConstants.HttpHeaders.IsClientEncrypted];
                requestNameValueCollection.SystemDocumentType = nameValueCollection[HttpConstants.HttpHeaders.SystemDocumentType];
                requestNameValueCollection.IsOfferStorageRefreshRequest = nameValueCollection[HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest];
                requestNameValueCollection.ResourceTypes = nameValueCollection[WFConstants.BackendHeaders.ResourceTypes];
                requestNameValueCollection.TransactionId = nameValueCollection[WFConstants.BackendHeaders.TransactionId];
                requestNameValueCollection.TransactionFirstRequest = nameValueCollection[WFConstants.BackendHeaders.TransactionFirstRequest];
                requestNameValueCollection.TransactionCommit = nameValueCollection[WFConstants.BackendHeaders.TransactionCommit];
                requestNameValueCollection.UpdateMaxThroughputEverProvisioned = nameValueCollection[HttpConstants.HttpHeaders.UpdateMaxThroughputEverProvisioned];
                requestNameValueCollection.UniqueIndexReIndexingState = nameValueCollection[WFConstants.BackendHeaders.UniqueIndexReIndexingState];
                requestNameValueCollection.UseSystemBudget = nameValueCollection[WFConstants.BackendHeaders.UseSystemBudget];
                requestNameValueCollection.IgnoreSystemLoweringMaxThroughput = nameValueCollection[HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput];
                requestNameValueCollection.TruncateMergeLogRequest = nameValueCollection[HttpConstants.HttpHeaders.TruncateMergeLogRequest];
                requestNameValueCollection.RetriableWriteRequestId = nameValueCollection[WFConstants.BackendHeaders.RetriableWriteRequestId];
                requestNameValueCollection.IsRetriedWriteRequest = nameValueCollection[WFConstants.BackendHeaders.IsRetriedWriteRequest];
                requestNameValueCollection.RetriableWriteRequestStartTimestamp = nameValueCollection[WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp];
                requestNameValueCollection.AddResourcePropertiesToResponse = nameValueCollection[WFConstants.BackendHeaders.AddResourcePropertiesToResponse];
                requestNameValueCollection.ChangeFeedStartFullFidelityIfNoneMatch = nameValueCollection[HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch];
                requestNameValueCollection.SystemRestoreOperation = nameValueCollection[HttpConstants.HttpHeaders.SystemRestoreOperation];
                requestNameValueCollection.SkipRefreshDatabaseAccountConfigs = nameValueCollection[WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs];
                requestNameValueCollection.IntendedCollectionRid = nameValueCollection[WFConstants.BackendHeaders.IntendedCollectionRid];
                requestNameValueCollection.UseArchivalPartition = nameValueCollection[HttpConstants.HttpHeaders.UseArchivalPartition];
                requestNameValueCollection.PopulateUniqueIndexReIndexProgress = nameValueCollection[HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress];
                requestNameValueCollection.SchemaId = nameValueCollection[WFConstants.BackendHeaders.SchemaId];
                requestNameValueCollection.CollectionTruncate = nameValueCollection[HttpConstants.HttpHeaders.CollectionTruncate];
                requestNameValueCollection.SDKSupportedCapabilities = nameValueCollection[HttpConstants.HttpHeaders.SDKSupportedCapabilities];
                requestNameValueCollection.IsMaterializedViewBuild = nameValueCollection[HttpConstants.HttpHeaders.IsMaterializedViewBuild];
                requestNameValueCollection.BuilderClientIdentifier = nameValueCollection[HttpConstants.HttpHeaders.BuilderClientIdentifier];
                requestNameValueCollection.SourceCollectionIfMatch = nameValueCollection[WFConstants.BackendHeaders.SourceCollectionIfMatch];
                requestNameValueCollection.RequestedCollectionType = nameValueCollection[WFConstants.BackendHeaders.RequestedCollectionType];
                requestNameValueCollection.PopulateIndexMetrics = nameValueCollection[HttpConstants.HttpHeaders.PopulateIndexMetrics];
                requestNameValueCollection.PopulateAnalyticalMigrationProgress = nameValueCollection[HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress];
                requestNameValueCollection.ShouldReturnCurrentServerDateTime = nameValueCollection[HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime];
                requestNameValueCollection.RbacUserId = nameValueCollection[HttpConstants.HttpHeaders.RbacUserId];
                requestNameValueCollection.RbacAction = nameValueCollection[HttpConstants.HttpHeaders.RbacAction];
                requestNameValueCollection.RbacResource = nameValueCollection[HttpConstants.HttpHeaders.RbacResource];
                requestNameValueCollection.CorrelatedActivityId = nameValueCollection[HttpConstants.HttpHeaders.CorrelatedActivityId];
                requestNameValueCollection.IsThroughputCapRequest = nameValueCollection[HttpConstants.HttpHeaders.IsThroughputCapRequest];
                requestNameValueCollection.ChangeFeedWireFormatVersion = nameValueCollection[HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion];
                requestNameValueCollection.PopulateByokEncryptionProgress = nameValueCollection[HttpConstants.HttpHeaders.PopulateByokEncryptionProgress];
                requestNameValueCollection.UseUserBackgroundBudget = nameValueCollection[WFConstants.BackendHeaders.UseUserBackgroundBudget];
                requestNameValueCollection.IncludePhysicalPartitionThroughputInfo = nameValueCollection[HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo];
                requestNameValueCollection.IsServerlessStorageRefreshRequest = nameValueCollection[HttpConstants.HttpHeaders.IsServerlessStorageRefreshRequest];
                requestNameValueCollection.UpdateOfferStateToPending = nameValueCollection[HttpConstants.HttpHeaders.UpdateOfferStateToPending];
                requestNameValueCollection.PopulateOldestActiveSchemaId = nameValueCollection[HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId];
                requestNameValueCollection.IsInternalServerlessRequest = nameValueCollection[HttpConstants.HttpHeaders.IsInternalServerlessRequest];
                requestNameValueCollection.OfferReplaceRURedistribution = nameValueCollection[HttpConstants.HttpHeaders.OfferReplaceRURedistribution];
                requestNameValueCollection.IsCassandraAlterTypeRequest = nameValueCollection[HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest];
                requestNameValueCollection.IsMaterializedViewSourceSchemaReplaceBatchRequest = nameValueCollection[HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest];
                requestNameValueCollection.ForceDatabaseAccountUpdate = nameValueCollection[HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate];
                requestNameValueCollection.PriorityLevel = nameValueCollection[HttpConstants.HttpHeaders.PriorityLevel];
                requestNameValueCollection.AllowRestoreParamsUpdate = nameValueCollection[HttpConstants.HttpHeaders.AllowRestoreParamsUpdate];
                requestNameValueCollection.PruneCollectionSchemas = nameValueCollection[HttpConstants.HttpHeaders.PruneCollectionSchemas];
                requestNameValueCollection.PopulateIndexMetricsV2 = nameValueCollection[HttpConstants.HttpHeaders.PopulateIndexMetricsV2];
                requestNameValueCollection.IsMigratedFixedCollection = nameValueCollection[HttpConstants.HttpHeaders.IsMigratedFixedCollection];
                requestNameValueCollection.SupportedSerializationFormats = nameValueCollection[HttpConstants.HttpHeaders.SupportedSerializationFormats];
                requestNameValueCollection.UpdateOfferStateToRestorePending = nameValueCollection[HttpConstants.HttpHeaders.UpdateOfferStateToRestorePending];
                requestNameValueCollection.SetMasterResourcesDeletionPending = nameValueCollection[HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending];
                requestNameValueCollection.HighPriorityForcedBackup = nameValueCollection[HttpConstants.HttpHeaders.HighPriorityForcedBackup];
                requestNameValueCollection.OptimisticDirectExecute = nameValueCollection[HttpConstants.HttpHeaders.OptimisticDirectExecute];
                requestNameValueCollection.PopulateMinGLSNForDocumentOperations = nameValueCollection[WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations];
                requestNameValueCollection.PopulateHighestTentativeWriteLLSN = nameValueCollection[WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN];
                requestNameValueCollection.TraceParent = nameValueCollection[HttpConstants.HttpHeaders.TraceParent];
                requestNameValueCollection.TraceState = nameValueCollection[HttpConstants.HttpHeaders.TraceState];
                requestNameValueCollection.PopulateCapacityType = nameValueCollection[WFConstants.BackendHeaders.PopulateCapacityType];
                requestNameValueCollection.IfMatch = nameValueCollection[HttpConstants.HttpHeaders.IfMatch];
                requestNameValueCollection.NoRetryOn449StatusCode = nameValueCollection[HttpConstants.HttpHeaders.NoRetryOn449StatusCode];
                requestNameValueCollection.SkipAdjustThroughputFractionsForOfferReplace = nameValueCollection[HttpConstants.HttpHeaders.SkipAdjustThroughputFractionsForOfferReplace];
            }

            return requestNameValueCollection;
        }

        public string this[string key]
        {
            get => this.Get(key);
            set => this.Set(key, value);
        }

        public void Add(INameValueCollection collection)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }

            foreach (string key in collection.Keys())
            {
                this.Set(key, collection[key]);
            }
        }

        public string[] AllKeys()
        {
            return this.Keys().ToArray();
        }

        public void Clear()
        {
            if (this.notCommonHeaders != null)
            {
                this.notCommonHeaders.Clear();
            }

            this.A_IM = null;
            this.AddResourcePropertiesToResponse = null;
            this.AllowRestoreParamsUpdate = null;
            this.AllowTentativeWrites = null;
            this.Authorization = null;
            this.BinaryId = null;
            this.BinaryPassthroughRequest = null;
            this.BindReplicaDirective = null;
            this.BuilderClientIdentifier = null;
            this.CanCharge = null;
            this.CanOfferReplaceComplete = null;
            this.CanThrottle = null;
            this.ChangeFeedStartFullFidelityIfNoneMatch = null;
            this.ChangeFeedWireFormatVersion = null;
            this.ClientRetryAttemptCount = null;
            this.CollectionChildResourceContentLimitInKB = null;
            this.CollectionChildResourceNameLimitInBytes = null;
            this.CollectionPartitionIndex = null;
            this.CollectionRemoteStorageSecurityIdentifier = null;
            this.CollectionRid = null;
            this.CollectionServiceIndex = null;
            this.CollectionTruncate = null;
            this.ConsistencyLevel = null;
            this.ContentSerializationFormat = null;
            this.Continuation = null;
            this.CorrelatedActivityId = null;
            this.DisableRUPerMinuteUsage = null;
            this.EffectivePartitionKey = null;
            this.EmitVerboseTracesInQuery = null;
            this.EnableDynamicRidRangeAllocation = null;
            this.EnableLogging = null;
            this.EnableLowPrecisionOrderBy = null;
            this.EnableScanInQuery = null;
            this.EndEpk = null;
            this.EndId = null;
            this.EntityId = null;
            this.EnumerationDirection = null;
            this.ExcludeSystemProperties = null;
            this.FanoutOperationState = null;
            this.FilterBySchemaResourceId = null;
            this.ForceDatabaseAccountUpdate = null;
            this.ForceQueryScan = null;
            this.ForceSideBySideIndexMigration = null;
            this.GatewaySignature = null;
            this.GetAllPartitionKeyStatistics = null;
            this.HighPriorityForcedBackup = null;
            this.HttpDate = null;
            this.IfMatch = null;
            this.IfModifiedSince = null;
            this.IfNoneMatch = null;
            this.IgnoreSystemLoweringMaxThroughput = null;
            this.IncludePhysicalPartitionThroughputInfo = null;
            this.IncludeTentativeWrites = null;
            this.IndexingDirective = null;
            this.IntendedCollectionRid = null;
            this.IsAutoScaleRequest = null;
            this.IsBatchAtomic = null;
            this.IsBatchOrdered = null;
            this.IsCassandraAlterTypeRequest = null;
            this.IsClientEncrypted = null;
            this.IsFanoutRequest = null;
            this.IsInternalServerlessRequest = null;
            this.IsMaterializedViewBuild = null;
            this.IsMaterializedViewSourceSchemaReplaceBatchRequest = null;
            this.IsMigratedFixedCollection = null;
            this.IsOfferStorageRefreshRequest = null;
            this.IsReadOnlyScript = null;
            this.IsRetriedWriteRequest = null;
            this.IsRUPerGBEnforcementRequest = null;
            this.IsServerlessStorageRefreshRequest = null;
            this.IsThroughputCapRequest = null;
            this.IsUserRequest = null;
            this.MaxPollingIntervalMilliseconds = null;
            this.MergeCheckPointGLSN = null;
            this.MergeStaticId = null;
            this.MigrateCollectionDirective = null;
            this.MigrateOfferToAutopilot = null;
            this.MigrateOfferToManualThroughput = null;
            this.NoRetryOn449StatusCode = null;
            this.OfferReplaceRURedistribution = null;
            this.OptimisticDirectExecute = null;
            this.PageSize = null;
            this.PartitionCount = null;
            this.PartitionKey = null;
            this.PartitionKeyRangeId = null;
            this.PartitionResourceFilter = null;
            this.PopulateAnalyticalMigrationProgress = null;
            this.PopulateByokEncryptionProgress = null;
            this.PopulateCapacityType = null;
            this.PopulateCollectionThroughputInfo = null;
            this.PopulateHighestTentativeWriteLLSN = null;
            this.PopulateIndexMetrics = null;
            this.PopulateIndexMetricsV2 = null;
            this.PopulateLogStoreInfo = null;
            this.PopulateMinGLSNForDocumentOperations = null;
            this.PopulateOldestActiveSchemaId = null;
            this.PopulatePartitionStatistics = null;
            this.PopulateQueryMetrics = null;
            this.PopulateQuotaInfo = null;
            this.PopulateResourceCount = null;
            this.PopulateUnflushedMergeEntryCount = null;
            this.PopulateUniqueIndexReIndexProgress = null;
            this.PostTriggerExclude = null;
            this.PostTriggerInclude = null;
            this.Prefer = null;
            this.PreserveFullContent = null;
            this.PreTriggerExclude = null;
            this.PreTriggerInclude = null;
            this.PrimaryMasterKey = null;
            this.PrimaryReadonlyKey = null;
            this.PriorityLevel = null;
            this.ProfileRequest = null;
            this.PruneCollectionSchemas = null;
            this.RbacAction = null;
            this.RbacResource = null;
            this.RbacUserId = null;
            this.ReadFeedKeyType = null;
            this.RemainingTimeInMsOnClientRequest = null;
            this.RemoteStorageType = null;
            this.RequestedCollectionType = null;
            this.ResourceId = null;
            this.ResourceSchemaName = null;
            this.ResourceTokenExpiry = null;
            this.ResourceTypes = null;
            this.ResponseContinuationTokenLimitInKB = null;
            this.RestoreMetadataFilter = null;
            this.RestoreParams = null;
            this.RetriableWriteRequestId = null;
            this.RetriableWriteRequestStartTimestamp = null;
            this.SchemaHash = null;
            this.SchemaId = null;
            this.SchemaOwnerRid = null;
            this.SDKSupportedCapabilities = null;
            this.SecondaryMasterKey = null;
            this.SecondaryReadonlyKey = null;
            this.SessionToken = null;
            this.SetMasterResourcesDeletionPending = null;
            this.ShareThroughput = null;
            this.ShouldBatchContinueOnError = null;
            this.ShouldReturnCurrentServerDateTime = null;
            this.SkipAdjustThroughputFractionsForOfferReplace = null;
            this.SkipRefreshDatabaseAccountConfigs = null;
            this.SourceCollectionIfMatch = null;
            this.StartEpk = null;
            this.StartId = null;
            this.SupportedSerializationFormats = null;
            this.SupportSpatialLegacyCoordinates = null;
            this.SystemDocumentType = null;
            this.SystemRestoreOperation = null;
            this.TargetGlobalCommittedLsn = null;
            this.TargetLsn = null;
            this.TimeToLiveInSeconds = null;
            this.TraceParent = null;
            this.TraceState = null;
            this.TransactionCommit = null;
            this.TransactionFirstRequest = null;
            this.TransactionId = null;
            this.TransportRequestID = null;
            this.TruncateMergeLogRequest = null;
            this.UniqueIndexNameEncodingMode = null;
            this.UniqueIndexReIndexingState = null;
            this.UpdateMaxThroughputEverProvisioned = null;
            this.UpdateOfferStateToPending = null;
            this.UpdateOfferStateToRestorePending = null;
            this.UseArchivalPartition = null;
            this.UsePolygonsSmallerThanAHemisphere = null;
            this.UseSystemBudget = null;
            this.UseUserBackgroundBudget = null;
            this.Version = null;
            this.XDate = null;

        }

        public INameValueCollection Clone()
        {
            RequestNameValueCollection cloneHeaders = new RequestNameValueCollection()
            {
                A_IM = this.A_IM,
                AddResourcePropertiesToResponse = this.AddResourcePropertiesToResponse,
                AllowRestoreParamsUpdate = this.AllowRestoreParamsUpdate,
                AllowTentativeWrites = this.AllowTentativeWrites,
                Authorization = this.Authorization,
                BinaryId = this.BinaryId,
                BinaryPassthroughRequest = this.BinaryPassthroughRequest,
                BindReplicaDirective = this.BindReplicaDirective,
                BuilderClientIdentifier = this.BuilderClientIdentifier,
                CanCharge = this.CanCharge,
                CanOfferReplaceComplete = this.CanOfferReplaceComplete,
                CanThrottle = this.CanThrottle,
                ChangeFeedStartFullFidelityIfNoneMatch = this.ChangeFeedStartFullFidelityIfNoneMatch,
                ChangeFeedWireFormatVersion = this.ChangeFeedWireFormatVersion,
                ClientRetryAttemptCount = this.ClientRetryAttemptCount,
                CollectionChildResourceContentLimitInKB = this.CollectionChildResourceContentLimitInKB,
                CollectionChildResourceNameLimitInBytes = this.CollectionChildResourceNameLimitInBytes,
                CollectionPartitionIndex = this.CollectionPartitionIndex,
                CollectionRemoteStorageSecurityIdentifier = this.CollectionRemoteStorageSecurityIdentifier,
                CollectionRid = this.CollectionRid,
                CollectionServiceIndex = this.CollectionServiceIndex,
                CollectionTruncate = this.CollectionTruncate,
                ConsistencyLevel = this.ConsistencyLevel,
                ContentSerializationFormat = this.ContentSerializationFormat,
                Continuation = this.Continuation,
                CorrelatedActivityId = this.CorrelatedActivityId,
                DisableRUPerMinuteUsage = this.DisableRUPerMinuteUsage,
                EffectivePartitionKey = this.EffectivePartitionKey,
                EmitVerboseTracesInQuery = this.EmitVerboseTracesInQuery,
                EnableDynamicRidRangeAllocation = this.EnableDynamicRidRangeAllocation,
                EnableLogging = this.EnableLogging,
                EnableLowPrecisionOrderBy = this.EnableLowPrecisionOrderBy,
                EnableScanInQuery = this.EnableScanInQuery,
                EndEpk = this.EndEpk,
                EndId = this.EndId,
                EntityId = this.EntityId,
                EnumerationDirection = this.EnumerationDirection,
                ExcludeSystemProperties = this.ExcludeSystemProperties,
                FanoutOperationState = this.FanoutOperationState,
                FilterBySchemaResourceId = this.FilterBySchemaResourceId,
                ForceDatabaseAccountUpdate = this.ForceDatabaseAccountUpdate,
                ForceQueryScan = this.ForceQueryScan,
                ForceSideBySideIndexMigration = this.ForceSideBySideIndexMigration,
                GatewaySignature = this.GatewaySignature,
                GetAllPartitionKeyStatistics = this.GetAllPartitionKeyStatistics,
                HighPriorityForcedBackup = this.HighPriorityForcedBackup,
                HttpDate = this.HttpDate,
                IfMatch = this.IfMatch,
                IfModifiedSince = this.IfModifiedSince,
                IfNoneMatch = this.IfNoneMatch,
                IgnoreSystemLoweringMaxThroughput = this.IgnoreSystemLoweringMaxThroughput,
                IncludePhysicalPartitionThroughputInfo = this.IncludePhysicalPartitionThroughputInfo,
                IncludeTentativeWrites = this.IncludeTentativeWrites,
                IndexingDirective = this.IndexingDirective,
                IntendedCollectionRid = this.IntendedCollectionRid,
                IsAutoScaleRequest = this.IsAutoScaleRequest,
                IsBatchAtomic = this.IsBatchAtomic,
                IsBatchOrdered = this.IsBatchOrdered,
                IsCassandraAlterTypeRequest = this.IsCassandraAlterTypeRequest,
                IsClientEncrypted = this.IsClientEncrypted,
                IsFanoutRequest = this.IsFanoutRequest,
                IsInternalServerlessRequest = this.IsInternalServerlessRequest,
                IsMaterializedViewBuild = this.IsMaterializedViewBuild,
                IsMaterializedViewSourceSchemaReplaceBatchRequest = this.IsMaterializedViewSourceSchemaReplaceBatchRequest,
                IsMigratedFixedCollection = this.IsMigratedFixedCollection,
                IsOfferStorageRefreshRequest = this.IsOfferStorageRefreshRequest,
                IsReadOnlyScript = this.IsReadOnlyScript,
                IsRetriedWriteRequest = this.IsRetriedWriteRequest,
                IsRUPerGBEnforcementRequest = this.IsRUPerGBEnforcementRequest,
                IsServerlessStorageRefreshRequest = this.IsServerlessStorageRefreshRequest,
                IsThroughputCapRequest = this.IsThroughputCapRequest,
                IsUserRequest = this.IsUserRequest,
                MaxPollingIntervalMilliseconds = this.MaxPollingIntervalMilliseconds,
                MergeCheckPointGLSN = this.MergeCheckPointGLSN,
                MergeStaticId = this.MergeStaticId,
                MigrateCollectionDirective = this.MigrateCollectionDirective,
                MigrateOfferToAutopilot = this.MigrateOfferToAutopilot,
                MigrateOfferToManualThroughput = this.MigrateOfferToManualThroughput,
                NoRetryOn449StatusCode = this.NoRetryOn449StatusCode,
                OfferReplaceRURedistribution = this.OfferReplaceRURedistribution,
                OptimisticDirectExecute = this.OptimisticDirectExecute,
                PageSize = this.PageSize,
                PartitionCount = this.PartitionCount,
                PartitionKey = this.PartitionKey,
                PartitionKeyRangeId = this.PartitionKeyRangeId,
                PartitionResourceFilter = this.PartitionResourceFilter,
                PopulateAnalyticalMigrationProgress = this.PopulateAnalyticalMigrationProgress,
                PopulateByokEncryptionProgress = this.PopulateByokEncryptionProgress,
                PopulateCapacityType = this.PopulateCapacityType,
                PopulateCollectionThroughputInfo = this.PopulateCollectionThroughputInfo,
                PopulateHighestTentativeWriteLLSN = this.PopulateHighestTentativeWriteLLSN,
                PopulateIndexMetrics = this.PopulateIndexMetrics,
                PopulateIndexMetricsV2 = this.PopulateIndexMetricsV2,
                PopulateLogStoreInfo = this.PopulateLogStoreInfo,
                PopulateMinGLSNForDocumentOperations = this.PopulateMinGLSNForDocumentOperations,
                PopulateOldestActiveSchemaId = this.PopulateOldestActiveSchemaId,
                PopulatePartitionStatistics = this.PopulatePartitionStatistics,
                PopulateQueryMetrics = this.PopulateQueryMetrics,
                PopulateQuotaInfo = this.PopulateQuotaInfo,
                PopulateResourceCount = this.PopulateResourceCount,
                PopulateUnflushedMergeEntryCount = this.PopulateUnflushedMergeEntryCount,
                PopulateUniqueIndexReIndexProgress = this.PopulateUniqueIndexReIndexProgress,
                PostTriggerExclude = this.PostTriggerExclude,
                PostTriggerInclude = this.PostTriggerInclude,
                Prefer = this.Prefer,
                PreserveFullContent = this.PreserveFullContent,
                PreTriggerExclude = this.PreTriggerExclude,
                PreTriggerInclude = this.PreTriggerInclude,
                PrimaryMasterKey = this.PrimaryMasterKey,
                PrimaryReadonlyKey = this.PrimaryReadonlyKey,
                PriorityLevel = this.PriorityLevel,
                ProfileRequest = this.ProfileRequest,
                PruneCollectionSchemas = this.PruneCollectionSchemas,
                RbacAction = this.RbacAction,
                RbacResource = this.RbacResource,
                RbacUserId = this.RbacUserId,
                ReadFeedKeyType = this.ReadFeedKeyType,
                RemainingTimeInMsOnClientRequest = this.RemainingTimeInMsOnClientRequest,
                RemoteStorageType = this.RemoteStorageType,
                RequestedCollectionType = this.RequestedCollectionType,
                ResourceId = this.ResourceId,
                ResourceSchemaName = this.ResourceSchemaName,
                ResourceTokenExpiry = this.ResourceTokenExpiry,
                ResourceTypes = this.ResourceTypes,
                ResponseContinuationTokenLimitInKB = this.ResponseContinuationTokenLimitInKB,
                RestoreMetadataFilter = this.RestoreMetadataFilter,
                RestoreParams = this.RestoreParams,
                RetriableWriteRequestId = this.RetriableWriteRequestId,
                RetriableWriteRequestStartTimestamp = this.RetriableWriteRequestStartTimestamp,
                SchemaHash = this.SchemaHash,
                SchemaId = this.SchemaId,
                SchemaOwnerRid = this.SchemaOwnerRid,
                SDKSupportedCapabilities = this.SDKSupportedCapabilities,
                SecondaryMasterKey = this.SecondaryMasterKey,
                SecondaryReadonlyKey = this.SecondaryReadonlyKey,
                SessionToken = this.SessionToken,
                SetMasterResourcesDeletionPending = this.SetMasterResourcesDeletionPending,
                ShareThroughput = this.ShareThroughput,
                ShouldBatchContinueOnError = this.ShouldBatchContinueOnError,
                ShouldReturnCurrentServerDateTime = this.ShouldReturnCurrentServerDateTime,
                SkipAdjustThroughputFractionsForOfferReplace = this.SkipAdjustThroughputFractionsForOfferReplace,
                SkipRefreshDatabaseAccountConfigs = this.SkipRefreshDatabaseAccountConfigs,
                SourceCollectionIfMatch = this.SourceCollectionIfMatch,
                StartEpk = this.StartEpk,
                StartId = this.StartId,
                SupportedSerializationFormats = this.SupportedSerializationFormats,
                SupportSpatialLegacyCoordinates = this.SupportSpatialLegacyCoordinates,
                SystemDocumentType = this.SystemDocumentType,
                SystemRestoreOperation = this.SystemRestoreOperation,
                TargetGlobalCommittedLsn = this.TargetGlobalCommittedLsn,
                TargetLsn = this.TargetLsn,
                TimeToLiveInSeconds = this.TimeToLiveInSeconds,
                TraceParent = this.TraceParent,
                TraceState = this.TraceState,
                TransactionCommit = this.TransactionCommit,
                TransactionFirstRequest = this.TransactionFirstRequest,
                TransactionId = this.TransactionId,
                TransportRequestID = this.TransportRequestID,
                TruncateMergeLogRequest = this.TruncateMergeLogRequest,
                UniqueIndexNameEncodingMode = this.UniqueIndexNameEncodingMode,
                UniqueIndexReIndexingState = this.UniqueIndexReIndexingState,
                UpdateMaxThroughputEverProvisioned = this.UpdateMaxThroughputEverProvisioned,
                UpdateOfferStateToPending = this.UpdateOfferStateToPending,
                UpdateOfferStateToRestorePending = this.UpdateOfferStateToRestorePending,
                UseArchivalPartition = this.UseArchivalPartition,
                UsePolygonsSmallerThanAHemisphere = this.UsePolygonsSmallerThanAHemisphere,
                UseSystemBudget = this.UseSystemBudget,
                UseUserBackgroundBudget = this.UseUserBackgroundBudget,
                Version = this.Version,
                XDate = this.XDate,
            };

            if (this.notCommonHeaders != null)
            {
                cloneHeaders.notCommonHeaders = new Dictionary<string, string>(this.notCommonHeaders, RequestNameValueCollection.DefaultStringComparer);
            }

            return cloneHeaders;
        }

        public int Count()
        {
            return this.Keys().Count();
        }

        public IEnumerator GetEnumerator()
        {
            return this.Keys().GetEnumerator();
        }

        public string[] GetValues(string key)
        {
            string value = this.Get(key);
            if (value != null)
            {
                return new string[] { value };
            }

            return null;
        }

        public IEnumerable<string> Keys()
        {
            if (this.ResourceId != null)
            {
                yield return WFConstants.BackendHeaders.ResourceId;
            }
            if (this.Authorization != null)
            {
                yield return HttpConstants.HttpHeaders.Authorization;
            }
            if (this.HttpDate != null)
            {
                yield return HttpConstants.HttpHeaders.HttpDate;
            }
            if (this.XDate != null)
            {
                yield return HttpConstants.HttpHeaders.XDate;
            }
            if (this.PageSize != null)
            {
                yield return HttpConstants.HttpHeaders.PageSize;
            }
            if (this.SessionToken != null)
            {
                yield return HttpConstants.HttpHeaders.SessionToken;
            }
            if (this.Continuation != null)
            {
                yield return HttpConstants.HttpHeaders.Continuation;
            }
            if (this.IndexingDirective != null)
            {
                yield return HttpConstants.HttpHeaders.IndexingDirective;
            }
            if (this.IfNoneMatch != null)
            {
                yield return HttpConstants.HttpHeaders.IfNoneMatch;
            }
            if (this.PreTriggerInclude != null)
            {
                yield return HttpConstants.HttpHeaders.PreTriggerInclude;
            }
            if (this.PostTriggerInclude != null)
            {
                yield return HttpConstants.HttpHeaders.PostTriggerInclude;
            }
            if (this.IsFanoutRequest != null)
            {
                yield return WFConstants.BackendHeaders.IsFanoutRequest;
            }
            if (this.CollectionPartitionIndex != null)
            {
                yield return WFConstants.BackendHeaders.CollectionPartitionIndex;
            }
            if (this.CollectionServiceIndex != null)
            {
                yield return WFConstants.BackendHeaders.CollectionServiceIndex;
            }
            if (this.PreTriggerExclude != null)
            {
                yield return HttpConstants.HttpHeaders.PreTriggerExclude;
            }
            if (this.PostTriggerExclude != null)
            {
                yield return HttpConstants.HttpHeaders.PostTriggerExclude;
            }
            if (this.ConsistencyLevel != null)
            {
                yield return HttpConstants.HttpHeaders.ConsistencyLevel;
            }
            if (this.EntityId != null)
            {
                yield return WFConstants.BackendHeaders.EntityId;
            }
            if (this.ResourceSchemaName != null)
            {
                yield return WFConstants.BackendHeaders.ResourceSchemaName;
            }
            if (this.ResourceTokenExpiry != null)
            {
                yield return HttpConstants.HttpHeaders.ResourceTokenExpiry;
            }
            if (this.EnableScanInQuery != null)
            {
                yield return HttpConstants.HttpHeaders.EnableScanInQuery;
            }
            if (this.EmitVerboseTracesInQuery != null)
            {
                yield return HttpConstants.HttpHeaders.EmitVerboseTracesInQuery;
            }
            if (this.BindReplicaDirective != null)
            {
                yield return WFConstants.BackendHeaders.BindReplicaDirective;
            }
            if (this.PrimaryMasterKey != null)
            {
                yield return WFConstants.BackendHeaders.PrimaryMasterKey;
            }
            if (this.SecondaryMasterKey != null)
            {
                yield return WFConstants.BackendHeaders.SecondaryMasterKey;
            }
            if (this.PrimaryReadonlyKey != null)
            {
                yield return WFConstants.BackendHeaders.PrimaryReadonlyKey;
            }
            if (this.SecondaryReadonlyKey != null)
            {
                yield return WFConstants.BackendHeaders.SecondaryReadonlyKey;
            }
            if (this.ProfileRequest != null)
            {
                yield return HttpConstants.HttpHeaders.ProfileRequest;
            }
            if (this.EnableLowPrecisionOrderBy != null)
            {
                yield return HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy;
            }
            if (this.Version != null)
            {
                yield return HttpConstants.HttpHeaders.Version;
            }
            if (this.CanCharge != null)
            {
                yield return HttpConstants.HttpHeaders.CanCharge;
            }
            if (this.CanThrottle != null)
            {
                yield return HttpConstants.HttpHeaders.CanThrottle;
            }
            if (this.PartitionKey != null)
            {
                yield return HttpConstants.HttpHeaders.PartitionKey;
            }
            if (this.PartitionKeyRangeId != null)
            {
                yield return HttpConstants.HttpHeaders.PartitionKeyRangeId;
            }
            if (this.MigrateCollectionDirective != null)
            {
                yield return HttpConstants.HttpHeaders.MigrateCollectionDirective;
            }
            if (this.SupportSpatialLegacyCoordinates != null)
            {
                yield return HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates;
            }
            if (this.PartitionCount != null)
            {
                yield return HttpConstants.HttpHeaders.PartitionCount;
            }
            if (this.CollectionRid != null)
            {
                yield return WFConstants.BackendHeaders.CollectionRid;
            }
            if (this.FilterBySchemaResourceId != null)
            {
                yield return HttpConstants.HttpHeaders.FilterBySchemaResourceId;
            }
            if (this.UsePolygonsSmallerThanAHemisphere != null)
            {
                yield return HttpConstants.HttpHeaders.UsePolygonsSmallerThanAHemisphere;
            }
            if (this.GatewaySignature != null)
            {
                yield return HttpConstants.HttpHeaders.GatewaySignature;
            }
            if (this.EnableLogging != null)
            {
                yield return HttpConstants.HttpHeaders.EnableLogging;
            }
            if (this.A_IM != null)
            {
                yield return HttpConstants.HttpHeaders.A_IM;
            }
            if (this.PopulateQuotaInfo != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateQuotaInfo;
            }
            if (this.DisableRUPerMinuteUsage != null)
            {
                yield return HttpConstants.HttpHeaders.DisableRUPerMinuteUsage;
            }
            if (this.PopulateQueryMetrics != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateQueryMetrics;
            }
            if (this.ResponseContinuationTokenLimitInKB != null)
            {
                yield return HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB;
            }
            if (this.PopulatePartitionStatistics != null)
            {
                yield return HttpConstants.HttpHeaders.PopulatePartitionStatistics;
            }
            if (this.RemoteStorageType != null)
            {
                yield return WFConstants.BackendHeaders.RemoteStorageType;
            }
            if (this.CollectionRemoteStorageSecurityIdentifier != null)
            {
                yield return HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier;
            }
            if (this.IfModifiedSince != null)
            {
                yield return HttpConstants.HttpHeaders.IfModifiedSince;
            }
            if (this.PopulateCollectionThroughputInfo != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo;
            }
            if (this.RemainingTimeInMsOnClientRequest != null)
            {
                yield return HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest;
            }
            if (this.ClientRetryAttemptCount != null)
            {
                yield return HttpConstants.HttpHeaders.ClientRetryAttemptCount;
            }
            if (this.TargetLsn != null)
            {
                yield return HttpConstants.HttpHeaders.TargetLsn;
            }
            if (this.TargetGlobalCommittedLsn != null)
            {
                yield return HttpConstants.HttpHeaders.TargetGlobalCommittedLsn;
            }
            if (this.TransportRequestID != null)
            {
                yield return HttpConstants.HttpHeaders.TransportRequestID;
            }
            if (this.RestoreMetadataFilter != null)
            {
                yield return HttpConstants.HttpHeaders.RestoreMetadataFilter;
            }
            if (this.RestoreParams != null)
            {
                yield return WFConstants.BackendHeaders.RestoreParams;
            }
            if (this.ShareThroughput != null)
            {
                yield return WFConstants.BackendHeaders.ShareThroughput;
            }
            if (this.PartitionResourceFilter != null)
            {
                yield return WFConstants.BackendHeaders.PartitionResourceFilter;
            }
            if (this.IsReadOnlyScript != null)
            {
                yield return HttpConstants.HttpHeaders.IsReadOnlyScript;
            }
            if (this.IsAutoScaleRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsAutoScaleRequest;
            }
            if (this.ForceQueryScan != null)
            {
                yield return HttpConstants.HttpHeaders.ForceQueryScan;
            }
            if (this.CanOfferReplaceComplete != null)
            {
                yield return HttpConstants.HttpHeaders.CanOfferReplaceComplete;
            }
            if (this.ExcludeSystemProperties != null)
            {
                yield return WFConstants.BackendHeaders.ExcludeSystemProperties;
            }
            if (this.BinaryId != null)
            {
                yield return WFConstants.BackendHeaders.BinaryId;
            }
            if (this.TimeToLiveInSeconds != null)
            {
                yield return WFConstants.BackendHeaders.TimeToLiveInSeconds;
            }
            if (this.EffectivePartitionKey != null)
            {
                yield return WFConstants.BackendHeaders.EffectivePartitionKey;
            }
            if (this.BinaryPassthroughRequest != null)
            {
                yield return WFConstants.BackendHeaders.BinaryPassthroughRequest;
            }
            if (this.EnableDynamicRidRangeAllocation != null)
            {
                yield return WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation;
            }
            if (this.EnumerationDirection != null)
            {
                yield return HttpConstants.HttpHeaders.EnumerationDirection;
            }
            if (this.StartId != null)
            {
                yield return HttpConstants.HttpHeaders.StartId;
            }
            if (this.EndId != null)
            {
                yield return HttpConstants.HttpHeaders.EndId;
            }
            if (this.FanoutOperationState != null)
            {
                yield return WFConstants.BackendHeaders.FanoutOperationState;
            }
            if (this.StartEpk != null)
            {
                yield return HttpConstants.HttpHeaders.StartEpk;
            }
            if (this.EndEpk != null)
            {
                yield return HttpConstants.HttpHeaders.EndEpk;
            }
            if (this.ReadFeedKeyType != null)
            {
                yield return HttpConstants.HttpHeaders.ReadFeedKeyType;
            }
            if (this.ContentSerializationFormat != null)
            {
                yield return HttpConstants.HttpHeaders.ContentSerializationFormat;
            }
            if (this.AllowTentativeWrites != null)
            {
                yield return HttpConstants.HttpHeaders.AllowTentativeWrites;
            }
            if (this.IsUserRequest != null)
            {
                yield return WFConstants.BackendHeaders.IsUserRequest;
            }
            if (this.PreserveFullContent != null)
            {
                yield return HttpConstants.HttpHeaders.PreserveFullContent;
            }
            if (this.IncludeTentativeWrites != null)
            {
                yield return HttpConstants.HttpHeaders.IncludeTentativeWrites;
            }
            if (this.PopulateResourceCount != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateResourceCount;
            }
            if (this.MergeStaticId != null)
            {
                yield return HttpConstants.HttpHeaders.MergeStaticId;
            }
            if (this.IsBatchAtomic != null)
            {
                yield return HttpConstants.HttpHeaders.IsBatchAtomic;
            }
            if (this.ShouldBatchContinueOnError != null)
            {
                yield return HttpConstants.HttpHeaders.ShouldBatchContinueOnError;
            }
            if (this.IsBatchOrdered != null)
            {
                yield return HttpConstants.HttpHeaders.IsBatchOrdered;
            }
            if (this.SchemaOwnerRid != null)
            {
                yield return WFConstants.BackendHeaders.SchemaOwnerRid;
            }
            if (this.SchemaHash != null)
            {
                yield return WFConstants.BackendHeaders.SchemaHash;
            }
            if (this.IsRUPerGBEnforcementRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest;
            }
            if (this.MaxPollingIntervalMilliseconds != null)
            {
                yield return HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds;
            }
            if (this.PopulateLogStoreInfo != null)
            {
                yield return WFConstants.BackendHeaders.PopulateLogStoreInfo;
            }
            if (this.GetAllPartitionKeyStatistics != null)
            {
                yield return HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics;
            }
            if (this.ForceSideBySideIndexMigration != null)
            {
                yield return HttpConstants.HttpHeaders.ForceSideBySideIndexMigration;
            }
            if (this.CollectionChildResourceNameLimitInBytes != null)
            {
                yield return WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes;
            }
            if (this.CollectionChildResourceContentLimitInKB != null)
            {
                yield return WFConstants.BackendHeaders.CollectionChildResourceContentLimitInKB;
            }
            if (this.MergeCheckPointGLSN != null)
            {
                yield return WFConstants.BackendHeaders.MergeCheckPointGLSN;
            }
            if (this.Prefer != null)
            {
                yield return HttpConstants.HttpHeaders.Prefer;
            }
            if (this.UniqueIndexNameEncodingMode != null)
            {
                yield return WFConstants.BackendHeaders.UniqueIndexNameEncodingMode;
            }
            if (this.PopulateUnflushedMergeEntryCount != null)
            {
                yield return WFConstants.BackendHeaders.PopulateUnflushedMergeEntryCount;
            }
            if (this.MigrateOfferToManualThroughput != null)
            {
                yield return HttpConstants.HttpHeaders.MigrateOfferToManualThroughput;
            }
            if (this.MigrateOfferToAutopilot != null)
            {
                yield return HttpConstants.HttpHeaders.MigrateOfferToAutopilot;
            }
            if (this.IsClientEncrypted != null)
            {
                yield return HttpConstants.HttpHeaders.IsClientEncrypted;
            }
            if (this.SystemDocumentType != null)
            {
                yield return HttpConstants.HttpHeaders.SystemDocumentType;
            }
            if (this.IsOfferStorageRefreshRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest;
            }
            if (this.ResourceTypes != null)
            {
                yield return WFConstants.BackendHeaders.ResourceTypes;
            }
            if (this.TransactionId != null)
            {
                yield return WFConstants.BackendHeaders.TransactionId;
            }
            if (this.TransactionFirstRequest != null)
            {
                yield return WFConstants.BackendHeaders.TransactionFirstRequest;
            }
            if (this.TransactionCommit != null)
            {
                yield return WFConstants.BackendHeaders.TransactionCommit;
            }
            if (this.UpdateMaxThroughputEverProvisioned != null)
            {
                yield return HttpConstants.HttpHeaders.UpdateMaxThroughputEverProvisioned;
            }
            if (this.UniqueIndexReIndexingState != null)
            {
                yield return WFConstants.BackendHeaders.UniqueIndexReIndexingState;
            }
            if (this.UseSystemBudget != null)
            {
                yield return WFConstants.BackendHeaders.UseSystemBudget;
            }
            if (this.IgnoreSystemLoweringMaxThroughput != null)
            {
                yield return HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput;
            }
            if (this.TruncateMergeLogRequest != null)
            {
                yield return HttpConstants.HttpHeaders.TruncateMergeLogRequest;
            }
            if (this.RetriableWriteRequestId != null)
            {
                yield return WFConstants.BackendHeaders.RetriableWriteRequestId;
            }
            if (this.IsRetriedWriteRequest != null)
            {
                yield return WFConstants.BackendHeaders.IsRetriedWriteRequest;
            }
            if (this.RetriableWriteRequestStartTimestamp != null)
            {
                yield return WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp;
            }
            if (this.AddResourcePropertiesToResponse != null)
            {
                yield return WFConstants.BackendHeaders.AddResourcePropertiesToResponse;
            }
            if (this.ChangeFeedStartFullFidelityIfNoneMatch != null)
            {
                yield return HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch;
            }
            if (this.SystemRestoreOperation != null)
            {
                yield return HttpConstants.HttpHeaders.SystemRestoreOperation;
            }
            if (this.SkipRefreshDatabaseAccountConfigs != null)
            {
                yield return WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs;
            }
            if (this.IntendedCollectionRid != null)
            {
                yield return WFConstants.BackendHeaders.IntendedCollectionRid;
            }
            if (this.UseArchivalPartition != null)
            {
                yield return HttpConstants.HttpHeaders.UseArchivalPartition;
            }
            if (this.PopulateUniqueIndexReIndexProgress != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress;
            }
            if (this.SchemaId != null)
            {
                yield return WFConstants.BackendHeaders.SchemaId;
            }
            if (this.CollectionTruncate != null)
            {
                yield return HttpConstants.HttpHeaders.CollectionTruncate;
            }
            if (this.SDKSupportedCapabilities != null)
            {
                yield return HttpConstants.HttpHeaders.SDKSupportedCapabilities;
            }
            if (this.IsMaterializedViewBuild != null)
            {
                yield return HttpConstants.HttpHeaders.IsMaterializedViewBuild;
            }
            if (this.BuilderClientIdentifier != null)
            {
                yield return HttpConstants.HttpHeaders.BuilderClientIdentifier;
            }
            if (this.SourceCollectionIfMatch != null)
            {
                yield return WFConstants.BackendHeaders.SourceCollectionIfMatch;
            }
            if (this.RequestedCollectionType != null)
            {
                yield return WFConstants.BackendHeaders.RequestedCollectionType;
            }
            if (this.PopulateIndexMetrics != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateIndexMetrics;
            }
            if (this.PopulateAnalyticalMigrationProgress != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress;
            }
            if (this.ShouldReturnCurrentServerDateTime != null)
            {
                yield return HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime;
            }
            if (this.RbacUserId != null)
            {
                yield return HttpConstants.HttpHeaders.RbacUserId;
            }
            if (this.RbacAction != null)
            {
                yield return HttpConstants.HttpHeaders.RbacAction;
            }
            if (this.RbacResource != null)
            {
                yield return HttpConstants.HttpHeaders.RbacResource;
            }
            if (this.CorrelatedActivityId != null)
            {
                yield return HttpConstants.HttpHeaders.CorrelatedActivityId;
            }
            if (this.IsThroughputCapRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsThroughputCapRequest;
            }
            if (this.ChangeFeedWireFormatVersion != null)
            {
                yield return HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion;
            }
            if (this.PopulateByokEncryptionProgress != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateByokEncryptionProgress;
            }
            if (this.UseUserBackgroundBudget != null)
            {
                yield return WFConstants.BackendHeaders.UseUserBackgroundBudget;
            }
            if (this.IncludePhysicalPartitionThroughputInfo != null)
            {
                yield return HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo;
            }
            if (this.IsServerlessStorageRefreshRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsServerlessStorageRefreshRequest;
            }
            if (this.UpdateOfferStateToPending != null)
            {
                yield return HttpConstants.HttpHeaders.UpdateOfferStateToPending;
            }
            if (this.PopulateOldestActiveSchemaId != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId;
            }
            if (this.IsInternalServerlessRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsInternalServerlessRequest;
            }
            if (this.OfferReplaceRURedistribution != null)
            {
                yield return HttpConstants.HttpHeaders.OfferReplaceRURedistribution;
            }
            if (this.IsCassandraAlterTypeRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest;
            }
            if (this.IsMaterializedViewSourceSchemaReplaceBatchRequest != null)
            {
                yield return HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest;
            }
            if (this.ForceDatabaseAccountUpdate != null)
            {
                yield return HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate;
            }
            if (this.PriorityLevel != null)
            {
                yield return HttpConstants.HttpHeaders.PriorityLevel;
            }
            if (this.AllowRestoreParamsUpdate != null)
            {
                yield return HttpConstants.HttpHeaders.AllowRestoreParamsUpdate;
            }
            if (this.PruneCollectionSchemas != null)
            {
                yield return HttpConstants.HttpHeaders.PruneCollectionSchemas;
            }
            if (this.PopulateIndexMetricsV2 != null)
            {
                yield return HttpConstants.HttpHeaders.PopulateIndexMetricsV2;
            }
            if (this.IsMigratedFixedCollection != null)
            {
                yield return HttpConstants.HttpHeaders.IsMigratedFixedCollection;
            }
            if (this.SupportedSerializationFormats != null)
            {
                yield return HttpConstants.HttpHeaders.SupportedSerializationFormats;
            }
            if (this.UpdateOfferStateToRestorePending != null)
            {
                yield return HttpConstants.HttpHeaders.UpdateOfferStateToRestorePending;
            }
            if (this.SetMasterResourcesDeletionPending != null)
            {
                yield return HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending;
            }
            if (this.HighPriorityForcedBackup != null)
            {
                yield return HttpConstants.HttpHeaders.HighPriorityForcedBackup;
            }
            if (this.OptimisticDirectExecute != null)
            {
                yield return HttpConstants.HttpHeaders.OptimisticDirectExecute;
            }
            if (this.PopulateMinGLSNForDocumentOperations != null)
            {
                yield return WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations;
            }
            if (this.PopulateHighestTentativeWriteLLSN != null)
            {
                yield return WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN;
            }
            if (this.TraceParent != null)
            {
                yield return HttpConstants.HttpHeaders.TraceParent;
            }
            if (this.TraceState != null)
            {
                yield return HttpConstants.HttpHeaders.TraceState;
            }
            if (this.PopulateCapacityType != null)
            {
                yield return WFConstants.BackendHeaders.PopulateCapacityType;
            }
            if (this.IfMatch != null)
            {
                yield return HttpConstants.HttpHeaders.IfMatch;
            }
            if (this.NoRetryOn449StatusCode != null)
            {
                yield return HttpConstants.HttpHeaders.NoRetryOn449StatusCode;
            }
            if (this.SkipAdjustThroughputFractionsForOfferReplace != null)
            {
                yield return HttpConstants.HttpHeaders.SkipAdjustThroughputFractionsForOfferReplace;
            }

            if (this.notCommonHeaders != null)
            {
                foreach (string key in this.notCommonHeaders.Keys)
                {
                    yield return key;
                }
            }
        }

        public NameValueCollection ToNameValueCollection()
        {
            // Note: See comment on line 34 of this file for the implementation. We need to respect current contracts
            // for Backend Gateway.
            if (this.nameValueCollection == null)
            {
                lock (this)
                {
                    if (this.nameValueCollection == null)
                    {
                        this.nameValueCollection = new NameValueCollection(this.Count(), RequestNameValueCollection.DefaultStringComparer);

                         if (this.ResourceId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ResourceId, this.ResourceId);
                        }
                        if (this.Authorization != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.Authorization, this.Authorization);
                        }
                        if (this.HttpDate != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.HttpDate, this.HttpDate);
                        }
                        if (this.XDate != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.XDate, this.XDate);
                        }
                        if (this.PageSize != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PageSize, this.PageSize);
                        }
                        if (this.SessionToken != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SessionToken, this.SessionToken);
                        }
                        if (this.Continuation != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.Continuation, this.Continuation);
                        }
                        if (this.IndexingDirective != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IndexingDirective, this.IndexingDirective);
                        }
                        if (this.IfNoneMatch != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IfNoneMatch, this.IfNoneMatch);
                        }
                        if (this.PreTriggerInclude != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PreTriggerInclude, this.PreTriggerInclude);
                        }
                        if (this.PostTriggerInclude != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PostTriggerInclude, this.PostTriggerInclude);
                        }
                        if (this.IsFanoutRequest != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.IsFanoutRequest, this.IsFanoutRequest);
                        }
                        if (this.CollectionPartitionIndex != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionPartitionIndex, this.CollectionPartitionIndex);
                        }
                        if (this.CollectionServiceIndex != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionServiceIndex, this.CollectionServiceIndex);
                        }
                        if (this.PreTriggerExclude != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PreTriggerExclude, this.PreTriggerExclude);
                        }
                        if (this.PostTriggerExclude != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PostTriggerExclude, this.PostTriggerExclude);
                        }
                        if (this.ConsistencyLevel != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ConsistencyLevel, this.ConsistencyLevel);
                        }
                        if (this.EntityId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.EntityId, this.EntityId);
                        }
                        if (this.ResourceSchemaName != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ResourceSchemaName, this.ResourceSchemaName);
                        }
                        if (this.ResourceTokenExpiry != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ResourceTokenExpiry, this.ResourceTokenExpiry);
                        }
                        if (this.EnableScanInQuery != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EnableScanInQuery, this.EnableScanInQuery);
                        }
                        if (this.EmitVerboseTracesInQuery != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EmitVerboseTracesInQuery, this.EmitVerboseTracesInQuery);
                        }
                        if (this.BindReplicaDirective != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.BindReplicaDirective, this.BindReplicaDirective);
                        }
                        if (this.PrimaryMasterKey != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PrimaryMasterKey, this.PrimaryMasterKey);
                        }
                        if (this.SecondaryMasterKey != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SecondaryMasterKey, this.SecondaryMasterKey);
                        }
                        if (this.PrimaryReadonlyKey != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PrimaryReadonlyKey, this.PrimaryReadonlyKey);
                        }
                        if (this.SecondaryReadonlyKey != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SecondaryReadonlyKey, this.SecondaryReadonlyKey);
                        }
                        if (this.ProfileRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ProfileRequest, this.ProfileRequest);
                        }
                        if (this.EnableLowPrecisionOrderBy != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy, this.EnableLowPrecisionOrderBy);
                        }
                        if (this.Version != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.Version, this.Version);
                        }
                        if (this.CanCharge != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CanCharge, this.CanCharge);
                        }
                        if (this.CanThrottle != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CanThrottle, this.CanThrottle);
                        }
                        if (this.PartitionKey != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PartitionKey, this.PartitionKey);
                        }
                        if (this.PartitionKeyRangeId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PartitionKeyRangeId, this.PartitionKeyRangeId);
                        }
                        if (this.MigrateCollectionDirective != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MigrateCollectionDirective, this.MigrateCollectionDirective);
                        }
                        if (this.SupportSpatialLegacyCoordinates != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates, this.SupportSpatialLegacyCoordinates);
                        }
                        if (this.PartitionCount != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PartitionCount, this.PartitionCount);
                        }
                        if (this.CollectionRid != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionRid, this.CollectionRid);
                        }
                        if (this.FilterBySchemaResourceId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.FilterBySchemaResourceId, this.FilterBySchemaResourceId);
                        }
                        if (this.UsePolygonsSmallerThanAHemisphere != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.UsePolygonsSmallerThanAHemisphere, this.UsePolygonsSmallerThanAHemisphere);
                        }
                        if (this.GatewaySignature != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.GatewaySignature, this.GatewaySignature);
                        }
                        if (this.EnableLogging != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EnableLogging, this.EnableLogging);
                        }
                        if (this.A_IM != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.A_IM, this.A_IM);
                        }
                        if (this.PopulateQuotaInfo != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateQuotaInfo, this.PopulateQuotaInfo);
                        }
                        if (this.DisableRUPerMinuteUsage != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.DisableRUPerMinuteUsage, this.DisableRUPerMinuteUsage);
                        }
                        if (this.PopulateQueryMetrics != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateQueryMetrics, this.PopulateQueryMetrics);
                        }
                        if (this.ResponseContinuationTokenLimitInKB != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB, this.ResponseContinuationTokenLimitInKB);
                        }
                        if (this.PopulatePartitionStatistics != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulatePartitionStatistics, this.PopulatePartitionStatistics);
                        }
                        if (this.RemoteStorageType != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RemoteStorageType, this.RemoteStorageType);
                        }
                        if (this.CollectionRemoteStorageSecurityIdentifier != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier, this.CollectionRemoteStorageSecurityIdentifier);
                        }
                        if (this.IfModifiedSince != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IfModifiedSince, this.IfModifiedSince);
                        }
                        if (this.PopulateCollectionThroughputInfo != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo, this.PopulateCollectionThroughputInfo);
                        }
                        if (this.RemainingTimeInMsOnClientRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest, this.RemainingTimeInMsOnClientRequest);
                        }
                        if (this.ClientRetryAttemptCount != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ClientRetryAttemptCount, this.ClientRetryAttemptCount);
                        }
                        if (this.TargetLsn != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TargetLsn, this.TargetLsn);
                        }
                        if (this.TargetGlobalCommittedLsn != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TargetGlobalCommittedLsn, this.TargetGlobalCommittedLsn);
                        }
                        if (this.TransportRequestID != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TransportRequestID, this.TransportRequestID);
                        }
                        if (this.RestoreMetadataFilter != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RestoreMetadataFilter, this.RestoreMetadataFilter);
                        }
                        if (this.RestoreParams != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RestoreParams, this.RestoreParams);
                        }
                        if (this.ShareThroughput != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ShareThroughput, this.ShareThroughput);
                        }
                        if (this.PartitionResourceFilter != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PartitionResourceFilter, this.PartitionResourceFilter);
                        }
                        if (this.IsReadOnlyScript != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsReadOnlyScript, this.IsReadOnlyScript);
                        }
                        if (this.IsAutoScaleRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsAutoScaleRequest, this.IsAutoScaleRequest);
                        }
                        if (this.ForceQueryScan != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ForceQueryScan, this.ForceQueryScan);
                        }
                        if (this.CanOfferReplaceComplete != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CanOfferReplaceComplete, this.CanOfferReplaceComplete);
                        }
                        if (this.ExcludeSystemProperties != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ExcludeSystemProperties, this.ExcludeSystemProperties);
                        }
                        if (this.BinaryId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.BinaryId, this.BinaryId);
                        }
                        if (this.TimeToLiveInSeconds != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.TimeToLiveInSeconds, this.TimeToLiveInSeconds);
                        }
                        if (this.EffectivePartitionKey != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.EffectivePartitionKey, this.EffectivePartitionKey);
                        }
                        if (this.BinaryPassthroughRequest != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.BinaryPassthroughRequest, this.BinaryPassthroughRequest);
                        }
                        if (this.EnableDynamicRidRangeAllocation != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation, this.EnableDynamicRidRangeAllocation);
                        }
                        if (this.EnumerationDirection != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EnumerationDirection, this.EnumerationDirection);
                        }
                        if (this.StartId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.StartId, this.StartId);
                        }
                        if (this.EndId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EndId, this.EndId);
                        }
                        if (this.FanoutOperationState != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.FanoutOperationState, this.FanoutOperationState);
                        }
                        if (this.StartEpk != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.StartEpk, this.StartEpk);
                        }
                        if (this.EndEpk != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.EndEpk, this.EndEpk);
                        }
                        if (this.ReadFeedKeyType != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ReadFeedKeyType, this.ReadFeedKeyType);
                        }
                        if (this.ContentSerializationFormat != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ContentSerializationFormat, this.ContentSerializationFormat);
                        }
                        if (this.AllowTentativeWrites != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.AllowTentativeWrites, this.AllowTentativeWrites);
                        }
                        if (this.IsUserRequest != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.IsUserRequest, this.IsUserRequest);
                        }
                        if (this.PreserveFullContent != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PreserveFullContent, this.PreserveFullContent);
                        }
                        if (this.IncludeTentativeWrites != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IncludeTentativeWrites, this.IncludeTentativeWrites);
                        }
                        if (this.PopulateResourceCount != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateResourceCount, this.PopulateResourceCount);
                        }
                        if (this.MergeStaticId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MergeStaticId, this.MergeStaticId);
                        }
                        if (this.IsBatchAtomic != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsBatchAtomic, this.IsBatchAtomic);
                        }
                        if (this.ShouldBatchContinueOnError != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ShouldBatchContinueOnError, this.ShouldBatchContinueOnError);
                        }
                        if (this.IsBatchOrdered != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsBatchOrdered, this.IsBatchOrdered);
                        }
                        if (this.SchemaOwnerRid != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SchemaOwnerRid, this.SchemaOwnerRid);
                        }
                        if (this.SchemaHash != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SchemaHash, this.SchemaHash);
                        }
                        if (this.IsRUPerGBEnforcementRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest, this.IsRUPerGBEnforcementRequest);
                        }
                        if (this.MaxPollingIntervalMilliseconds != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds, this.MaxPollingIntervalMilliseconds);
                        }
                        if (this.PopulateLogStoreInfo != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PopulateLogStoreInfo, this.PopulateLogStoreInfo);
                        }
                        if (this.GetAllPartitionKeyStatistics != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics, this.GetAllPartitionKeyStatistics);
                        }
                        if (this.ForceSideBySideIndexMigration != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ForceSideBySideIndexMigration, this.ForceSideBySideIndexMigration);
                        }
                        if (this.CollectionChildResourceNameLimitInBytes != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes, this.CollectionChildResourceNameLimitInBytes);
                        }
                        if (this.CollectionChildResourceContentLimitInKB != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionChildResourceContentLimitInKB, this.CollectionChildResourceContentLimitInKB);
                        }
                        if (this.MergeCheckPointGLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.MergeCheckPointGLSN, this.MergeCheckPointGLSN);
                        }
                        if (this.Prefer != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.Prefer, this.Prefer);
                        }
                        if (this.UniqueIndexNameEncodingMode != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.UniqueIndexNameEncodingMode, this.UniqueIndexNameEncodingMode);
                        }
                        if (this.PopulateUnflushedMergeEntryCount != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PopulateUnflushedMergeEntryCount, this.PopulateUnflushedMergeEntryCount);
                        }
                        if (this.MigrateOfferToManualThroughput != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MigrateOfferToManualThroughput, this.MigrateOfferToManualThroughput);
                        }
                        if (this.MigrateOfferToAutopilot != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MigrateOfferToAutopilot, this.MigrateOfferToAutopilot);
                        }
                        if (this.IsClientEncrypted != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsClientEncrypted, this.IsClientEncrypted);
                        }
                        if (this.SystemDocumentType != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SystemDocumentType, this.SystemDocumentType);
                        }
                        if (this.IsOfferStorageRefreshRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest, this.IsOfferStorageRefreshRequest);
                        }
                        if (this.ResourceTypes != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ResourceTypes, this.ResourceTypes);
                        }
                        if (this.TransactionId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.TransactionId, this.TransactionId);
                        }
                        if (this.TransactionFirstRequest != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.TransactionFirstRequest, this.TransactionFirstRequest);
                        }
                        if (this.TransactionCommit != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.TransactionCommit, this.TransactionCommit);
                        }
                        if (this.UpdateMaxThroughputEverProvisioned != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.UpdateMaxThroughputEverProvisioned, this.UpdateMaxThroughputEverProvisioned);
                        }
                        if (this.UniqueIndexReIndexingState != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.UniqueIndexReIndexingState, this.UniqueIndexReIndexingState);
                        }
                        if (this.UseSystemBudget != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.UseSystemBudget, this.UseSystemBudget);
                        }
                        if (this.IgnoreSystemLoweringMaxThroughput != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput, this.IgnoreSystemLoweringMaxThroughput);
                        }
                        if (this.TruncateMergeLogRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TruncateMergeLogRequest, this.TruncateMergeLogRequest);
                        }
                        if (this.RetriableWriteRequestId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RetriableWriteRequestId, this.RetriableWriteRequestId);
                        }
                        if (this.IsRetriedWriteRequest != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.IsRetriedWriteRequest, this.IsRetriedWriteRequest);
                        }
                        if (this.RetriableWriteRequestStartTimestamp != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp, this.RetriableWriteRequestStartTimestamp);
                        }
                        if (this.AddResourcePropertiesToResponse != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.AddResourcePropertiesToResponse, this.AddResourcePropertiesToResponse);
                        }
                        if (this.ChangeFeedStartFullFidelityIfNoneMatch != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch, this.ChangeFeedStartFullFidelityIfNoneMatch);
                        }
                        if (this.SystemRestoreOperation != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SystemRestoreOperation, this.SystemRestoreOperation);
                        }
                        if (this.SkipRefreshDatabaseAccountConfigs != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs, this.SkipRefreshDatabaseAccountConfigs);
                        }
                        if (this.IntendedCollectionRid != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.IntendedCollectionRid, this.IntendedCollectionRid);
                        }
                        if (this.UseArchivalPartition != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.UseArchivalPartition, this.UseArchivalPartition);
                        }
                        if (this.PopulateUniqueIndexReIndexProgress != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress, this.PopulateUniqueIndexReIndexProgress);
                        }
                        if (this.SchemaId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SchemaId, this.SchemaId);
                        }
                        if (this.CollectionTruncate != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CollectionTruncate, this.CollectionTruncate);
                        }
                        if (this.SDKSupportedCapabilities != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SDKSupportedCapabilities, this.SDKSupportedCapabilities);
                        }
                        if (this.IsMaterializedViewBuild != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsMaterializedViewBuild, this.IsMaterializedViewBuild);
                        }
                        if (this.BuilderClientIdentifier != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.BuilderClientIdentifier, this.BuilderClientIdentifier);
                        }
                        if (this.SourceCollectionIfMatch != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SourceCollectionIfMatch, this.SourceCollectionIfMatch);
                        }
                        if (this.RequestedCollectionType != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RequestedCollectionType, this.RequestedCollectionType);
                        }
                        if (this.PopulateIndexMetrics != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateIndexMetrics, this.PopulateIndexMetrics);
                        }
                        if (this.PopulateAnalyticalMigrationProgress != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress, this.PopulateAnalyticalMigrationProgress);
                        }
                        if (this.ShouldReturnCurrentServerDateTime != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime, this.ShouldReturnCurrentServerDateTime);
                        }
                        if (this.RbacUserId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RbacUserId, this.RbacUserId);
                        }
                        if (this.RbacAction != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RbacAction, this.RbacAction);
                        }
                        if (this.RbacResource != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RbacResource, this.RbacResource);
                        }
                        if (this.CorrelatedActivityId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CorrelatedActivityId, this.CorrelatedActivityId);
                        }
                        if (this.IsThroughputCapRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsThroughputCapRequest, this.IsThroughputCapRequest);
                        }
                        if (this.ChangeFeedWireFormatVersion != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion, this.ChangeFeedWireFormatVersion);
                        }
                        if (this.PopulateByokEncryptionProgress != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateByokEncryptionProgress, this.PopulateByokEncryptionProgress);
                        }
                        if (this.UseUserBackgroundBudget != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.UseUserBackgroundBudget, this.UseUserBackgroundBudget);
                        }
                        if (this.IncludePhysicalPartitionThroughputInfo != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo, this.IncludePhysicalPartitionThroughputInfo);
                        }
                        if (this.IsServerlessStorageRefreshRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsServerlessStorageRefreshRequest, this.IsServerlessStorageRefreshRequest);
                        }
                        if (this.UpdateOfferStateToPending != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.UpdateOfferStateToPending, this.UpdateOfferStateToPending);
                        }
                        if (this.PopulateOldestActiveSchemaId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId, this.PopulateOldestActiveSchemaId);
                        }
                        if (this.IsInternalServerlessRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsInternalServerlessRequest, this.IsInternalServerlessRequest);
                        }
                        if (this.OfferReplaceRURedistribution != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.OfferReplaceRURedistribution, this.OfferReplaceRURedistribution);
                        }
                        if (this.IsCassandraAlterTypeRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest, this.IsCassandraAlterTypeRequest);
                        }
                        if (this.IsMaterializedViewSourceSchemaReplaceBatchRequest != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest, this.IsMaterializedViewSourceSchemaReplaceBatchRequest);
                        }
                        if (this.ForceDatabaseAccountUpdate != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate, this.ForceDatabaseAccountUpdate);
                        }
                        if (this.PriorityLevel != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PriorityLevel, this.PriorityLevel);
                        }
                        if (this.AllowRestoreParamsUpdate != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.AllowRestoreParamsUpdate, this.AllowRestoreParamsUpdate);
                        }
                        if (this.PruneCollectionSchemas != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PruneCollectionSchemas, this.PruneCollectionSchemas);
                        }
                        if (this.PopulateIndexMetricsV2 != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PopulateIndexMetricsV2, this.PopulateIndexMetricsV2);
                        }
                        if (this.IsMigratedFixedCollection != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsMigratedFixedCollection, this.IsMigratedFixedCollection);
                        }
                        if (this.SupportedSerializationFormats != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SupportedSerializationFormats, this.SupportedSerializationFormats);
                        }
                        if (this.UpdateOfferStateToRestorePending != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.UpdateOfferStateToRestorePending, this.UpdateOfferStateToRestorePending);
                        }
                        if (this.SetMasterResourcesDeletionPending != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending, this.SetMasterResourcesDeletionPending);
                        }
                        if (this.HighPriorityForcedBackup != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.HighPriorityForcedBackup, this.HighPriorityForcedBackup);
                        }
                        if (this.OptimisticDirectExecute != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.OptimisticDirectExecute, this.OptimisticDirectExecute);
                        }
                        if (this.PopulateMinGLSNForDocumentOperations != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations, this.PopulateMinGLSNForDocumentOperations);
                        }
                        if (this.PopulateHighestTentativeWriteLLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN, this.PopulateHighestTentativeWriteLLSN);
                        }
                        if (this.TraceParent != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TraceParent, this.TraceParent);
                        }
                        if (this.TraceState != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TraceState, this.TraceState);
                        }
                        if (this.PopulateCapacityType != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PopulateCapacityType, this.PopulateCapacityType);
                        }
                        if (this.IfMatch != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IfMatch, this.IfMatch);
                        }
                        if (this.NoRetryOn449StatusCode != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.NoRetryOn449StatusCode, this.NoRetryOn449StatusCode);
                        }
                        if (this.SkipAdjustThroughputFractionsForOfferReplace != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SkipAdjustThroughputFractionsForOfferReplace, this.SkipAdjustThroughputFractionsForOfferReplace);
                        }
                        if (this.notCommonHeaders != null)
                        {
                            foreach (KeyValuePair<string, string> keyValuePair in this.notCommonHeaders)
                            {
                                this.nameValueCollection.Add(keyValuePair.Key, keyValuePair.Value);
                            }
                        }
                    }
                }
            }

            return this.nameValueCollection;
        }

        public void Remove(string key)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            this.UpdateHelper(
                key: key,
                value: null,
                throwIfAlreadyExists: false,
                ignoreNotCommonHeaders: false);
        }

        public string Get(string key)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            switch (key.Length)
            {
                case 4:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.HttpDate, key))
                    {
                        return this.HttpDate;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.A_IM, key))
                    {
                        return this.A_IM;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.HttpDate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.HttpDate;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.A_IM, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.A_IM;
                    }

                    break;
                case 6:
                    if (string.Equals(HttpConstants.HttpHeaders.Prefer, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.Prefer;
                    }

                    break;
                case 8:
                    if (string.Equals(HttpConstants.HttpHeaders.IfMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IfMatch;
                    }

                    break;
                case 9:
                    if (string.Equals(HttpConstants.HttpHeaders.XDate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.XDate;
                    }

                    break;
                case 10:
                    if (string.Equals(HttpConstants.HttpHeaders.TraceState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TraceState;
                    }

                    break;
                case 11:
                    if (string.Equals(HttpConstants.HttpHeaders.EndId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EndId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.TraceParent, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TraceParent;
                    }

                    break;
                case 12:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Version, key))
                    {
                        return this.Version;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EndEpk, key))
                    {
                        return this.EndEpk;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Version, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.Version;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.EndEpk, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EndEpk;
                    }

                    break;
                case 13:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Authorization, key))
                    {
                        return this.Authorization;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IfNoneMatch, key))
                    {
                        return this.IfNoneMatch;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.StartId, key))
                    {
                        return this.StartId;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Authorization, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.Authorization;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IfNoneMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IfNoneMatch;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.StartId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.StartId;
                    }

                    break;
                case 14:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CanCharge, key))
                    {
                        return this.CanCharge;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.BinaryId, key))
                    {
                        return this.BinaryId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.StartEpk, key))
                    {
                        return this.StartEpk;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SchemaId, key))
                    {
                        return this.SchemaId;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CanCharge, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CanCharge;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.BinaryId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.BinaryId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.StartEpk, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.StartEpk;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.SchemaId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SchemaId;
                    }

                    break;
                case 15:
                    if (string.Equals(HttpConstants.HttpHeaders.TargetLsn, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TargetLsn;
                    }

                    break;
                case 16:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CanThrottle, key))
                    {
                        return this.CanThrottle;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SchemaHash, key))
                    {
                        return this.SchemaHash;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RbacAction, key))
                    {
                        return this.RbacAction;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.NoRetryOn449StatusCode, key))
                    {
                        return this.NoRetryOn449StatusCode;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CanThrottle, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CanThrottle;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.SchemaHash, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SchemaHash;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.RbacAction, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RbacAction;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.NoRetryOn449StatusCode, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.NoRetryOn449StatusCode;
                    }

                    break;
                case 17:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Continuation, key))
                    {
                        return this.Continuation;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.EntityId, key))
                    {
                        return this.EntityId;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.BindReplicaDirective, key))
                    {
                        return this.BindReplicaDirective;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IfModifiedSince, key))
                    {
                        return this.IfModifiedSince;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TransactionId, key))
                    {
                        return this.TransactionId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RbacUserId, key))
                    {
                        return this.RbacUserId;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Continuation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.Continuation;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.EntityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EntityId;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.BindReplicaDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.BindReplicaDirective;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IfModifiedSince, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IfModifiedSince;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.TransactionId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TransactionId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.RbacUserId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RbacUserId;
                    }

                    break;
                case 18:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SessionToken, key))
                    {
                        return this.SessionToken;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsAutoScaleRequest, key))
                    {
                        return this.IsAutoScaleRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ReadFeedKeyType, key))
                    {
                        return this.ReadFeedKeyType;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RbacResource, key))
                    {
                        return this.RbacResource;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SessionToken, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SessionToken;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsAutoScaleRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsAutoScaleRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ReadFeedKeyType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ReadFeedKeyType;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.RbacResource, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RbacResource;
                    }

                    break;
                case 19:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceId, key))
                    {
                        return this.ResourceId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PageSize, key))
                    {
                        return this.PageSize;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RestoreParams, key))
                    {
                        return this.RestoreParams;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TransactionFirstRequest, key))
                    {
                        return this.TransactionFirstRequest;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ResourceId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ResourceId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PageSize, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PageSize;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RestoreParams, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RestoreParams;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.TransactionFirstRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TransactionFirstRequest;
                    }

                    break;
                case 20:
                    if (string.Equals(HttpConstants.HttpHeaders.ProfileRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ProfileRequest;
                    }

                    break;
                case 21:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ShareThroughput, key))
                    {
                        return this.ShareThroughput;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SchemaOwnerRid, key))
                    {
                        return this.SchemaOwnerRid;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TransactionCommit, key))
                    {
                        return this.TransactionCommit;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ShareThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ShareThroughput;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.SchemaOwnerRid, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SchemaOwnerRid;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.TransactionCommit, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TransactionCommit;
                    }

                    break;
                case 22:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsFanoutRequest, key))
                    {
                        return this.IsFanoutRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ConsistencyLevel, key))
                    {
                        return this.ConsistencyLevel;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.GatewaySignature, key))
                    {
                        return this.GatewaySignature;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IsFanoutRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsFanoutRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ConsistencyLevel, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ConsistencyLevel;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.GatewaySignature, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.GatewaySignature;
                    }

                    break;
                case 23:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IndexingDirective, key))
                    {
                        return this.IndexingDirective;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PrimaryMasterKey, key))
                    {
                        return this.PrimaryMasterKey;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsReadOnlyScript, key))
                    {
                        return this.IsReadOnlyScript;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IndexingDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IndexingDirective;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PrimaryMasterKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PrimaryMasterKey;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsReadOnlyScript, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsReadOnlyScript;
                    }

                    break;
                case 24:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionServiceIndex, key))
                    {
                        return this.CollectionServiceIndex;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RemoteStorageType, key))
                    {
                        return this.RemoteStorageType;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsBatchAtomic, key))
                    {
                        return this.IsBatchAtomic;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionServiceIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionServiceIndex;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RemoteStorageType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RemoteStorageType;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsBatchAtomic, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsBatchAtomic;
                    }

                    break;
                case 25:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceSchemaName, key))
                    {
                        return this.ResourceSchemaName;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SecondaryMasterKey, key))
                    {
                        return this.SecondaryMasterKey;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PrimaryReadonlyKey, key))
                    {
                        return this.PrimaryReadonlyKey;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TransportRequestID, key))
                    {
                        return this.TransportRequestID;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsBatchOrdered, key))
                    {
                        return this.IsBatchOrdered;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceTypes, key))
                    {
                        return this.ResourceTypes;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ResourceSchemaName, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ResourceSchemaName;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.SecondaryMasterKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SecondaryMasterKey;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PrimaryReadonlyKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PrimaryReadonlyKey;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.TransportRequestID, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TransportRequestID;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsBatchOrdered, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsBatchOrdered;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ResourceTypes, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ResourceTypes;
                    }

                    break;
                case 26:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionPartitionIndex, key))
                    {
                        return this.CollectionPartitionIndex;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnumerationDirection, key))
                    {
                        return this.EnumerationDirection;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RequestedCollectionType, key))
                    {
                        return this.RequestedCollectionType;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PriorityLevel, key))
                    {
                        return this.PriorityLevel;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionPartitionIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionPartitionIndex;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.EnumerationDirection, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EnumerationDirection;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RequestedCollectionType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RequestedCollectionType;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PriorityLevel, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PriorityLevel;
                    }

                    break;
                case 27:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SecondaryReadonlyKey, key))
                    {
                        return this.SecondaryReadonlyKey;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.FanoutOperationState, key))
                    {
                        return this.FanoutOperationState;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MergeStaticId, key))
                    {
                        return this.MergeStaticId;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SecondaryReadonlyKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SecondaryReadonlyKey;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.FanoutOperationState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.FanoutOperationState;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.MergeStaticId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MergeStaticId;
                    }

                    break;
                case 28:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PartitionKey, key))
                    {
                        return this.PartitionKey;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RestoreMetadataFilter, key))
                    {
                        return this.RestoreMetadataFilter;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TimeToLiveInSeconds, key))
                    {
                        return this.TimeToLiveInSeconds;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.EffectivePartitionKey, key))
                    {
                        return this.EffectivePartitionKey;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UseSystemBudget, key))
                    {
                        return this.UseSystemBudget;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PartitionKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PartitionKey;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.RestoreMetadataFilter, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RestoreMetadataFilter;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.TimeToLiveInSeconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TimeToLiveInSeconds;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.EffectivePartitionKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EffectivePartitionKey;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.UseSystemBudget, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UseSystemBudget;
                    }

                    break;
                case 30:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ResourceTokenExpiry, key))
                    {
                        return this.ResourceTokenExpiry;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PartitionCount, key))
                    {
                        return this.PartitionCount;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionRid, key))
                    {
                        return this.CollectionRid;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PartitionResourceFilter, key))
                    {
                        return this.PartitionResourceFilter;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ExcludeSystemProperties, key))
                    {
                        return this.ExcludeSystemProperties;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest, key))
                    {
                        return this.IsCassandraAlterTypeRequest;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ResourceTokenExpiry, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ResourceTokenExpiry;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PartitionCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PartitionCount;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.CollectionRid, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionRid;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PartitionResourceFilter, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PartitionResourceFilter;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ExcludeSystemProperties, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ExcludeSystemProperties;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsCassandraAlterTypeRequest;
                    }

                    break;
                case 31:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ClientRetryAttemptCount, key))
                    {
                        return this.ClientRetryAttemptCount;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CanOfferReplaceComplete, key))
                    {
                        return this.CanOfferReplaceComplete;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.BinaryPassthroughRequest, key))
                    {
                        return this.BinaryPassthroughRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsClientEncrypted, key))
                    {
                        return this.IsClientEncrypted;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SystemDocumentType, key))
                    {
                        return this.SystemDocumentType;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CollectionTruncate, key))
                    {
                        return this.CollectionTruncate;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ClientRetryAttemptCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ClientRetryAttemptCount;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.CanOfferReplaceComplete, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CanOfferReplaceComplete;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.BinaryPassthroughRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.BinaryPassthroughRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsClientEncrypted, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsClientEncrypted;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.SystemDocumentType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SystemDocumentType;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.CollectionTruncate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionTruncate;
                    }

                    break;
                case 32:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MigrateCollectionDirective, key))
                    {
                        return this.MigrateCollectionDirective;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TargetGlobalCommittedLsn, key))
                    {
                        return this.TargetGlobalCommittedLsn;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ForceQueryScan, key))
                    {
                        return this.ForceQueryScan;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds, key))
                    {
                        return this.MaxPollingIntervalMilliseconds;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateIndexMetrics, key))
                    {
                        return this.PopulateIndexMetrics;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MigrateCollectionDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MigrateCollectionDirective;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.TargetGlobalCommittedLsn, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TargetGlobalCommittedLsn;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ForceQueryScan, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ForceQueryScan;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MaxPollingIntervalMilliseconds;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateIndexMetrics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateIndexMetrics;
                    }

                    break;
                case 33:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnableScanInQuery, key))
                    {
                        return this.EnableScanInQuery;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EmitVerboseTracesInQuery, key))
                    {
                        return this.EmitVerboseTracesInQuery;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateQuotaInfo, key))
                    {
                        return this.PopulateQuotaInfo;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PreserveFullContent, key))
                    {
                        return this.PreserveFullContent;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateLogStoreInfo, key))
                    {
                        return this.PopulateLogStoreInfo;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CorrelatedActivityId, key))
                    {
                        return this.CorrelatedActivityId;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnableScanInQuery, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EnableScanInQuery;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.EmitVerboseTracesInQuery, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EmitVerboseTracesInQuery;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateQuotaInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateQuotaInfo;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PreserveFullContent, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PreserveFullContent;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PopulateLogStoreInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateLogStoreInfo;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.CorrelatedActivityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CorrelatedActivityId;
                    }

                    break;
                case 34:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AllowTentativeWrites, key))
                    {
                        return this.AllowTentativeWrites;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.UseArchivalPartition, key))
                    {
                        return this.UseArchivalPartition;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateCapacityType, key))
                    {
                        return this.PopulateCapacityType;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.AllowTentativeWrites, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.AllowTentativeWrites;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.UseArchivalPartition, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UseArchivalPartition;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PopulateCapacityType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateCapacityType;
                    }

                    break;
                case 35:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PreTriggerInclude, key))
                    {
                        return this.PreTriggerInclude;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PreTriggerExclude, key))
                    {
                        return this.PreTriggerExclude;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PartitionKeyRangeId, key))
                    {
                        return this.PartitionKeyRangeId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.FilterBySchemaResourceId, key))
                    {
                        return this.FilterBySchemaResourceId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier, key))
                    {
                        return this.CollectionRemoteStorageSecurityIdentifier;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest, key))
                    {
                        return this.RemainingTimeInMsOnClientRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ShouldBatchContinueOnError, key))
                    {
                        return this.ShouldBatchContinueOnError;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IntendedCollectionRid, key))
                    {
                        return this.IntendedCollectionRid;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateIndexMetricsV2, key))
                    {
                        return this.PopulateIndexMetricsV2;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PreTriggerInclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PreTriggerInclude;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PreTriggerExclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PreTriggerExclude;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PartitionKeyRangeId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PartitionKeyRangeId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.FilterBySchemaResourceId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.FilterBySchemaResourceId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionRemoteStorageSecurityIdentifier;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RemainingTimeInMsOnClientRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ShouldBatchContinueOnError, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ShouldBatchContinueOnError;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.IntendedCollectionRid, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IntendedCollectionRid;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateIndexMetricsV2, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateIndexMetricsV2;
                    }

                    break;
                case 36:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PostTriggerInclude, key))
                    {
                        return this.PostTriggerInclude;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PostTriggerExclude, key))
                    {
                        return this.PostTriggerExclude;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateQueryMetrics, key))
                    {
                        return this.PopulateQueryMetrics;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsUserRequest, key))
                    {
                        return this.IsUserRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IncludeTentativeWrites, key))
                    {
                        return this.IncludeTentativeWrites;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsRetriedWriteRequest, key))
                    {
                        return this.IsRetriedWriteRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PruneCollectionSchemas, key))
                    {
                        return this.PruneCollectionSchemas;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PostTriggerInclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PostTriggerInclude;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PostTriggerExclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PostTriggerExclude;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateQueryMetrics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateQueryMetrics;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.IsUserRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsUserRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IncludeTentativeWrites, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IncludeTentativeWrites;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.IsRetriedWriteRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsRetriedWriteRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PruneCollectionSchemas, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PruneCollectionSchemas;
                    }

                    break;
                case 37:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnableLogging, key))
                    {
                        return this.EnableLogging;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateResourceCount, key))
                    {
                        return this.PopulateResourceCount;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SDKSupportedCapabilities, key))
                    {
                        return this.SDKSupportedCapabilities;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.BuilderClientIdentifier, key))
                    {
                        return this.BuilderClientIdentifier;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnableLogging, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EnableLogging;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateResourceCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateResourceCount;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.SDKSupportedCapabilities, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SDKSupportedCapabilities;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.BuilderClientIdentifier, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.BuilderClientIdentifier;
                    }

                    break;
                case 38:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MigrateOfferToAutopilot, key))
                    {
                        return this.MigrateOfferToAutopilot;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RetriableWriteRequestId, key))
                    {
                        return this.RetriableWriteRequestId;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SourceCollectionIfMatch, key))
                    {
                        return this.SourceCollectionIfMatch;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UseUserBackgroundBudget, key))
                    {
                        return this.UseUserBackgroundBudget;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MigrateOfferToAutopilot, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MigrateOfferToAutopilot;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RetriableWriteRequestId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RetriableWriteRequestId;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.SourceCollectionIfMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SourceCollectionIfMatch;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.UseUserBackgroundBudget, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UseUserBackgroundBudget;
                    }

                    break;
                case 39:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TruncateMergeLogRequest, key))
                    {
                        return this.TruncateMergeLogRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsInternalServerlessRequest, key))
                    {
                        return this.IsInternalServerlessRequest;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TruncateMergeLogRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TruncateMergeLogRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsInternalServerlessRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsInternalServerlessRequest;
                    }

                    break;
                case 40:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation, key))
                    {
                        return this.EnableDynamicRidRangeAllocation;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UniqueIndexReIndexingState, key))
                    {
                        return this.UniqueIndexReIndexingState;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EnableDynamicRidRangeAllocation;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.UniqueIndexReIndexingState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UniqueIndexReIndexingState;
                    }

                    break;
                case 41:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate, key))
                    {
                        return this.ForceDatabaseAccountUpdate;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.OptimisticDirectExecute, key))
                    {
                        return this.OptimisticDirectExecute;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ForceDatabaseAccountUpdate;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.OptimisticDirectExecute, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OptimisticDirectExecute;
                    }

                    break;
                case 42:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MergeCheckPointGLSN, key))
                    {
                        return this.MergeCheckPointGLSN;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime, key))
                    {
                        return this.ShouldReturnCurrentServerDateTime;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion, key))
                    {
                        return this.ChangeFeedWireFormatVersion;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.MergeCheckPointGLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MergeCheckPointGLSN;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ShouldReturnCurrentServerDateTime;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ChangeFeedWireFormatVersion;
                    }

                    break;
                case 43:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.DisableRUPerMinuteUsage, key))
                    {
                        return this.DisableRUPerMinuteUsage;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulatePartitionStatistics, key))
                    {
                        return this.PopulatePartitionStatistics;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ForceSideBySideIndexMigration, key))
                    {
                        return this.ForceSideBySideIndexMigration;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UniqueIndexNameEncodingMode, key))
                    {
                        return this.UniqueIndexNameEncodingMode;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SupportedSerializationFormats, key))
                    {
                        return this.SupportedSerializationFormats;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.DisableRUPerMinuteUsage, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.DisableRUPerMinuteUsage;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulatePartitionStatistics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulatePartitionStatistics;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ForceSideBySideIndexMigration, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ForceSideBySideIndexMigration;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.UniqueIndexNameEncodingMode, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UniqueIndexNameEncodingMode;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.SupportedSerializationFormats, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SupportedSerializationFormats;
                    }

                    break;
                case 44:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ContentSerializationFormat, key))
                    {
                        return this.ContentSerializationFormat;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId, key))
                    {
                        return this.PopulateOldestActiveSchemaId;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ContentSerializationFormat, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ContentSerializationFormat;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateOldestActiveSchemaId;
                    }

                    break;
                case 45:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch, key))
                    {
                        return this.ChangeFeedStartFullFidelityIfNoneMatch;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SystemRestoreOperation, key))
                    {
                        return this.SystemRestoreOperation;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsThroughputCapRequest, key))
                    {
                        return this.IsThroughputCapRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateByokEncryptionProgress, key))
                    {
                        return this.PopulateByokEncryptionProgress;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ChangeFeedStartFullFidelityIfNoneMatch;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.SystemRestoreOperation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SystemRestoreOperation;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsThroughputCapRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsThroughputCapRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateByokEncryptionProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateByokEncryptionProgress;
                    }

                    break;
                case 46:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MigrateOfferToManualThroughput, key))
                    {
                        return this.MigrateOfferToManualThroughput;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs, key))
                    {
                        return this.SkipRefreshDatabaseAccountConfigs;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsMigratedFixedCollection, key))
                    {
                        return this.IsMigratedFixedCollection;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MigrateOfferToManualThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MigrateOfferToManualThroughput;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SkipRefreshDatabaseAccountConfigs;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsMigratedFixedCollection, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsMigratedFixedCollection;
                    }

                    break;
                case 47:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates, key))
                    {
                        return this.SupportSpatialLegacyCoordinates;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes, key))
                    {
                        return this.CollectionChildResourceNameLimitInBytes;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.AddResourcePropertiesToResponse, key))
                    {
                        return this.AddResourcePropertiesToResponse;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsMaterializedViewBuild, key))
                    {
                        return this.IsMaterializedViewBuild;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SupportSpatialLegacyCoordinates;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionChildResourceNameLimitInBytes;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.AddResourcePropertiesToResponse, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.AddResourcePropertiesToResponse;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsMaterializedViewBuild, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsMaterializedViewBuild;
                    }

                    break;
                case 48:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo, key))
                    {
                        return this.PopulateCollectionThroughputInfo;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics, key))
                    {
                        return this.GetAllPartitionKeyStatistics;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress, key))
                    {
                        return this.PopulateUniqueIndexReIndexProgress;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AllowRestoreParamsUpdate, key))
                    {
                        return this.AllowRestoreParamsUpdate;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.HighPriorityForcedBackup, key))
                    {
                        return this.HighPriorityForcedBackup;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateCollectionThroughputInfo;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.GetAllPartitionKeyStatistics;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateUniqueIndexReIndexProgress;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.AllowRestoreParamsUpdate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.AllowRestoreParamsUpdate;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.HighPriorityForcedBackup, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.HighPriorityForcedBackup;
                    }

                    break;
                case 49:
                    if (string.Equals(HttpConstants.HttpHeaders.UsePolygonsSmallerThanAHemisphere, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UsePolygonsSmallerThanAHemisphere;
                    }

                    break;
                case 50:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB, key))
                    {
                        return this.ResponseContinuationTokenLimitInKB;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress, key))
                    {
                        return this.PopulateAnalyticalMigrationProgress;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.UpdateOfferStateToPending, key))
                    {
                        return this.UpdateOfferStateToPending;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ResponseContinuationTokenLimitInKB;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateAnalyticalMigrationProgress;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.UpdateOfferStateToPending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UpdateOfferStateToPending;
                    }

                    break;
                case 51:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy, key))
                    {
                        return this.EnableLowPrecisionOrderBy;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp, key))
                    {
                        return this.RetriableWriteRequestStartTimestamp;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.EnableLowPrecisionOrderBy;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RetriableWriteRequestStartTimestamp;
                    }

                    break;
                case 52:
                    if (string.Equals(HttpConstants.HttpHeaders.OfferReplaceRURedistribution, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OfferReplaceRURedistribution;
                    }

                    break;
                case 53:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest, key))
                    {
                        return this.IsRUPerGBEnforcementRequest;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest, key))
                    {
                        return this.IsOfferStorageRefreshRequest;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations, key))
                    {
                        return this.PopulateMinGLSNForDocumentOperations;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsRUPerGBEnforcementRequest;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsOfferStorageRefreshRequest;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateMinGLSNForDocumentOperations;
                    }

                    break;
                case 54:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo, key))
                    {
                        return this.IncludePhysicalPartitionThroughputInfo;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest, key))
                    {
                        return this.IsMaterializedViewSourceSchemaReplaceBatchRequest;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IncludePhysicalPartitionThroughputInfo;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsMaterializedViewSourceSchemaReplaceBatchRequest;
                    }

                    break;
                case 55:
                    if (string.Equals(HttpConstants.HttpHeaders.UpdateOfferStateToRestorePending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UpdateOfferStateToRestorePending;
                    }

                    break;
                case 56:
                    if (string.Equals(WFConstants.BackendHeaders.CollectionChildResourceContentLimitInKB, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionChildResourceContentLimitInKB;
                    }

                    break;
                case 57:
                    if (string.Equals(WFConstants.BackendHeaders.PopulateUnflushedMergeEntryCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateUnflushedMergeEntryCount;
                    }

                    break;
                case 58:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput, key))
                    {
                        return this.IgnoreSystemLoweringMaxThroughput;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending, key))
                    {
                        return this.SetMasterResourcesDeletionPending;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN, key))
                    {
                        return this.PopulateHighestTentativeWriteLLSN;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IgnoreSystemLoweringMaxThroughput;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SetMasterResourcesDeletionPending;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PopulateHighestTentativeWriteLLSN;
                    }

                    break;
                case 59:
                    if (string.Equals(HttpConstants.HttpHeaders.UpdateMaxThroughputEverProvisioned, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UpdateMaxThroughputEverProvisioned;
                    }

                    break;
                case 61:
                    if (string.Equals(HttpConstants.HttpHeaders.IsServerlessStorageRefreshRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsServerlessStorageRefreshRequest;
                    }

                    break;
                case 62:
                    if (string.Equals(HttpConstants.HttpHeaders.SkipAdjustThroughputFractionsForOfferReplace, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SkipAdjustThroughputFractionsForOfferReplace;
                    }

                    break;
                default:
                    break;
            }

            if (this.notCommonHeaders != null
                && this.notCommonHeaders.TryGetValue(key, out string value))
            {
                return value;
            }

            return null;
        }

        public void Add(string key, string value)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            this.UpdateHelper(
                key: key,
                value: value,
                throwIfAlreadyExists: true,
                ignoreNotCommonHeaders: false);
        }

        public void Set(string key, string value)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            this.UpdateHelper(
                key: key,
                value: value,
                throwIfAlreadyExists: false,
                ignoreNotCommonHeaders: false);
        }

        public void UpdateHelper(
            string key,
            string value,
            bool throwIfAlreadyExists,
            bool ignoreNotCommonHeaders)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            switch (key.Length)
            {
                case 4:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.HttpDate, key))
                    {
                        if (throwIfAlreadyExists && this.HttpDate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HttpDate = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.A_IM, key))
                    {
                        if (throwIfAlreadyExists && this.A_IM != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.A_IM = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.HttpDate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.HttpDate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HttpDate = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.A_IM, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.A_IM != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.A_IM = value;
                        return;
                    }
                    break;
                case 6:
                    if (string.Equals(HttpConstants.HttpHeaders.Prefer, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.Prefer != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Prefer = value;
                        return;
                    }
                    break;
                case 8:
                    if (string.Equals(HttpConstants.HttpHeaders.IfMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IfMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IfMatch = value;
                        return;
                    }
                    break;
                case 9:
                    if (string.Equals(HttpConstants.HttpHeaders.XDate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.XDate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.XDate = value;
                        return;
                    }
                    break;
                case 10:
                    if (string.Equals(HttpConstants.HttpHeaders.TraceState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TraceState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TraceState = value;
                        return;
                    }
                    break;
                case 11:
                    if (string.Equals(HttpConstants.HttpHeaders.EndId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EndId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EndId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TraceParent, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TraceParent != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TraceParent = value;
                        return;
                    }
                    break;
                case 12:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Version, key))
                    {
                        if (throwIfAlreadyExists && this.Version != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Version = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EndEpk, key))
                    {
                        if (throwIfAlreadyExists && this.EndEpk != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EndEpk = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Version, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.Version != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Version = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EndEpk, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EndEpk != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EndEpk = value;
                        return;
                    }
                    break;
                case 13:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Authorization, key))
                    {
                        if (throwIfAlreadyExists && this.Authorization != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Authorization = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IfNoneMatch, key))
                    {
                        if (throwIfAlreadyExists && this.IfNoneMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IfNoneMatch = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.StartId, key))
                    {
                        if (throwIfAlreadyExists && this.StartId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.StartId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Authorization, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.Authorization != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Authorization = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IfNoneMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IfNoneMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IfNoneMatch = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.StartId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.StartId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.StartId = value;
                        return;
                    }
                    break;
                case 14:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CanCharge, key))
                    {
                        if (throwIfAlreadyExists && this.CanCharge != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CanCharge = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.BinaryId, key))
                    {
                        if (throwIfAlreadyExists && this.BinaryId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BinaryId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.StartEpk, key))
                    {
                        if (throwIfAlreadyExists && this.StartEpk != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.StartEpk = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SchemaId, key))
                    {
                        if (throwIfAlreadyExists && this.SchemaId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CanCharge, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CanCharge != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CanCharge = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.BinaryId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.BinaryId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BinaryId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.StartEpk, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.StartEpk != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.StartEpk = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SchemaId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SchemaId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaId = value;
                        return;
                    }
                    break;
                case 15:
                    if (string.Equals(HttpConstants.HttpHeaders.TargetLsn, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TargetLsn != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TargetLsn = value;
                        return;
                    }
                    break;
                case 16:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CanThrottle, key))
                    {
                        if (throwIfAlreadyExists && this.CanThrottle != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CanThrottle = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SchemaHash, key))
                    {
                        if (throwIfAlreadyExists && this.SchemaHash != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaHash = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RbacAction, key))
                    {
                        if (throwIfAlreadyExists && this.RbacAction != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RbacAction = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.NoRetryOn449StatusCode, key))
                    {
                        if (throwIfAlreadyExists && this.NoRetryOn449StatusCode != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.NoRetryOn449StatusCode = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CanThrottle, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CanThrottle != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CanThrottle = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SchemaHash, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SchemaHash != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaHash = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RbacAction, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RbacAction != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RbacAction = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.NoRetryOn449StatusCode, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.NoRetryOn449StatusCode != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.NoRetryOn449StatusCode = value;
                        return;
                    }
                    break;
                case 17:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Continuation, key))
                    {
                        if (throwIfAlreadyExists && this.Continuation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Continuation = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.EntityId, key))
                    {
                        if (throwIfAlreadyExists && this.EntityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EntityId = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.BindReplicaDirective, key))
                    {
                        if (throwIfAlreadyExists && this.BindReplicaDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BindReplicaDirective = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IfModifiedSince, key))
                    {
                        if (throwIfAlreadyExists && this.IfModifiedSince != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IfModifiedSince = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TransactionId, key))
                    {
                        if (throwIfAlreadyExists && this.TransactionId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransactionId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RbacUserId, key))
                    {
                        if (throwIfAlreadyExists && this.RbacUserId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RbacUserId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Continuation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.Continuation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Continuation = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.EntityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EntityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EntityId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.BindReplicaDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.BindReplicaDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BindReplicaDirective = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IfModifiedSince, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IfModifiedSince != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IfModifiedSince = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.TransactionId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TransactionId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransactionId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RbacUserId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RbacUserId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RbacUserId = value;
                        return;
                    }
                    break;
                case 18:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SessionToken, key))
                    {
                        if (throwIfAlreadyExists && this.SessionToken != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SessionToken = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsAutoScaleRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsAutoScaleRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsAutoScaleRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ReadFeedKeyType, key))
                    {
                        if (throwIfAlreadyExists && this.ReadFeedKeyType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReadFeedKeyType = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RbacResource, key))
                    {
                        if (throwIfAlreadyExists && this.RbacResource != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RbacResource = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SessionToken, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SessionToken != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SessionToken = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsAutoScaleRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsAutoScaleRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsAutoScaleRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ReadFeedKeyType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ReadFeedKeyType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReadFeedKeyType = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RbacResource, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RbacResource != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RbacResource = value;
                        return;
                    }
                    break;
                case 19:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceId, key))
                    {
                        if (throwIfAlreadyExists && this.ResourceId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PageSize, key))
                    {
                        if (throwIfAlreadyExists && this.PageSize != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PageSize = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RestoreParams, key))
                    {
                        if (throwIfAlreadyExists && this.RestoreParams != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RestoreParams = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TransactionFirstRequest, key))
                    {
                        if (throwIfAlreadyExists && this.TransactionFirstRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransactionFirstRequest = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ResourceId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ResourceId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PageSize, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PageSize != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PageSize = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RestoreParams, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RestoreParams != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RestoreParams = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.TransactionFirstRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TransactionFirstRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransactionFirstRequest = value;
                        return;
                    }
                    break;
                case 20:
                    if (string.Equals(HttpConstants.HttpHeaders.ProfileRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ProfileRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ProfileRequest = value;
                        return;
                    }
                    break;
                case 21:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ShareThroughput, key))
                    {
                        if (throwIfAlreadyExists && this.ShareThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShareThroughput = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SchemaOwnerRid, key))
                    {
                        if (throwIfAlreadyExists && this.SchemaOwnerRid != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaOwnerRid = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TransactionCommit, key))
                    {
                        if (throwIfAlreadyExists && this.TransactionCommit != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransactionCommit = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ShareThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ShareThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShareThroughput = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SchemaOwnerRid, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SchemaOwnerRid != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaOwnerRid = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.TransactionCommit, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TransactionCommit != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransactionCommit = value;
                        return;
                    }
                    break;
                case 22:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsFanoutRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsFanoutRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsFanoutRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ConsistencyLevel, key))
                    {
                        if (throwIfAlreadyExists && this.ConsistencyLevel != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ConsistencyLevel = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.GatewaySignature, key))
                    {
                        if (throwIfAlreadyExists && this.GatewaySignature != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.GatewaySignature = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IsFanoutRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsFanoutRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsFanoutRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ConsistencyLevel, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ConsistencyLevel != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ConsistencyLevel = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.GatewaySignature, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.GatewaySignature != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.GatewaySignature = value;
                        return;
                    }
                    break;
                case 23:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IndexingDirective, key))
                    {
                        if (throwIfAlreadyExists && this.IndexingDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IndexingDirective = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PrimaryMasterKey, key))
                    {
                        if (throwIfAlreadyExists && this.PrimaryMasterKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PrimaryMasterKey = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsReadOnlyScript, key))
                    {
                        if (throwIfAlreadyExists && this.IsReadOnlyScript != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsReadOnlyScript = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IndexingDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IndexingDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IndexingDirective = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PrimaryMasterKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PrimaryMasterKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PrimaryMasterKey = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsReadOnlyScript, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsReadOnlyScript != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsReadOnlyScript = value;
                        return;
                    }
                    break;
                case 24:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionServiceIndex, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionServiceIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionServiceIndex = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RemoteStorageType, key))
                    {
                        if (throwIfAlreadyExists && this.RemoteStorageType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RemoteStorageType = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsBatchAtomic, key))
                    {
                        if (throwIfAlreadyExists && this.IsBatchAtomic != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsBatchAtomic = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionServiceIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionServiceIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionServiceIndex = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RemoteStorageType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RemoteStorageType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RemoteStorageType = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsBatchAtomic, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsBatchAtomic != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsBatchAtomic = value;
                        return;
                    }
                    break;
                case 25:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceSchemaName, key))
                    {
                        if (throwIfAlreadyExists && this.ResourceSchemaName != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceSchemaName = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SecondaryMasterKey, key))
                    {
                        if (throwIfAlreadyExists && this.SecondaryMasterKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SecondaryMasterKey = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PrimaryReadonlyKey, key))
                    {
                        if (throwIfAlreadyExists && this.PrimaryReadonlyKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PrimaryReadonlyKey = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TransportRequestID, key))
                    {
                        if (throwIfAlreadyExists && this.TransportRequestID != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransportRequestID = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsBatchOrdered, key))
                    {
                        if (throwIfAlreadyExists && this.IsBatchOrdered != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsBatchOrdered = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceTypes, key))
                    {
                        if (throwIfAlreadyExists && this.ResourceTypes != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceTypes = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ResourceSchemaName, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ResourceSchemaName != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceSchemaName = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SecondaryMasterKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SecondaryMasterKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SecondaryMasterKey = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PrimaryReadonlyKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PrimaryReadonlyKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PrimaryReadonlyKey = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TransportRequestID, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TransportRequestID != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransportRequestID = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsBatchOrdered, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsBatchOrdered != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsBatchOrdered = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ResourceTypes, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ResourceTypes != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceTypes = value;
                        return;
                    }
                    break;
                case 26:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionPartitionIndex, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionPartitionIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionPartitionIndex = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnumerationDirection, key))
                    {
                        if (throwIfAlreadyExists && this.EnumerationDirection != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnumerationDirection = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RequestedCollectionType, key))
                    {
                        if (throwIfAlreadyExists && this.RequestedCollectionType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequestedCollectionType = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PriorityLevel, key))
                    {
                        if (throwIfAlreadyExists && this.PriorityLevel != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PriorityLevel = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionPartitionIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionPartitionIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionPartitionIndex = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnumerationDirection, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EnumerationDirection != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnumerationDirection = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RequestedCollectionType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RequestedCollectionType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequestedCollectionType = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PriorityLevel, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PriorityLevel != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PriorityLevel = value;
                        return;
                    }
                    break;
                case 27:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SecondaryReadonlyKey, key))
                    {
                        if (throwIfAlreadyExists && this.SecondaryReadonlyKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SecondaryReadonlyKey = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.FanoutOperationState, key))
                    {
                        if (throwIfAlreadyExists && this.FanoutOperationState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.FanoutOperationState = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MergeStaticId, key))
                    {
                        if (throwIfAlreadyExists && this.MergeStaticId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MergeStaticId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SecondaryReadonlyKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SecondaryReadonlyKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SecondaryReadonlyKey = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.FanoutOperationState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.FanoutOperationState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.FanoutOperationState = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MergeStaticId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MergeStaticId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MergeStaticId = value;
                        return;
                    }
                    break;
                case 28:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PartitionKey, key))
                    {
                        if (throwIfAlreadyExists && this.PartitionKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionKey = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RestoreMetadataFilter, key))
                    {
                        if (throwIfAlreadyExists && this.RestoreMetadataFilter != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RestoreMetadataFilter = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.TimeToLiveInSeconds, key))
                    {
                        if (throwIfAlreadyExists && this.TimeToLiveInSeconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TimeToLiveInSeconds = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.EffectivePartitionKey, key))
                    {
                        if (throwIfAlreadyExists && this.EffectivePartitionKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EffectivePartitionKey = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UseSystemBudget, key))
                    {
                        if (throwIfAlreadyExists && this.UseSystemBudget != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UseSystemBudget = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PartitionKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PartitionKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionKey = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RestoreMetadataFilter, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RestoreMetadataFilter != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RestoreMetadataFilter = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.TimeToLiveInSeconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TimeToLiveInSeconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TimeToLiveInSeconds = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.EffectivePartitionKey, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EffectivePartitionKey != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EffectivePartitionKey = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.UseSystemBudget, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UseSystemBudget != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UseSystemBudget = value;
                        return;
                    }
                    break;
                case 30:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ResourceTokenExpiry, key))
                    {
                        if (throwIfAlreadyExists && this.ResourceTokenExpiry != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceTokenExpiry = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PartitionCount, key))
                    {
                        if (throwIfAlreadyExists && this.PartitionCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionCount = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionRid, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionRid != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionRid = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PartitionResourceFilter, key))
                    {
                        if (throwIfAlreadyExists && this.PartitionResourceFilter != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionResourceFilter = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ExcludeSystemProperties, key))
                    {
                        if (throwIfAlreadyExists && this.ExcludeSystemProperties != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ExcludeSystemProperties = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsCassandraAlterTypeRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsCassandraAlterTypeRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ResourceTokenExpiry, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ResourceTokenExpiry != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceTokenExpiry = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PartitionCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PartitionCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionCount = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionRid, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionRid != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionRid = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PartitionResourceFilter, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PartitionResourceFilter != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionResourceFilter = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ExcludeSystemProperties, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ExcludeSystemProperties != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ExcludeSystemProperties = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsCassandraAlterTypeRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsCassandraAlterTypeRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsCassandraAlterTypeRequest = value;
                        return;
                    }
                    break;
                case 31:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ClientRetryAttemptCount, key))
                    {
                        if (throwIfAlreadyExists && this.ClientRetryAttemptCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ClientRetryAttemptCount = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CanOfferReplaceComplete, key))
                    {
                        if (throwIfAlreadyExists && this.CanOfferReplaceComplete != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CanOfferReplaceComplete = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.BinaryPassthroughRequest, key))
                    {
                        if (throwIfAlreadyExists && this.BinaryPassthroughRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BinaryPassthroughRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsClientEncrypted, key))
                    {
                        if (throwIfAlreadyExists && this.IsClientEncrypted != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsClientEncrypted = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SystemDocumentType, key))
                    {
                        if (throwIfAlreadyExists && this.SystemDocumentType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SystemDocumentType = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CollectionTruncate, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionTruncate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionTruncate = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ClientRetryAttemptCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ClientRetryAttemptCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ClientRetryAttemptCount = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CanOfferReplaceComplete, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CanOfferReplaceComplete != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CanOfferReplaceComplete = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.BinaryPassthroughRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.BinaryPassthroughRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BinaryPassthroughRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsClientEncrypted, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsClientEncrypted != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsClientEncrypted = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SystemDocumentType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SystemDocumentType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SystemDocumentType = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CollectionTruncate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionTruncate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionTruncate = value;
                        return;
                    }
                    break;
                case 32:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MigrateCollectionDirective, key))
                    {
                        if (throwIfAlreadyExists && this.MigrateCollectionDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MigrateCollectionDirective = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TargetGlobalCommittedLsn, key))
                    {
                        if (throwIfAlreadyExists && this.TargetGlobalCommittedLsn != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TargetGlobalCommittedLsn = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ForceQueryScan, key))
                    {
                        if (throwIfAlreadyExists && this.ForceQueryScan != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ForceQueryScan = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds, key))
                    {
                        if (throwIfAlreadyExists && this.MaxPollingIntervalMilliseconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MaxPollingIntervalMilliseconds = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateIndexMetrics, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateIndexMetrics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateIndexMetrics = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MigrateCollectionDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MigrateCollectionDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MigrateCollectionDirective = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TargetGlobalCommittedLsn, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TargetGlobalCommittedLsn != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TargetGlobalCommittedLsn = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ForceQueryScan, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ForceQueryScan != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ForceQueryScan = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MaxPollingIntervalMilliseconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MaxPollingIntervalMilliseconds = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateIndexMetrics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateIndexMetrics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateIndexMetrics = value;
                        return;
                    }
                    break;
                case 33:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnableScanInQuery, key))
                    {
                        if (throwIfAlreadyExists && this.EnableScanInQuery != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableScanInQuery = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EmitVerboseTracesInQuery, key))
                    {
                        if (throwIfAlreadyExists && this.EmitVerboseTracesInQuery != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EmitVerboseTracesInQuery = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateQuotaInfo, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateQuotaInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateQuotaInfo = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PreserveFullContent, key))
                    {
                        if (throwIfAlreadyExists && this.PreserveFullContent != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PreserveFullContent = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateLogStoreInfo, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateLogStoreInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateLogStoreInfo = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CorrelatedActivityId, key))
                    {
                        if (throwIfAlreadyExists && this.CorrelatedActivityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CorrelatedActivityId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnableScanInQuery, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EnableScanInQuery != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableScanInQuery = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EmitVerboseTracesInQuery, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EmitVerboseTracesInQuery != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EmitVerboseTracesInQuery = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateQuotaInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateQuotaInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateQuotaInfo = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PreserveFullContent, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PreserveFullContent != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PreserveFullContent = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PopulateLogStoreInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateLogStoreInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateLogStoreInfo = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CorrelatedActivityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CorrelatedActivityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CorrelatedActivityId = value;
                        return;
                    }
                    break;
                case 34:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AllowTentativeWrites, key))
                    {
                        if (throwIfAlreadyExists && this.AllowTentativeWrites != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AllowTentativeWrites = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.UseArchivalPartition, key))
                    {
                        if (throwIfAlreadyExists && this.UseArchivalPartition != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UseArchivalPartition = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateCapacityType, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateCapacityType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateCapacityType = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.AllowTentativeWrites, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.AllowTentativeWrites != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AllowTentativeWrites = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.UseArchivalPartition, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UseArchivalPartition != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UseArchivalPartition = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PopulateCapacityType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateCapacityType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateCapacityType = value;
                        return;
                    }
                    break;
                case 35:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PreTriggerInclude, key))
                    {
                        if (throwIfAlreadyExists && this.PreTriggerInclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PreTriggerInclude = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PreTriggerExclude, key))
                    {
                        if (throwIfAlreadyExists && this.PreTriggerExclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PreTriggerExclude = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PartitionKeyRangeId, key))
                    {
                        if (throwIfAlreadyExists && this.PartitionKeyRangeId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionKeyRangeId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.FilterBySchemaResourceId, key))
                    {
                        if (throwIfAlreadyExists && this.FilterBySchemaResourceId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.FilterBySchemaResourceId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionRemoteStorageSecurityIdentifier != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionRemoteStorageSecurityIdentifier = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest, key))
                    {
                        if (throwIfAlreadyExists && this.RemainingTimeInMsOnClientRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RemainingTimeInMsOnClientRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ShouldBatchContinueOnError, key))
                    {
                        if (throwIfAlreadyExists && this.ShouldBatchContinueOnError != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShouldBatchContinueOnError = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IntendedCollectionRid, key))
                    {
                        if (throwIfAlreadyExists && this.IntendedCollectionRid != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IntendedCollectionRid = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateIndexMetricsV2, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateIndexMetricsV2 != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateIndexMetricsV2 = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PreTriggerInclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PreTriggerInclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PreTriggerInclude = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PreTriggerExclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PreTriggerExclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PreTriggerExclude = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PartitionKeyRangeId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PartitionKeyRangeId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionKeyRangeId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.FilterBySchemaResourceId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.FilterBySchemaResourceId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.FilterBySchemaResourceId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CollectionRemoteStorageSecurityIdentifier, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionRemoteStorageSecurityIdentifier != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionRemoteStorageSecurityIdentifier = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RemainingTimeInMsOnClientRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RemainingTimeInMsOnClientRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ShouldBatchContinueOnError, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ShouldBatchContinueOnError != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShouldBatchContinueOnError = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IntendedCollectionRid, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IntendedCollectionRid != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IntendedCollectionRid = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateIndexMetricsV2, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateIndexMetricsV2 != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateIndexMetricsV2 = value;
                        return;
                    }
                    break;
                case 36:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PostTriggerInclude, key))
                    {
                        if (throwIfAlreadyExists && this.PostTriggerInclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PostTriggerInclude = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PostTriggerExclude, key))
                    {
                        if (throwIfAlreadyExists && this.PostTriggerExclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PostTriggerExclude = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateQueryMetrics, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateQueryMetrics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateQueryMetrics = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsUserRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsUserRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsUserRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IncludeTentativeWrites, key))
                    {
                        if (throwIfAlreadyExists && this.IncludeTentativeWrites != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IncludeTentativeWrites = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsRetriedWriteRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsRetriedWriteRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsRetriedWriteRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PruneCollectionSchemas, key))
                    {
                        if (throwIfAlreadyExists && this.PruneCollectionSchemas != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PruneCollectionSchemas = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PostTriggerInclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PostTriggerInclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PostTriggerInclude = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PostTriggerExclude, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PostTriggerExclude != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PostTriggerExclude = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateQueryMetrics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateQueryMetrics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateQueryMetrics = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IsUserRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsUserRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsUserRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IncludeTentativeWrites, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IncludeTentativeWrites != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IncludeTentativeWrites = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IsRetriedWriteRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsRetriedWriteRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsRetriedWriteRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PruneCollectionSchemas, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PruneCollectionSchemas != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PruneCollectionSchemas = value;
                        return;
                    }
                    break;
                case 37:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnableLogging, key))
                    {
                        if (throwIfAlreadyExists && this.EnableLogging != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableLogging = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateResourceCount, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateResourceCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateResourceCount = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SDKSupportedCapabilities, key))
                    {
                        if (throwIfAlreadyExists && this.SDKSupportedCapabilities != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SDKSupportedCapabilities = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.BuilderClientIdentifier, key))
                    {
                        if (throwIfAlreadyExists && this.BuilderClientIdentifier != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BuilderClientIdentifier = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnableLogging, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EnableLogging != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableLogging = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateResourceCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateResourceCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateResourceCount = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SDKSupportedCapabilities, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SDKSupportedCapabilities != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SDKSupportedCapabilities = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.BuilderClientIdentifier, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.BuilderClientIdentifier != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BuilderClientIdentifier = value;
                        return;
                    }
                    break;
                case 38:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MigrateOfferToAutopilot, key))
                    {
                        if (throwIfAlreadyExists && this.MigrateOfferToAutopilot != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MigrateOfferToAutopilot = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RetriableWriteRequestId, key))
                    {
                        if (throwIfAlreadyExists && this.RetriableWriteRequestId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RetriableWriteRequestId = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SourceCollectionIfMatch, key))
                    {
                        if (throwIfAlreadyExists && this.SourceCollectionIfMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SourceCollectionIfMatch = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UseUserBackgroundBudget, key))
                    {
                        if (throwIfAlreadyExists && this.UseUserBackgroundBudget != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UseUserBackgroundBudget = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MigrateOfferToAutopilot, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MigrateOfferToAutopilot != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MigrateOfferToAutopilot = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RetriableWriteRequestId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RetriableWriteRequestId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RetriableWriteRequestId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SourceCollectionIfMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SourceCollectionIfMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SourceCollectionIfMatch = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.UseUserBackgroundBudget, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UseUserBackgroundBudget != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UseUserBackgroundBudget = value;
                        return;
                    }
                    break;
                case 39:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TruncateMergeLogRequest, key))
                    {
                        if (throwIfAlreadyExists && this.TruncateMergeLogRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TruncateMergeLogRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsInternalServerlessRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsInternalServerlessRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsInternalServerlessRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TruncateMergeLogRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TruncateMergeLogRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TruncateMergeLogRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsInternalServerlessRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsInternalServerlessRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsInternalServerlessRequest = value;
                        return;
                    }
                    break;
                case 40:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation, key))
                    {
                        if (throwIfAlreadyExists && this.EnableDynamicRidRangeAllocation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableDynamicRidRangeAllocation = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UniqueIndexReIndexingState, key))
                    {
                        if (throwIfAlreadyExists && this.UniqueIndexReIndexingState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UniqueIndexReIndexingState = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EnableDynamicRidRangeAllocation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableDynamicRidRangeAllocation = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.UniqueIndexReIndexingState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UniqueIndexReIndexingState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UniqueIndexReIndexingState = value;
                        return;
                    }
                    break;
                case 41:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate, key))
                    {
                        if (throwIfAlreadyExists && this.ForceDatabaseAccountUpdate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ForceDatabaseAccountUpdate = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.OptimisticDirectExecute, key))
                    {
                        if (throwIfAlreadyExists && this.OptimisticDirectExecute != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OptimisticDirectExecute = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ForceDatabaseAccountUpdate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ForceDatabaseAccountUpdate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ForceDatabaseAccountUpdate = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.OptimisticDirectExecute, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OptimisticDirectExecute != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OptimisticDirectExecute = value;
                        return;
                    }
                    break;
                case 42:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MergeCheckPointGLSN, key))
                    {
                        if (throwIfAlreadyExists && this.MergeCheckPointGLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MergeCheckPointGLSN = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime, key))
                    {
                        if (throwIfAlreadyExists && this.ShouldReturnCurrentServerDateTime != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShouldReturnCurrentServerDateTime = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion, key))
                    {
                        if (throwIfAlreadyExists && this.ChangeFeedWireFormatVersion != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ChangeFeedWireFormatVersion = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.MergeCheckPointGLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MergeCheckPointGLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MergeCheckPointGLSN = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ShouldReturnCurrentServerDateTime, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ShouldReturnCurrentServerDateTime != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShouldReturnCurrentServerDateTime = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ChangeFeedWireFormatVersion, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ChangeFeedWireFormatVersion != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ChangeFeedWireFormatVersion = value;
                        return;
                    }
                    break;
                case 43:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.DisableRUPerMinuteUsage, key))
                    {
                        if (throwIfAlreadyExists && this.DisableRUPerMinuteUsage != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.DisableRUPerMinuteUsage = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulatePartitionStatistics, key))
                    {
                        if (throwIfAlreadyExists && this.PopulatePartitionStatistics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulatePartitionStatistics = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ForceSideBySideIndexMigration, key))
                    {
                        if (throwIfAlreadyExists && this.ForceSideBySideIndexMigration != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ForceSideBySideIndexMigration = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UniqueIndexNameEncodingMode, key))
                    {
                        if (throwIfAlreadyExists && this.UniqueIndexNameEncodingMode != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UniqueIndexNameEncodingMode = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SupportedSerializationFormats, key))
                    {
                        if (throwIfAlreadyExists && this.SupportedSerializationFormats != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SupportedSerializationFormats = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.DisableRUPerMinuteUsage, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.DisableRUPerMinuteUsage != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.DisableRUPerMinuteUsage = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulatePartitionStatistics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulatePartitionStatistics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulatePartitionStatistics = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ForceSideBySideIndexMigration, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ForceSideBySideIndexMigration != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ForceSideBySideIndexMigration = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.UniqueIndexNameEncodingMode, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UniqueIndexNameEncodingMode != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UniqueIndexNameEncodingMode = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SupportedSerializationFormats, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SupportedSerializationFormats != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SupportedSerializationFormats = value;
                        return;
                    }
                    break;
                case 44:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ContentSerializationFormat, key))
                    {
                        if (throwIfAlreadyExists && this.ContentSerializationFormat != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ContentSerializationFormat = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateOldestActiveSchemaId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateOldestActiveSchemaId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ContentSerializationFormat, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ContentSerializationFormat != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ContentSerializationFormat = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateOldestActiveSchemaId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateOldestActiveSchemaId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateOldestActiveSchemaId = value;
                        return;
                    }
                    break;
                case 45:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch, key))
                    {
                        if (throwIfAlreadyExists && this.ChangeFeedStartFullFidelityIfNoneMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ChangeFeedStartFullFidelityIfNoneMatch = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SystemRestoreOperation, key))
                    {
                        if (throwIfAlreadyExists && this.SystemRestoreOperation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SystemRestoreOperation = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsThroughputCapRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsThroughputCapRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsThroughputCapRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateByokEncryptionProgress, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateByokEncryptionProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateByokEncryptionProgress = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ChangeFeedStartFullFidelityIfNoneMatch != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ChangeFeedStartFullFidelityIfNoneMatch = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SystemRestoreOperation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SystemRestoreOperation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SystemRestoreOperation = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsThroughputCapRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsThroughputCapRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsThroughputCapRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateByokEncryptionProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateByokEncryptionProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateByokEncryptionProgress = value;
                        return;
                    }
                    break;
                case 46:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MigrateOfferToManualThroughput, key))
                    {
                        if (throwIfAlreadyExists && this.MigrateOfferToManualThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MigrateOfferToManualThroughput = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs, key))
                    {
                        if (throwIfAlreadyExists && this.SkipRefreshDatabaseAccountConfigs != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SkipRefreshDatabaseAccountConfigs = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsMigratedFixedCollection, key))
                    {
                        if (throwIfAlreadyExists && this.IsMigratedFixedCollection != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsMigratedFixedCollection = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MigrateOfferToManualThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MigrateOfferToManualThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MigrateOfferToManualThroughput = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SkipRefreshDatabaseAccountConfigs, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SkipRefreshDatabaseAccountConfigs != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SkipRefreshDatabaseAccountConfigs = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsMigratedFixedCollection, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsMigratedFixedCollection != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsMigratedFixedCollection = value;
                        return;
                    }
                    break;
                case 47:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates, key))
                    {
                        if (throwIfAlreadyExists && this.SupportSpatialLegacyCoordinates != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SupportSpatialLegacyCoordinates = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionChildResourceNameLimitInBytes != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionChildResourceNameLimitInBytes = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.AddResourcePropertiesToResponse, key))
                    {
                        if (throwIfAlreadyExists && this.AddResourcePropertiesToResponse != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AddResourcePropertiesToResponse = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsMaterializedViewBuild, key))
                    {
                        if (throwIfAlreadyExists && this.IsMaterializedViewBuild != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsMaterializedViewBuild = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SupportSpatialLegacyCoordinates != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SupportSpatialLegacyCoordinates = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionChildResourceNameLimitInBytes != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionChildResourceNameLimitInBytes = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.AddResourcePropertiesToResponse, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.AddResourcePropertiesToResponse != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AddResourcePropertiesToResponse = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsMaterializedViewBuild, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsMaterializedViewBuild != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsMaterializedViewBuild = value;
                        return;
                    }
                    break;
                case 48:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateCollectionThroughputInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateCollectionThroughputInfo = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics, key))
                    {
                        if (throwIfAlreadyExists && this.GetAllPartitionKeyStatistics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.GetAllPartitionKeyStatistics = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateUniqueIndexReIndexProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateUniqueIndexReIndexProgress = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AllowRestoreParamsUpdate, key))
                    {
                        if (throwIfAlreadyExists && this.AllowRestoreParamsUpdate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AllowRestoreParamsUpdate = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.HighPriorityForcedBackup, key))
                    {
                        if (throwIfAlreadyExists && this.HighPriorityForcedBackup != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HighPriorityForcedBackup = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateCollectionThroughputInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateCollectionThroughputInfo = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.GetAllPartitionKeyStatistics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.GetAllPartitionKeyStatistics = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateUniqueIndexReIndexProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateUniqueIndexReIndexProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateUniqueIndexReIndexProgress = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.AllowRestoreParamsUpdate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.AllowRestoreParamsUpdate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AllowRestoreParamsUpdate = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.HighPriorityForcedBackup, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.HighPriorityForcedBackup != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HighPriorityForcedBackup = value;
                        return;
                    }
                    break;
                case 49:
                    if (string.Equals(HttpConstants.HttpHeaders.UsePolygonsSmallerThanAHemisphere, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UsePolygonsSmallerThanAHemisphere != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UsePolygonsSmallerThanAHemisphere = value;
                        return;
                    }
                    break;
                case 50:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB, key))
                    {
                        if (throwIfAlreadyExists && this.ResponseContinuationTokenLimitInKB != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResponseContinuationTokenLimitInKB = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateAnalyticalMigrationProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateAnalyticalMigrationProgress = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.UpdateOfferStateToPending, key))
                    {
                        if (throwIfAlreadyExists && this.UpdateOfferStateToPending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UpdateOfferStateToPending = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ResponseContinuationTokenLimitInKB != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResponseContinuationTokenLimitInKB = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PopulateAnalyticalMigrationProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateAnalyticalMigrationProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateAnalyticalMigrationProgress = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.UpdateOfferStateToPending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UpdateOfferStateToPending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UpdateOfferStateToPending = value;
                        return;
                    }
                    break;
                case 51:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy, key))
                    {
                        if (throwIfAlreadyExists && this.EnableLowPrecisionOrderBy != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableLowPrecisionOrderBy = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp, key))
                    {
                        if (throwIfAlreadyExists && this.RetriableWriteRequestStartTimestamp != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RetriableWriteRequestStartTimestamp = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.EnableLowPrecisionOrderBy != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.EnableLowPrecisionOrderBy = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RetriableWriteRequestStartTimestamp != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RetriableWriteRequestStartTimestamp = value;
                        return;
                    }
                    break;
                case 52:
                    if (string.Equals(HttpConstants.HttpHeaders.OfferReplaceRURedistribution, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OfferReplaceRURedistribution != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OfferReplaceRURedistribution = value;
                        return;
                    }
                    break;
                case 53:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsRUPerGBEnforcementRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsRUPerGBEnforcementRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsOfferStorageRefreshRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsOfferStorageRefreshRequest = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateMinGLSNForDocumentOperations != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateMinGLSNForDocumentOperations = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsRUPerGBEnforcementRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsRUPerGBEnforcementRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsOfferStorageRefreshRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsOfferStorageRefreshRequest = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PopulateMinGLSNForDocumentOperations, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateMinGLSNForDocumentOperations != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateMinGLSNForDocumentOperations = value;
                        return;
                    }
                    break;
                case 54:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo, key))
                    {
                        if (throwIfAlreadyExists && this.IncludePhysicalPartitionThroughputInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IncludePhysicalPartitionThroughputInfo = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest, key))
                    {
                        if (throwIfAlreadyExists && this.IsMaterializedViewSourceSchemaReplaceBatchRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsMaterializedViewSourceSchemaReplaceBatchRequest = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IncludePhysicalPartitionThroughputInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IncludePhysicalPartitionThroughputInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IncludePhysicalPartitionThroughputInfo = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsMaterializedViewSourceSchemaReplaceBatchRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsMaterializedViewSourceSchemaReplaceBatchRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsMaterializedViewSourceSchemaReplaceBatchRequest = value;
                        return;
                    }
                    break;
                case 55:
                    if (string.Equals(HttpConstants.HttpHeaders.UpdateOfferStateToRestorePending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UpdateOfferStateToRestorePending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UpdateOfferStateToRestorePending = value;
                        return;
                    }
                    break;
                case 56:
                    if (string.Equals(WFConstants.BackendHeaders.CollectionChildResourceContentLimitInKB, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionChildResourceContentLimitInKB != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionChildResourceContentLimitInKB = value;
                        return;
                    }
                    break;
                case 57:
                    if (string.Equals(WFConstants.BackendHeaders.PopulateUnflushedMergeEntryCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateUnflushedMergeEntryCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateUnflushedMergeEntryCount = value;
                        return;
                    }
                    break;
                case 58:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput, key))
                    {
                        if (throwIfAlreadyExists && this.IgnoreSystemLoweringMaxThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IgnoreSystemLoweringMaxThroughput = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending, key))
                    {
                        if (throwIfAlreadyExists && this.SetMasterResourcesDeletionPending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SetMasterResourcesDeletionPending = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN, key))
                    {
                        if (throwIfAlreadyExists && this.PopulateHighestTentativeWriteLLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateHighestTentativeWriteLLSN = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IgnoreSystemLoweringMaxThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IgnoreSystemLoweringMaxThroughput = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SetMasterResourcesDeletionPending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SetMasterResourcesDeletionPending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SetMasterResourcesDeletionPending = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PopulateHighestTentativeWriteLLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PopulateHighestTentativeWriteLLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PopulateHighestTentativeWriteLLSN = value;
                        return;
                    }
                    break;
                case 59:
                    if (string.Equals(HttpConstants.HttpHeaders.UpdateMaxThroughputEverProvisioned, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UpdateMaxThroughputEverProvisioned != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UpdateMaxThroughputEverProvisioned = value;
                        return;
                    }
                    break;
                case 61:
                    if (string.Equals(HttpConstants.HttpHeaders.IsServerlessStorageRefreshRequest, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsServerlessStorageRefreshRequest != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsServerlessStorageRefreshRequest = value;
                        return;
                    }
                    break;
                case 62:
                    if (string.Equals(HttpConstants.HttpHeaders.SkipAdjustThroughputFractionsForOfferReplace, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SkipAdjustThroughputFractionsForOfferReplace != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SkipAdjustThroughputFractionsForOfferReplace = value;
                        return;
                    }
                    break;
                default:
                    break;
            }

            if (ignoreNotCommonHeaders)
            {
                return;
            }

            if (throwIfAlreadyExists)
            {
                this.InitializeNotCommonHeadersIfNeeded();
                this.notCommonHeaders.Add(key, value);
            }
            else
            {
                if (value == null)
                {
                    if (this.notCommonHeaders != null)
                    {
                        this.notCommonHeaders.Remove(key);
                    }
                }
                else
                {
                    this.InitializeNotCommonHeadersIfNeeded();
                    this.notCommonHeaders[key] = value;
                }
            }
        }

        /// <summary>
        /// Thread safe initialization is needed to make sure we do not lose headers.
        /// </summary>
        private void InitializeNotCommonHeadersIfNeeded()
        {
            if (this.notCommonHeaders == null)
            {
                lock (this)
                {
                    if (this.notCommonHeaders == null)
                    {
                        this.notCommonHeaders = new Dictionary<string, string>(RequestNameValueCollection.DefaultStringComparer); 
                    }
                }
            }
        }
    }
}