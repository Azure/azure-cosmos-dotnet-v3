//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA StoreResponseNameValueCollection.tt

namespace Microsoft.Azure.Documents.Collections
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Linq;
    using System.Threading;
    using Microsoft.Azure.Documents;

    /// <summary>
    /// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA StoreResponseNameValueCollection.tt
    /// This should be a one to one mapping with RntbdConstants.Response header token properties.
    /// This allows the TransportSerialization to directly set the property and avoid the dictionary overhead.
    /// If the property does not exists please update the StoreResponseNameValueCollection.tt list to add the new field
    /// </summary>
    internal class StoreResponseNameValueCollection : INameValueCollection, IEnumerable<KeyValuePair<string, string>> 
    {
        private static readonly StringComparer DefaultStringComparer = StringComparer.OrdinalIgnoreCase;

        // this is null if it's never been added to, and is created in a thread safe manner via GetOrCreateLazyHeaders()
        private Dictionary<string, string> lazyNotCommonHeaders;

        // The INameValueCollection interface is expected to be a replacement for NameValueCollection across the projects.
        // However, there are a few public API with NameValueCollection as return type, e.g. DocumentServiceResponse.ResponseHeaders and
        // DocumentClientException.ResponseHeaders.
        //
        // As a hybrid approach in those cases, we maintain the headers internally as an instance of the new INameValueCollection and create
        // a NameValueCollection for the above public APIs. Keeping the NameValueCollection and the internal INameValueCollection in sync is
        // not only cumbersome, it may also defeat the purpose of the new dictionary-based type.
        //
        // Therefore, we want to keep the NameValueCollection consistent within the ResponseHeaders APIs call. In other words,
        // once invoked, the ResponseHeaders will return the same NameValueCollection.
        private NameValueCollection nameValueCollection = null;

        public string AadAppliedRoleAssignmentId { get; set; }
        public string ActivityId { get; set; }
        public string AnalyticalMigrationProgress { get; set; }
        public string AppliedPolicyElementId { get; set; }
        public string BackendRequestDurationMilliseconds { get; set; }
        public string ByokEncryptionProgress { get; set; }
        public string CapacityType { get; set; }
        public string ChangeFeedInfo { get; set; }
        public string CollectionIndexTransformationProgress { get; set; }
        public string CollectionLazyIndexingProgress { get; set; }
        public string CollectionPartitionIndex { get; set; }
        public string CollectionSecurityIdentifier { get; set; }
        public string CollectionServiceIndex { get; set; }
        public string CollectionUniqueIndexReIndexProgress { get; set; }
        public string CollectionUniqueKeysUnderReIndex { get; set; }
        public string ConfirmedStoreChecksum { get; set; }
        public string Continuation { get; set; }
        public string CorrelatedActivityId { get; set; }
        public string CurrentReplicaSetSize { get; set; }
        public string CurrentResourceQuotaUsage { get; set; }
        public string CurrentWriteQuorum { get; set; }
        public string DatabaseAccountId { get; set; }
        public string DisableRntbdChannel { get; set; }
        public string ETag { get; set; }
        public string GlobalCommittedLSN { get; set; }
        public string HasTentativeWrites { get; set; }
        public string HighestTentativeWriteLLSN { get; set; }
        public string IndexingDirective { get; set; }
        public string IndexUtilization { get; set; }
        public string InstantScaleUpValue { get; set; }
        public string IsOfferRestorePending { get; set; }
        public string IsRUPerMinuteUsed { get; set; }
        public string ItemCount { get; set; }
        public string ItemLocalLSN { get; set; }
        public string ItemLSN { get; set; }
        public string LastStateChangeUtc { get; set; }
        public string LocalLSN { get; set; }
        public string LogResults { get; set; }
        public string LSN { get; set; }
        public string MaxContentLength { get; set; }
        public string MaxResourceQuota { get; set; }
        public string MergeProgressBlocked { get; set; }
        public string MinGLSNForDocumentOperations { get; set; }
        public string MinGLSNForTombstoneOperations { get; set; }
        public string MinimumRUsForOffer { get; set; }
        public string NumberOfReadRegions { get; set; }
        public string OfferReplacePending { get; set; }
        public string OfferReplacePendingForMerge { get; set; }
        public string OldestActiveSchemaId { get; set; }
        public string OwnerFullName { get; set; }
        public string OwnerId { get; set; }
        public string PartitionKeyRangeId { get; set; }
        public string PendingPKDelete { get; set; }
        public string PhysicalPartitionId { get; set; }
        public string QueryExecutionInfo { get; set; }
        public string QueryMetrics { get; set; }
        public string QuorumAckedLocalLSN { get; set; }
        public string QuorumAckedLSN { get; set; }
        public string ReIndexerProgress { get; set; }
        public string ReplicaStatusRevoked { get; set; }
        public string ReplicatorLSNToGLSNDelta { get; set; }
        public string ReplicatorLSNToLLSNDelta { get; set; }
        public string RequestCharge { get; set; }
        public string RequestValidationFailure { get; set; }
        public string RequiresDistribution { get; set; }
        public string ResourceId { get; set; }
        public string RestoreState { get; set; }
        public string RetryAfterInMilliseconds { get; set; }
        public string SchemaVersion { get; set; }
        public string ServerVersion { get; set; }
        public string SessionToken { get; set; }
        public string ShareThroughput { get; set; }
        public string SoftMaxAllowedThroughput { get; set; }
        public string SubStatus { get; set; }
        public string TentativeStoreChecksum { get; set; }
        public string TimeToLiveInSeconds { get; set; }
        public string TotalAccountThroughput { get; set; }
        public string TransportRequestID { get; set; }
        public string UnflushedMergLogEntryCount { get; set; }
        public string VectorClockLocalProgress { get; set; }
        public string XDate { get; set; }
        public string XPConfigurationSessionsCount { get; set; }
        public string XPRole { get; set; }

        public StoreResponseNameValueCollection()
        {
        }

        private StoreResponseNameValueCollection(Dictionary<string, string> lazyNotCommonHeaders)
        {
            this.lazyNotCommonHeaders = lazyNotCommonHeaders;
        }

        public string this[string key]
        {
            get => this.Get(key);
            set => this.Set(key, value);
        }

        public void Add(INameValueCollection collection)
        {
            if (collection == null)
            {
                throw new ArgumentNullException(nameof(collection));
            }

            foreach (string key in collection.Keys())
            {
                this.Set(key, collection[key]);
            }
        }

        public string[] AllKeys()
        {
            return this.Keys().ToArray();
        }

        public void Clear()
        {
            if (this.lazyNotCommonHeaders != null)
            {
                this.lazyNotCommonHeaders.Clear();
            }

            this.AadAppliedRoleAssignmentId = null;
            this.ActivityId = null;
            this.AnalyticalMigrationProgress = null;
            this.AppliedPolicyElementId = null;
            this.BackendRequestDurationMilliseconds = null;
            this.ByokEncryptionProgress = null;
            this.CapacityType = null;
            this.ChangeFeedInfo = null;
            this.CollectionIndexTransformationProgress = null;
            this.CollectionLazyIndexingProgress = null;
            this.CollectionPartitionIndex = null;
            this.CollectionSecurityIdentifier = null;
            this.CollectionServiceIndex = null;
            this.CollectionUniqueIndexReIndexProgress = null;
            this.CollectionUniqueKeysUnderReIndex = null;
            this.ConfirmedStoreChecksum = null;
            this.Continuation = null;
            this.CorrelatedActivityId = null;
            this.CurrentReplicaSetSize = null;
            this.CurrentResourceQuotaUsage = null;
            this.CurrentWriteQuorum = null;
            this.DatabaseAccountId = null;
            this.DisableRntbdChannel = null;
            this.ETag = null;
            this.GlobalCommittedLSN = null;
            this.HasTentativeWrites = null;
            this.HighestTentativeWriteLLSN = null;
            this.IndexingDirective = null;
            this.IndexUtilization = null;
            this.InstantScaleUpValue = null;
            this.IsOfferRestorePending = null;
            this.IsRUPerMinuteUsed = null;
            this.ItemCount = null;
            this.ItemLocalLSN = null;
            this.ItemLSN = null;
            this.LastStateChangeUtc = null;
            this.LocalLSN = null;
            this.LogResults = null;
            this.LSN = null;
            this.MaxContentLength = null;
            this.MaxResourceQuota = null;
            this.MergeProgressBlocked = null;
            this.MinGLSNForDocumentOperations = null;
            this.MinGLSNForTombstoneOperations = null;
            this.MinimumRUsForOffer = null;
            this.NumberOfReadRegions = null;
            this.OfferReplacePending = null;
            this.OfferReplacePendingForMerge = null;
            this.OldestActiveSchemaId = null;
            this.OwnerFullName = null;
            this.OwnerId = null;
            this.PartitionKeyRangeId = null;
            this.PendingPKDelete = null;
            this.PhysicalPartitionId = null;
            this.QueryExecutionInfo = null;
            this.QueryMetrics = null;
            this.QuorumAckedLocalLSN = null;
            this.QuorumAckedLSN = null;
            this.ReIndexerProgress = null;
            this.ReplicaStatusRevoked = null;
            this.ReplicatorLSNToGLSNDelta = null;
            this.ReplicatorLSNToLLSNDelta = null;
            this.RequestCharge = null;
            this.RequestValidationFailure = null;
            this.RequiresDistribution = null;
            this.ResourceId = null;
            this.RestoreState = null;
            this.RetryAfterInMilliseconds = null;
            this.SchemaVersion = null;
            this.ServerVersion = null;
            this.SessionToken = null;
            this.ShareThroughput = null;
            this.SoftMaxAllowedThroughput = null;
            this.SubStatus = null;
            this.TentativeStoreChecksum = null;
            this.TimeToLiveInSeconds = null;
            this.TotalAccountThroughput = null;
            this.TransportRequestID = null;
            this.UnflushedMergLogEntryCount = null;
            this.VectorClockLocalProgress = null;
            this.XDate = null;
            this.XPConfigurationSessionsCount = null;
            this.XPRole = null;

        }

        public INameValueCollection Clone()
        {
            Dictionary<string, string> cloneNotCommonHeaders = null;
            if (this.lazyNotCommonHeaders != null)
            {
                cloneNotCommonHeaders = new Dictionary<string, string>(this.lazyNotCommonHeaders, StoreResponseNameValueCollection.DefaultStringComparer);
            }

            StoreResponseNameValueCollection cloneHeaders = new StoreResponseNameValueCollection(cloneNotCommonHeaders)
            {
                AadAppliedRoleAssignmentId = this.AadAppliedRoleAssignmentId,
                ActivityId = this.ActivityId,
                AnalyticalMigrationProgress = this.AnalyticalMigrationProgress,
                AppliedPolicyElementId = this.AppliedPolicyElementId,
                BackendRequestDurationMilliseconds = this.BackendRequestDurationMilliseconds,
                ByokEncryptionProgress = this.ByokEncryptionProgress,
                CapacityType = this.CapacityType,
                ChangeFeedInfo = this.ChangeFeedInfo,
                CollectionIndexTransformationProgress = this.CollectionIndexTransformationProgress,
                CollectionLazyIndexingProgress = this.CollectionLazyIndexingProgress,
                CollectionPartitionIndex = this.CollectionPartitionIndex,
                CollectionSecurityIdentifier = this.CollectionSecurityIdentifier,
                CollectionServiceIndex = this.CollectionServiceIndex,
                CollectionUniqueIndexReIndexProgress = this.CollectionUniqueIndexReIndexProgress,
                CollectionUniqueKeysUnderReIndex = this.CollectionUniqueKeysUnderReIndex,
                ConfirmedStoreChecksum = this.ConfirmedStoreChecksum,
                Continuation = this.Continuation,
                CorrelatedActivityId = this.CorrelatedActivityId,
                CurrentReplicaSetSize = this.CurrentReplicaSetSize,
                CurrentResourceQuotaUsage = this.CurrentResourceQuotaUsage,
                CurrentWriteQuorum = this.CurrentWriteQuorum,
                DatabaseAccountId = this.DatabaseAccountId,
                DisableRntbdChannel = this.DisableRntbdChannel,
                ETag = this.ETag,
                GlobalCommittedLSN = this.GlobalCommittedLSN,
                HasTentativeWrites = this.HasTentativeWrites,
                HighestTentativeWriteLLSN = this.HighestTentativeWriteLLSN,
                IndexingDirective = this.IndexingDirective,
                IndexUtilization = this.IndexUtilization,
                InstantScaleUpValue = this.InstantScaleUpValue,
                IsOfferRestorePending = this.IsOfferRestorePending,
                IsRUPerMinuteUsed = this.IsRUPerMinuteUsed,
                ItemCount = this.ItemCount,
                ItemLocalLSN = this.ItemLocalLSN,
                ItemLSN = this.ItemLSN,
                LastStateChangeUtc = this.LastStateChangeUtc,
                LocalLSN = this.LocalLSN,
                LogResults = this.LogResults,
                LSN = this.LSN,
                MaxContentLength = this.MaxContentLength,
                MaxResourceQuota = this.MaxResourceQuota,
                MergeProgressBlocked = this.MergeProgressBlocked,
                MinGLSNForDocumentOperations = this.MinGLSNForDocumentOperations,
                MinGLSNForTombstoneOperations = this.MinGLSNForTombstoneOperations,
                MinimumRUsForOffer = this.MinimumRUsForOffer,
                NumberOfReadRegions = this.NumberOfReadRegions,
                OfferReplacePending = this.OfferReplacePending,
                OfferReplacePendingForMerge = this.OfferReplacePendingForMerge,
                OldestActiveSchemaId = this.OldestActiveSchemaId,
                OwnerFullName = this.OwnerFullName,
                OwnerId = this.OwnerId,
                PartitionKeyRangeId = this.PartitionKeyRangeId,
                PendingPKDelete = this.PendingPKDelete,
                PhysicalPartitionId = this.PhysicalPartitionId,
                QueryExecutionInfo = this.QueryExecutionInfo,
                QueryMetrics = this.QueryMetrics,
                QuorumAckedLocalLSN = this.QuorumAckedLocalLSN,
                QuorumAckedLSN = this.QuorumAckedLSN,
                ReIndexerProgress = this.ReIndexerProgress,
                ReplicaStatusRevoked = this.ReplicaStatusRevoked,
                ReplicatorLSNToGLSNDelta = this.ReplicatorLSNToGLSNDelta,
                ReplicatorLSNToLLSNDelta = this.ReplicatorLSNToLLSNDelta,
                RequestCharge = this.RequestCharge,
                RequestValidationFailure = this.RequestValidationFailure,
                RequiresDistribution = this.RequiresDistribution,
                ResourceId = this.ResourceId,
                RestoreState = this.RestoreState,
                RetryAfterInMilliseconds = this.RetryAfterInMilliseconds,
                SchemaVersion = this.SchemaVersion,
                ServerVersion = this.ServerVersion,
                SessionToken = this.SessionToken,
                ShareThroughput = this.ShareThroughput,
                SoftMaxAllowedThroughput = this.SoftMaxAllowedThroughput,
                SubStatus = this.SubStatus,
                TentativeStoreChecksum = this.TentativeStoreChecksum,
                TimeToLiveInSeconds = this.TimeToLiveInSeconds,
                TotalAccountThroughput = this.TotalAccountThroughput,
                TransportRequestID = this.TransportRequestID,
                UnflushedMergLogEntryCount = this.UnflushedMergLogEntryCount,
                VectorClockLocalProgress = this.VectorClockLocalProgress,
                XDate = this.XDate,
                XPConfigurationSessionsCount = this.XPConfigurationSessionsCount,
                XPRole = this.XPRole,
            };

            return cloneHeaders;
        }

        public int Count()
        {
            return this.Keys().Count();
        }

        public IEnumerator GetEnumerator()
        {
            return this.Keys().GetEnumerator();
        }

        IEnumerator<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>>.GetEnumerator()
        {
            if (this.ActivityId != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.ActivityId, this.ActivityId);
            }
            if (this.LastStateChangeUtc != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.LastStateChangeUtc, this.LastStateChangeUtc);
            }
            if (this.Continuation != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.Continuation, this.Continuation);
            }
            if (this.ETag != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.ETag, this.ETag);
            }
            if (this.RetryAfterInMilliseconds != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.RetryAfterInMilliseconds, this.RetryAfterInMilliseconds);
            }
            if (this.IndexingDirective != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.IndexingDirective, this.IndexingDirective);
            }
            if (this.MaxResourceQuota != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.MaxResourceQuota, this.MaxResourceQuota);
            }
            if (this.CurrentResourceQuotaUsage != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.CurrentResourceQuotaUsage, this.CurrentResourceQuotaUsage);
            }
            if (this.SchemaVersion != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.SchemaVersion, this.SchemaVersion);
            }
            if (this.CollectionPartitionIndex != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CollectionPartitionIndex, this.CollectionPartitionIndex);
            }
            if (this.CollectionServiceIndex != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CollectionServiceIndex, this.CollectionServiceIndex);
            }
            if (this.LSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.LSN, this.LSN);
            }
            if (this.ItemCount != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.ItemCount, this.ItemCount);
            }
            if (this.RequestCharge != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.RequestCharge, this.RequestCharge);
            }
            if (this.OwnerFullName != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.OwnerFullName, this.OwnerFullName);
            }
            if (this.OwnerId != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.OwnerId, this.OwnerId);
            }
            if (this.DatabaseAccountId != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.DatabaseAccountId, this.DatabaseAccountId);
            }
            if (this.QuorumAckedLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.QuorumAckedLSN, this.QuorumAckedLSN);
            }
            if (this.RequestValidationFailure != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.RequestValidationFailure, this.RequestValidationFailure);
            }
            if (this.SubStatus != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.SubStatus, this.SubStatus);
            }
            if (this.CollectionIndexTransformationProgress != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.CollectionIndexTransformationProgress, this.CollectionIndexTransformationProgress);
            }
            if (this.CurrentWriteQuorum != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CurrentWriteQuorum, this.CurrentWriteQuorum);
            }
            if (this.CurrentReplicaSetSize != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CurrentReplicaSetSize, this.CurrentReplicaSetSize);
            }
            if (this.CollectionLazyIndexingProgress != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.CollectionLazyIndexingProgress, this.CollectionLazyIndexingProgress);
            }
            if (this.PartitionKeyRangeId != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.PartitionKeyRangeId, this.PartitionKeyRangeId);
            }
            if (this.LogResults != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.LogResults, this.LogResults);
            }
            if (this.XPRole != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.XPRole, this.XPRole);
            }
            if (this.IsRUPerMinuteUsed != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.IsRUPerMinuteUsed, this.IsRUPerMinuteUsed);
            }
            if (this.QueryMetrics != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.QueryMetrics, this.QueryMetrics);
            }
            if (this.QueryExecutionInfo != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.QueryExecutionInfo, this.QueryExecutionInfo);
            }
            if (this.IndexUtilization != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.IndexUtilization, this.IndexUtilization);
            }
            if (this.GlobalCommittedLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.GlobalCommittedLSN, this.GlobalCommittedLSN);
            }
            if (this.NumberOfReadRegions != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.NumberOfReadRegions, this.NumberOfReadRegions);
            }
            if (this.OfferReplacePending != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.OfferReplacePending, this.OfferReplacePending);
            }
            if (this.ItemLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ItemLSN, this.ItemLSN);
            }
            if (this.RestoreState != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.RestoreState, this.RestoreState);
            }
            if (this.CollectionSecurityIdentifier != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CollectionSecurityIdentifier, this.CollectionSecurityIdentifier);
            }
            if (this.TransportRequestID != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.TransportRequestID, this.TransportRequestID);
            }
            if (this.ShareThroughput != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ShareThroughput, this.ShareThroughput);
            }
            if (this.DisableRntbdChannel != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.DisableRntbdChannel, this.DisableRntbdChannel);
            }
            if (this.XDate != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.XDate, this.XDate);
            }
            if (this.LocalLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.LocalLSN, this.LocalLSN);
            }
            if (this.QuorumAckedLocalLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.QuorumAckedLocalLSN, this.QuorumAckedLocalLSN);
            }
            if (this.ItemLocalLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ItemLocalLSN, this.ItemLocalLSN);
            }
            if (this.HasTentativeWrites != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.HasTentativeWrites, this.HasTentativeWrites);
            }
            if (this.SessionToken != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.SessionToken, this.SessionToken);
            }
            if (this.ReplicatorLSNToGLSNDelta != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta, this.ReplicatorLSNToGLSNDelta);
            }
            if (this.ReplicatorLSNToLLSNDelta != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta, this.ReplicatorLSNToLLSNDelta);
            }
            if (this.VectorClockLocalProgress != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.VectorClockLocalProgress, this.VectorClockLocalProgress);
            }
            if (this.MinimumRUsForOffer != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.MinimumRUsForOffer, this.MinimumRUsForOffer);
            }
            if (this.XPConfigurationSessionsCount != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.XPConfigurationSessionsCount, this.XPConfigurationSessionsCount);
            }
            if (this.UnflushedMergLogEntryCount != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.UnflushedMergLogEntryCount, this.UnflushedMergLogEntryCount);
            }
            if (this.ResourceId != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ResourceId, this.ResourceId);
            }
            if (this.TimeToLiveInSeconds != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.TimeToLiveInSeconds, this.TimeToLiveInSeconds);
            }
            if (this.ReplicaStatusRevoked != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ReplicaStatusRevoked, this.ReplicaStatusRevoked);
            }
            if (this.SoftMaxAllowedThroughput != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.SoftMaxAllowedThroughput, this.SoftMaxAllowedThroughput);
            }
            if (this.BackendRequestDurationMilliseconds != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds, this.BackendRequestDurationMilliseconds);
            }
            if (this.ServerVersion != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.ServerVersion, this.ServerVersion);
            }
            if (this.ConfirmedStoreChecksum != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.ConfirmedStoreChecksum, this.ConfirmedStoreChecksum);
            }
            if (this.TentativeStoreChecksum != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.TentativeStoreChecksum, this.TentativeStoreChecksum);
            }
            if (this.CorrelatedActivityId != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CorrelatedActivityId, this.CorrelatedActivityId);
            }
            if (this.PendingPKDelete != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.PendingPKDelete, this.PendingPKDelete);
            }
            if (this.AadAppliedRoleAssignmentId != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId, this.AadAppliedRoleAssignmentId);
            }
            if (this.CollectionUniqueIndexReIndexProgress != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress, this.CollectionUniqueIndexReIndexProgress);
            }
            if (this.CollectionUniqueKeysUnderReIndex != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.CollectionUniqueKeysUnderReIndex, this.CollectionUniqueKeysUnderReIndex);
            }
            if (this.AnalyticalMigrationProgress != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.AnalyticalMigrationProgress, this.AnalyticalMigrationProgress);
            }
            if (this.TotalAccountThroughput != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.TotalAccountThroughput, this.TotalAccountThroughput);
            }
            if (this.ByokEncryptionProgress != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ByokEncryptionProgress, this.ByokEncryptionProgress);
            }
            if (this.AppliedPolicyElementId != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.AppliedPolicyElementId, this.AppliedPolicyElementId);
            }
            if (this.MergeProgressBlocked != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.MergeProgressBlocked, this.MergeProgressBlocked);
            }
            if (this.ChangeFeedInfo != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.ChangeFeedInfo, this.ChangeFeedInfo);
            }
            if (this.ReIndexerProgress != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.ReIndexerProgress, this.ReIndexerProgress);
            }
            if (this.OfferReplacePendingForMerge != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.OfferReplacePendingForMerge, this.OfferReplacePendingForMerge);
            }
            if (this.OldestActiveSchemaId != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.OldestActiveSchemaId, this.OldestActiveSchemaId);
            }
            if (this.PhysicalPartitionId != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.PhysicalPartitionId, this.PhysicalPartitionId);
            }
            if (this.MaxContentLength != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.MaxContentLength, this.MaxContentLength);
            }
            if (this.IsOfferRestorePending != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.IsOfferRestorePending, this.IsOfferRestorePending);
            }
            if (this.InstantScaleUpValue != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.InstantScaleUpValue, this.InstantScaleUpValue);
            }
            if (this.RequiresDistribution != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.RequiresDistribution, this.RequiresDistribution);
            }
            if (this.CapacityType != null)
            {
                yield return new KeyValuePair<string, string>(HttpConstants.HttpHeaders.CapacityType, this.CapacityType);
            }
            if (this.MinGLSNForTombstoneOperations != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.MinGLSNForTombstoneOperations, this.MinGLSNForTombstoneOperations);
            }
            if (this.MinGLSNForDocumentOperations != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.MinGLSNForDocumentOperations, this.MinGLSNForDocumentOperations);
            }
            if (this.HighestTentativeWriteLLSN != null)
            {
                yield return new KeyValuePair<string, string>(WFConstants.BackendHeaders.HighestTentativeWriteLLSN, this.HighestTentativeWriteLLSN);
            }

            if (this.lazyNotCommonHeaders != null)
            {
                foreach (KeyValuePair<string, string> kvp in this.lazyNotCommonHeaders)
                {
                    yield return kvp;
                }
            }
        }

        public string[] GetValues(string key)
        {
            string value = this.Get(key);
            if (value != null)
            {
                return new string[] { value };
            }

            return null;
        }

        public IEnumerable<string> Keys()
        {
            if (this.ActivityId != null)
            {
                yield return HttpConstants.HttpHeaders.ActivityId;
            }
            if (this.LastStateChangeUtc != null)
            {
                yield return HttpConstants.HttpHeaders.LastStateChangeUtc;
            }
            if (this.Continuation != null)
            {
                yield return HttpConstants.HttpHeaders.Continuation;
            }
            if (this.ETag != null)
            {
                yield return HttpConstants.HttpHeaders.ETag;
            }
            if (this.RetryAfterInMilliseconds != null)
            {
                yield return HttpConstants.HttpHeaders.RetryAfterInMilliseconds;
            }
            if (this.IndexingDirective != null)
            {
                yield return HttpConstants.HttpHeaders.IndexingDirective;
            }
            if (this.MaxResourceQuota != null)
            {
                yield return HttpConstants.HttpHeaders.MaxResourceQuota;
            }
            if (this.CurrentResourceQuotaUsage != null)
            {
                yield return HttpConstants.HttpHeaders.CurrentResourceQuotaUsage;
            }
            if (this.SchemaVersion != null)
            {
                yield return HttpConstants.HttpHeaders.SchemaVersion;
            }
            if (this.CollectionPartitionIndex != null)
            {
                yield return WFConstants.BackendHeaders.CollectionPartitionIndex;
            }
            if (this.CollectionServiceIndex != null)
            {
                yield return WFConstants.BackendHeaders.CollectionServiceIndex;
            }
            if (this.LSN != null)
            {
                yield return WFConstants.BackendHeaders.LSN;
            }
            if (this.ItemCount != null)
            {
                yield return HttpConstants.HttpHeaders.ItemCount;
            }
            if (this.RequestCharge != null)
            {
                yield return HttpConstants.HttpHeaders.RequestCharge;
            }
            if (this.OwnerFullName != null)
            {
                yield return HttpConstants.HttpHeaders.OwnerFullName;
            }
            if (this.OwnerId != null)
            {
                yield return HttpConstants.HttpHeaders.OwnerId;
            }
            if (this.DatabaseAccountId != null)
            {
                yield return WFConstants.BackendHeaders.DatabaseAccountId;
            }
            if (this.QuorumAckedLSN != null)
            {
                yield return WFConstants.BackendHeaders.QuorumAckedLSN;
            }
            if (this.RequestValidationFailure != null)
            {
                yield return WFConstants.BackendHeaders.RequestValidationFailure;
            }
            if (this.SubStatus != null)
            {
                yield return WFConstants.BackendHeaders.SubStatus;
            }
            if (this.CollectionIndexTransformationProgress != null)
            {
                yield return HttpConstants.HttpHeaders.CollectionIndexTransformationProgress;
            }
            if (this.CurrentWriteQuorum != null)
            {
                yield return WFConstants.BackendHeaders.CurrentWriteQuorum;
            }
            if (this.CurrentReplicaSetSize != null)
            {
                yield return WFConstants.BackendHeaders.CurrentReplicaSetSize;
            }
            if (this.CollectionLazyIndexingProgress != null)
            {
                yield return HttpConstants.HttpHeaders.CollectionLazyIndexingProgress;
            }
            if (this.PartitionKeyRangeId != null)
            {
                yield return WFConstants.BackendHeaders.PartitionKeyRangeId;
            }
            if (this.LogResults != null)
            {
                yield return HttpConstants.HttpHeaders.LogResults;
            }
            if (this.XPRole != null)
            {
                yield return WFConstants.BackendHeaders.XPRole;
            }
            if (this.IsRUPerMinuteUsed != null)
            {
                yield return WFConstants.BackendHeaders.IsRUPerMinuteUsed;
            }
            if (this.QueryMetrics != null)
            {
                yield return WFConstants.BackendHeaders.QueryMetrics;
            }
            if (this.QueryExecutionInfo != null)
            {
                yield return WFConstants.BackendHeaders.QueryExecutionInfo;
            }
            if (this.IndexUtilization != null)
            {
                yield return WFConstants.BackendHeaders.IndexUtilization;
            }
            if (this.GlobalCommittedLSN != null)
            {
                yield return WFConstants.BackendHeaders.GlobalCommittedLSN;
            }
            if (this.NumberOfReadRegions != null)
            {
                yield return WFConstants.BackendHeaders.NumberOfReadRegions;
            }
            if (this.OfferReplacePending != null)
            {
                yield return WFConstants.BackendHeaders.OfferReplacePending;
            }
            if (this.ItemLSN != null)
            {
                yield return WFConstants.BackendHeaders.ItemLSN;
            }
            if (this.RestoreState != null)
            {
                yield return WFConstants.BackendHeaders.RestoreState;
            }
            if (this.CollectionSecurityIdentifier != null)
            {
                yield return WFConstants.BackendHeaders.CollectionSecurityIdentifier;
            }
            if (this.TransportRequestID != null)
            {
                yield return HttpConstants.HttpHeaders.TransportRequestID;
            }
            if (this.ShareThroughput != null)
            {
                yield return WFConstants.BackendHeaders.ShareThroughput;
            }
            if (this.DisableRntbdChannel != null)
            {
                yield return HttpConstants.HttpHeaders.DisableRntbdChannel;
            }
            if (this.XDate != null)
            {
                yield return HttpConstants.HttpHeaders.XDate;
            }
            if (this.LocalLSN != null)
            {
                yield return WFConstants.BackendHeaders.LocalLSN;
            }
            if (this.QuorumAckedLocalLSN != null)
            {
                yield return WFConstants.BackendHeaders.QuorumAckedLocalLSN;
            }
            if (this.ItemLocalLSN != null)
            {
                yield return WFConstants.BackendHeaders.ItemLocalLSN;
            }
            if (this.HasTentativeWrites != null)
            {
                yield return WFConstants.BackendHeaders.HasTentativeWrites;
            }
            if (this.SessionToken != null)
            {
                yield return HttpConstants.HttpHeaders.SessionToken;
            }
            if (this.ReplicatorLSNToGLSNDelta != null)
            {
                yield return WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta;
            }
            if (this.ReplicatorLSNToLLSNDelta != null)
            {
                yield return WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta;
            }
            if (this.VectorClockLocalProgress != null)
            {
                yield return WFConstants.BackendHeaders.VectorClockLocalProgress;
            }
            if (this.MinimumRUsForOffer != null)
            {
                yield return WFConstants.BackendHeaders.MinimumRUsForOffer;
            }
            if (this.XPConfigurationSessionsCount != null)
            {
                yield return WFConstants.BackendHeaders.XPConfigurationSessionsCount;
            }
            if (this.UnflushedMergLogEntryCount != null)
            {
                yield return WFConstants.BackendHeaders.UnflushedMergLogEntryCount;
            }
            if (this.ResourceId != null)
            {
                yield return WFConstants.BackendHeaders.ResourceId;
            }
            if (this.TimeToLiveInSeconds != null)
            {
                yield return WFConstants.BackendHeaders.TimeToLiveInSeconds;
            }
            if (this.ReplicaStatusRevoked != null)
            {
                yield return WFConstants.BackendHeaders.ReplicaStatusRevoked;
            }
            if (this.SoftMaxAllowedThroughput != null)
            {
                yield return WFConstants.BackendHeaders.SoftMaxAllowedThroughput;
            }
            if (this.BackendRequestDurationMilliseconds != null)
            {
                yield return HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds;
            }
            if (this.ServerVersion != null)
            {
                yield return HttpConstants.HttpHeaders.ServerVersion;
            }
            if (this.ConfirmedStoreChecksum != null)
            {
                yield return HttpConstants.HttpHeaders.ConfirmedStoreChecksum;
            }
            if (this.TentativeStoreChecksum != null)
            {
                yield return HttpConstants.HttpHeaders.TentativeStoreChecksum;
            }
            if (this.CorrelatedActivityId != null)
            {
                yield return WFConstants.BackendHeaders.CorrelatedActivityId;
            }
            if (this.PendingPKDelete != null)
            {
                yield return WFConstants.BackendHeaders.PendingPKDelete;
            }
            if (this.AadAppliedRoleAssignmentId != null)
            {
                yield return HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId;
            }
            if (this.CollectionUniqueIndexReIndexProgress != null)
            {
                yield return WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress;
            }
            if (this.CollectionUniqueKeysUnderReIndex != null)
            {
                yield return WFConstants.BackendHeaders.CollectionUniqueKeysUnderReIndex;
            }
            if (this.AnalyticalMigrationProgress != null)
            {
                yield return WFConstants.BackendHeaders.AnalyticalMigrationProgress;
            }
            if (this.TotalAccountThroughput != null)
            {
                yield return HttpConstants.HttpHeaders.TotalAccountThroughput;
            }
            if (this.ByokEncryptionProgress != null)
            {
                yield return WFConstants.BackendHeaders.ByokEncryptionProgress;
            }
            if (this.AppliedPolicyElementId != null)
            {
                yield return HttpConstants.HttpHeaders.AppliedPolicyElementId;
            }
            if (this.MergeProgressBlocked != null)
            {
                yield return WFConstants.BackendHeaders.MergeProgressBlocked;
            }
            if (this.ChangeFeedInfo != null)
            {
                yield return HttpConstants.HttpHeaders.ChangeFeedInfo;
            }
            if (this.ReIndexerProgress != null)
            {
                yield return WFConstants.BackendHeaders.ReIndexerProgress;
            }
            if (this.OfferReplacePendingForMerge != null)
            {
                yield return WFConstants.BackendHeaders.OfferReplacePendingForMerge;
            }
            if (this.OldestActiveSchemaId != null)
            {
                yield return WFConstants.BackendHeaders.OldestActiveSchemaId;
            }
            if (this.PhysicalPartitionId != null)
            {
                yield return HttpConstants.HttpHeaders.PhysicalPartitionId;
            }
            if (this.MaxContentLength != null)
            {
                yield return HttpConstants.HttpHeaders.MaxContentLength;
            }
            if (this.IsOfferRestorePending != null)
            {
                yield return HttpConstants.HttpHeaders.IsOfferRestorePending;
            }
            if (this.InstantScaleUpValue != null)
            {
                yield return HttpConstants.HttpHeaders.InstantScaleUpValue;
            }
            if (this.RequiresDistribution != null)
            {
                yield return WFConstants.BackendHeaders.RequiresDistribution;
            }
            if (this.CapacityType != null)
            {
                yield return HttpConstants.HttpHeaders.CapacityType;
            }
            if (this.MinGLSNForTombstoneOperations != null)
            {
                yield return WFConstants.BackendHeaders.MinGLSNForTombstoneOperations;
            }
            if (this.MinGLSNForDocumentOperations != null)
            {
                yield return WFConstants.BackendHeaders.MinGLSNForDocumentOperations;
            }
            if (this.HighestTentativeWriteLLSN != null)
            {
                yield return WFConstants.BackendHeaders.HighestTentativeWriteLLSN;
            }

            if (this.lazyNotCommonHeaders != null)
            {
                foreach (string key in this.lazyNotCommonHeaders.Keys)
                {
                    yield return key;
                }
            }
        }

        public NameValueCollection ToNameValueCollection()
        {
            // Note: See comment on line 34 of this file for the implementation. We need to respect current contracts
            // for Backend Gateway.
            if (this.nameValueCollection == null)
            {
                lock (this)
                {
                    if (this.nameValueCollection == null)
                    {
                        this.nameValueCollection = new NameValueCollection(this.Count(), StoreResponseNameValueCollection.DefaultStringComparer);

                         if (this.ActivityId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ActivityId, this.ActivityId);
                        }
                        if (this.LastStateChangeUtc != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.LastStateChangeUtc, this.LastStateChangeUtc);
                        }
                        if (this.Continuation != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.Continuation, this.Continuation);
                        }
                        if (this.ETag != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ETag, this.ETag);
                        }
                        if (this.RetryAfterInMilliseconds != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RetryAfterInMilliseconds, this.RetryAfterInMilliseconds);
                        }
                        if (this.IndexingDirective != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IndexingDirective, this.IndexingDirective);
                        }
                        if (this.MaxResourceQuota != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MaxResourceQuota, this.MaxResourceQuota);
                        }
                        if (this.CurrentResourceQuotaUsage != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CurrentResourceQuotaUsage, this.CurrentResourceQuotaUsage);
                        }
                        if (this.SchemaVersion != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SchemaVersion, this.SchemaVersion);
                        }
                        if (this.CollectionPartitionIndex != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionPartitionIndex, this.CollectionPartitionIndex);
                        }
                        if (this.CollectionServiceIndex != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionServiceIndex, this.CollectionServiceIndex);
                        }
                        if (this.LSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.LSN, this.LSN);
                        }
                        if (this.ItemCount != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ItemCount, this.ItemCount);
                        }
                        if (this.RequestCharge != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.RequestCharge, this.RequestCharge);
                        }
                        if (this.OwnerFullName != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.OwnerFullName, this.OwnerFullName);
                        }
                        if (this.OwnerId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.OwnerId, this.OwnerId);
                        }
                        if (this.DatabaseAccountId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.DatabaseAccountId, this.DatabaseAccountId);
                        }
                        if (this.QuorumAckedLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.QuorumAckedLSN, this.QuorumAckedLSN);
                        }
                        if (this.RequestValidationFailure != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RequestValidationFailure, this.RequestValidationFailure);
                        }
                        if (this.SubStatus != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SubStatus, this.SubStatus);
                        }
                        if (this.CollectionIndexTransformationProgress != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CollectionIndexTransformationProgress, this.CollectionIndexTransformationProgress);
                        }
                        if (this.CurrentWriteQuorum != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CurrentWriteQuorum, this.CurrentWriteQuorum);
                        }
                        if (this.CurrentReplicaSetSize != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CurrentReplicaSetSize, this.CurrentReplicaSetSize);
                        }
                        if (this.CollectionLazyIndexingProgress != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CollectionLazyIndexingProgress, this.CollectionLazyIndexingProgress);
                        }
                        if (this.PartitionKeyRangeId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PartitionKeyRangeId, this.PartitionKeyRangeId);
                        }
                        if (this.LogResults != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.LogResults, this.LogResults);
                        }
                        if (this.XPRole != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.XPRole, this.XPRole);
                        }
                        if (this.IsRUPerMinuteUsed != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.IsRUPerMinuteUsed, this.IsRUPerMinuteUsed);
                        }
                        if (this.QueryMetrics != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.QueryMetrics, this.QueryMetrics);
                        }
                        if (this.QueryExecutionInfo != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.QueryExecutionInfo, this.QueryExecutionInfo);
                        }
                        if (this.IndexUtilization != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.IndexUtilization, this.IndexUtilization);
                        }
                        if (this.GlobalCommittedLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.GlobalCommittedLSN, this.GlobalCommittedLSN);
                        }
                        if (this.NumberOfReadRegions != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.NumberOfReadRegions, this.NumberOfReadRegions);
                        }
                        if (this.OfferReplacePending != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.OfferReplacePending, this.OfferReplacePending);
                        }
                        if (this.ItemLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ItemLSN, this.ItemLSN);
                        }
                        if (this.RestoreState != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RestoreState, this.RestoreState);
                        }
                        if (this.CollectionSecurityIdentifier != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionSecurityIdentifier, this.CollectionSecurityIdentifier);
                        }
                        if (this.TransportRequestID != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TransportRequestID, this.TransportRequestID);
                        }
                        if (this.ShareThroughput != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ShareThroughput, this.ShareThroughput);
                        }
                        if (this.DisableRntbdChannel != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.DisableRntbdChannel, this.DisableRntbdChannel);
                        }
                        if (this.XDate != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.XDate, this.XDate);
                        }
                        if (this.LocalLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.LocalLSN, this.LocalLSN);
                        }
                        if (this.QuorumAckedLocalLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.QuorumAckedLocalLSN, this.QuorumAckedLocalLSN);
                        }
                        if (this.ItemLocalLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ItemLocalLSN, this.ItemLocalLSN);
                        }
                        if (this.HasTentativeWrites != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.HasTentativeWrites, this.HasTentativeWrites);
                        }
                        if (this.SessionToken != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.SessionToken, this.SessionToken);
                        }
                        if (this.ReplicatorLSNToGLSNDelta != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta, this.ReplicatorLSNToGLSNDelta);
                        }
                        if (this.ReplicatorLSNToLLSNDelta != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta, this.ReplicatorLSNToLLSNDelta);
                        }
                        if (this.VectorClockLocalProgress != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.VectorClockLocalProgress, this.VectorClockLocalProgress);
                        }
                        if (this.MinimumRUsForOffer != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.MinimumRUsForOffer, this.MinimumRUsForOffer);
                        }
                        if (this.XPConfigurationSessionsCount != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.XPConfigurationSessionsCount, this.XPConfigurationSessionsCount);
                        }
                        if (this.UnflushedMergLogEntryCount != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.UnflushedMergLogEntryCount, this.UnflushedMergLogEntryCount);
                        }
                        if (this.ResourceId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ResourceId, this.ResourceId);
                        }
                        if (this.TimeToLiveInSeconds != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.TimeToLiveInSeconds, this.TimeToLiveInSeconds);
                        }
                        if (this.ReplicaStatusRevoked != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ReplicaStatusRevoked, this.ReplicaStatusRevoked);
                        }
                        if (this.SoftMaxAllowedThroughput != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.SoftMaxAllowedThroughput, this.SoftMaxAllowedThroughput);
                        }
                        if (this.BackendRequestDurationMilliseconds != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds, this.BackendRequestDurationMilliseconds);
                        }
                        if (this.ServerVersion != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ServerVersion, this.ServerVersion);
                        }
                        if (this.ConfirmedStoreChecksum != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ConfirmedStoreChecksum, this.ConfirmedStoreChecksum);
                        }
                        if (this.TentativeStoreChecksum != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TentativeStoreChecksum, this.TentativeStoreChecksum);
                        }
                        if (this.CorrelatedActivityId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CorrelatedActivityId, this.CorrelatedActivityId);
                        }
                        if (this.PendingPKDelete != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.PendingPKDelete, this.PendingPKDelete);
                        }
                        if (this.AadAppliedRoleAssignmentId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId, this.AadAppliedRoleAssignmentId);
                        }
                        if (this.CollectionUniqueIndexReIndexProgress != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress, this.CollectionUniqueIndexReIndexProgress);
                        }
                        if (this.CollectionUniqueKeysUnderReIndex != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.CollectionUniqueKeysUnderReIndex, this.CollectionUniqueKeysUnderReIndex);
                        }
                        if (this.AnalyticalMigrationProgress != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.AnalyticalMigrationProgress, this.AnalyticalMigrationProgress);
                        }
                        if (this.TotalAccountThroughput != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.TotalAccountThroughput, this.TotalAccountThroughput);
                        }
                        if (this.ByokEncryptionProgress != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ByokEncryptionProgress, this.ByokEncryptionProgress);
                        }
                        if (this.AppliedPolicyElementId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.AppliedPolicyElementId, this.AppliedPolicyElementId);
                        }
                        if (this.MergeProgressBlocked != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.MergeProgressBlocked, this.MergeProgressBlocked);
                        }
                        if (this.ChangeFeedInfo != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.ChangeFeedInfo, this.ChangeFeedInfo);
                        }
                        if (this.ReIndexerProgress != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.ReIndexerProgress, this.ReIndexerProgress);
                        }
                        if (this.OfferReplacePendingForMerge != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.OfferReplacePendingForMerge, this.OfferReplacePendingForMerge);
                        }
                        if (this.OldestActiveSchemaId != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.OldestActiveSchemaId, this.OldestActiveSchemaId);
                        }
                        if (this.PhysicalPartitionId != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.PhysicalPartitionId, this.PhysicalPartitionId);
                        }
                        if (this.MaxContentLength != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.MaxContentLength, this.MaxContentLength);
                        }
                        if (this.IsOfferRestorePending != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.IsOfferRestorePending, this.IsOfferRestorePending);
                        }
                        if (this.InstantScaleUpValue != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.InstantScaleUpValue, this.InstantScaleUpValue);
                        }
                        if (this.RequiresDistribution != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.RequiresDistribution, this.RequiresDistribution);
                        }
                        if (this.CapacityType != null)
                        {
                            this.nameValueCollection.Add(HttpConstants.HttpHeaders.CapacityType, this.CapacityType);
                        }
                        if (this.MinGLSNForTombstoneOperations != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.MinGLSNForTombstoneOperations, this.MinGLSNForTombstoneOperations);
                        }
                        if (this.MinGLSNForDocumentOperations != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.MinGLSNForDocumentOperations, this.MinGLSNForDocumentOperations);
                        }
                        if (this.HighestTentativeWriteLLSN != null)
                        {
                            this.nameValueCollection.Add(WFConstants.BackendHeaders.HighestTentativeWriteLLSN, this.HighestTentativeWriteLLSN);
                        }
                        if(this.lazyNotCommonHeaders != null)
                        {
                            foreach (KeyValuePair<string, string> keyValuePair in this.lazyNotCommonHeaders)
                            {
                                this.nameValueCollection.Add(keyValuePair.Key, keyValuePair.Value);
                            }
                        }
                    }
                }
            }

            return this.nameValueCollection;
        }

        public void Remove(string key)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            this.UpdateHelper(
                key: key,
                value: null,
                throwIfAlreadyExists: false);
        }

        public string Get(string key)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            switch (key.Length)
            {
                case 3:
                    if (string.Equals(WFConstants.BackendHeaders.LSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.LSN;
                    }

                    break;
                case 4:
                    if (string.Equals(HttpConstants.HttpHeaders.ETag, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ETag;
                    }

                    break;
                case 9:
                    if (string.Equals(HttpConstants.HttpHeaders.XDate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.XDate;
                    }

                    break;
                case 12:
                    if (string.Equals(WFConstants.BackendHeaders.XPRole, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.XPRole;
                    }

                    break;
                case 13:
                    if (string.Equals(WFConstants.BackendHeaders.ItemLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ItemLSN;
                    }

                    break;
                case 14:
                    if (string.Equals(WFConstants.BackendHeaders.SubStatus, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SubStatus;
                    }

                    break;
                case 15:
                    if (string.Equals(HttpConstants.HttpHeaders.ItemCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ItemCount;
                    }

                    break;
                case 16:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ActivityId, key))
                    {
                        return this.ActivityId;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.LocalLSN, key))
                    {
                        return this.LocalLSN;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ActivityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ActivityId;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.LocalLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.LocalLSN;
                    }

                    break;
                case 17:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Continuation, key))
                    {
                        return this.Continuation;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.OwnerId, key))
                    {
                        return this.OwnerId;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Continuation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.Continuation;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.OwnerId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OwnerId;
                    }

                    break;
                case 18:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SchemaVersion, key))
                    {
                        return this.SchemaVersion;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RestoreState, key))
                    {
                        return this.RestoreState;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SessionToken, key))
                    {
                        return this.SessionToken;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SchemaVersion, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SchemaVersion;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RestoreState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RestoreState;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.SessionToken, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SessionToken;
                    }

                    break;
                case 19:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RetryAfterInMilliseconds, key))
                    {
                        return this.RetryAfterInMilliseconds;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MaxResourceQuota, key))
                    {
                        return this.MaxResourceQuota;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CurrentResourceQuotaUsage, key))
                    {
                        return this.CurrentResourceQuotaUsage;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RequestCharge, key))
                    {
                        return this.RequestCharge;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceId, key))
                    {
                        return this.ResourceId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ServerVersion, key))
                    {
                        return this.ServerVersion;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RetryAfterInMilliseconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RetryAfterInMilliseconds;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.MaxResourceQuota, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MaxResourceQuota;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.CurrentResourceQuotaUsage, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CurrentResourceQuotaUsage;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.RequestCharge, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RequestCharge;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ResourceId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ResourceId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ServerVersion, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ServerVersion;
                    }

                    break;
                case 21:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.OwnerFullName, key))
                    {
                        return this.OwnerFullName;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QuorumAckedLSN, key))
                    {
                        return this.QuorumAckedLSN;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ShareThroughput, key))
                    {
                        return this.ShareThroughput;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ItemLocalLSN, key))
                    {
                        return this.ItemLocalLSN;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.OwnerFullName, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OwnerFullName;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.QuorumAckedLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.QuorumAckedLSN;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ShareThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ShareThroughput;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ItemLocalLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ItemLocalLSN;
                    }

                    break;
                case 23:
                    if (string.Equals(HttpConstants.HttpHeaders.IndexingDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IndexingDirective;
                    }

                    break;
                case 24:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionServiceIndex, key))
                    {
                        return this.CollectionServiceIndex;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.DatabaseAccountId, key))
                    {
                        return this.DatabaseAccountId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds, key))
                    {
                        return this.BackendRequestDurationMilliseconds;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionServiceIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionServiceIndex;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.DatabaseAccountId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.DatabaseAccountId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.BackendRequestDurationMilliseconds;
                    }

                    break;
                case 25:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CurrentWriteQuorum, key))
                    {
                        return this.CurrentWriteQuorum;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.GlobalCommittedLSN, key))
                    {
                        return this.GlobalCommittedLSN;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TransportRequestID, key))
                    {
                        return this.TransportRequestID;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CapacityType, key))
                    {
                        return this.CapacityType;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CurrentWriteQuorum, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CurrentWriteQuorum;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.GlobalCommittedLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.GlobalCommittedLSN;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.TransportRequestID, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TransportRequestID;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.CapacityType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CapacityType;
                    }

                    break;
                case 26:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.LastStateChangeUtc, key))
                    {
                        return this.LastStateChangeUtc;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionPartitionIndex, key))
                    {
                        return this.CollectionPartitionIndex;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.OfferReplacePending, key))
                    {
                        return this.OfferReplacePending;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.DisableRntbdChannel, key))
                    {
                        return this.DisableRntbdChannel;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MinimumRUsForOffer, key))
                    {
                        return this.MinimumRUsForOffer;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsOfferRestorePending, key))
                    {
                        return this.IsOfferRestorePending;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.LastStateChangeUtc, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.LastStateChangeUtc;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.CollectionPartitionIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionPartitionIndex;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.OfferReplacePending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OfferReplacePending;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.DisableRntbdChannel, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.DisableRntbdChannel;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.MinimumRUsForOffer, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MinimumRUsForOffer;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.IsOfferRestorePending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsOfferRestorePending;
                    }

                    break;
                case 27:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.NumberOfReadRegions, key))
                    {
                        return this.NumberOfReadRegions;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AppliedPolicyElementId, key))
                    {
                        return this.AppliedPolicyElementId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ChangeFeedInfo, key))
                    {
                        return this.ChangeFeedInfo;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.NumberOfReadRegions, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.NumberOfReadRegions;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.AppliedPolicyElementId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.AppliedPolicyElementId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ChangeFeedInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ChangeFeedInfo;
                    }

                    break;
                case 28:
                    if (string.Equals(WFConstants.BackendHeaders.TimeToLiveInSeconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TimeToLiveInSeconds;
                    }

                    break;
                case 29:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CurrentReplicaSetSize, key))
                    {
                        return this.CurrentReplicaSetSize;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QueryMetrics, key))
                    {
                        return this.QueryMetrics;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IndexUtilization, key))
                    {
                        return this.IndexUtilization;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QuorumAckedLocalLSN, key))
                    {
                        return this.QuorumAckedLocalLSN;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MinGLSNForDocumentOperations, key))
                    {
                        return this.MinGLSNForDocumentOperations;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CurrentReplicaSetSize, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CurrentReplicaSetSize;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.QueryMetrics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.QueryMetrics;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.IndexUtilization, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IndexUtilization;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.QuorumAckedLocalLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.QuorumAckedLocalLSN;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.MinGLSNForDocumentOperations, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MinGLSNForDocumentOperations;
                    }

                    break;
                case 30:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReIndexerProgress, key))
                    {
                        return this.ReIndexerProgress;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MaxContentLength, key))
                    {
                        return this.MaxContentLength;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MinGLSNForTombstoneOperations, key))
                    {
                        return this.MinGLSNForTombstoneOperations;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ReIndexerProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ReIndexerProgress;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.MaxContentLength, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MaxContentLength;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.MinGLSNForTombstoneOperations, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MinGLSNForTombstoneOperations;
                    }

                    break;
                case 31:
                    if (string.Equals(WFConstants.BackendHeaders.RequestValidationFailure, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RequestValidationFailure;
                    }

                    break;
                case 32:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QueryExecutionInfo, key))
                    {
                        return this.QueryExecutionInfo;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId, key))
                    {
                        return this.AadAppliedRoleAssignmentId;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.QueryExecutionInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.QueryExecutionInfo;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.AadAppliedRoleAssignmentId;
                    }

                    break;
                case 33:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta, key))
                    {
                        return this.ReplicatorLSNToGLSNDelta;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta, key))
                    {
                        return this.ReplicatorLSNToLLSNDelta;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CorrelatedActivityId, key))
                    {
                        return this.CorrelatedActivityId;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PhysicalPartitionId, key))
                    {
                        return this.PhysicalPartitionId;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ReplicatorLSNToGLSNDelta;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ReplicatorLSNToLLSNDelta;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.CorrelatedActivityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CorrelatedActivityId;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.PhysicalPartitionId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PhysicalPartitionId;
                    }

                    break;
                case 34:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.LogResults, key))
                    {
                        return this.LogResults;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.HasTentativeWrites, key))
                    {
                        return this.HasTentativeWrites;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.InstantScaleUpValue, key))
                    {
                        return this.InstantScaleUpValue;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.LogResults, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.LogResults;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.HasTentativeWrites, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.HasTentativeWrites;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.InstantScaleUpValue, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.InstantScaleUpValue;
                    }

                    break;
                case 35:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PartitionKeyRangeId, key))
                    {
                        return this.PartitionKeyRangeId;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionSecurityIdentifier, key))
                    {
                        return this.CollectionSecurityIdentifier;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.OldestActiveSchemaId, key))
                    {
                        return this.OldestActiveSchemaId;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PartitionKeyRangeId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PartitionKeyRangeId;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.CollectionSecurityIdentifier, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionSecurityIdentifier;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.OldestActiveSchemaId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OldestActiveSchemaId;
                    }

                    break;
                case 36:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TotalAccountThroughput, key))
                    {
                        return this.TotalAccountThroughput;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ByokEncryptionProgress, key))
                    {
                        return this.ByokEncryptionProgress;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.OfferReplacePendingForMerge, key))
                    {
                        return this.OfferReplacePendingForMerge;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TotalAccountThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TotalAccountThroughput;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ByokEncryptionProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ByokEncryptionProgress;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.OfferReplacePendingForMerge, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.OfferReplacePendingForMerge;
                    }

                    break;
                case 37:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsRUPerMinuteUsed, key))
                    {
                        return this.IsRUPerMinuteUsed;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReplicaStatusRevoked, key))
                    {
                        return this.ReplicaStatusRevoked;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MergeProgressBlocked, key))
                    {
                        return this.MergeProgressBlocked;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IsRUPerMinuteUsed, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.IsRUPerMinuteUsed;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.ReplicaStatusRevoked, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ReplicaStatusRevoked;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.MergeProgressBlocked, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.MergeProgressBlocked;
                    }

                    break;
                case 38:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.VectorClockLocalProgress, key))
                    {
                        return this.VectorClockLocalProgress;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ConfirmedStoreChecksum, key))
                    {
                        return this.ConfirmedStoreChecksum;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TentativeStoreChecksum, key))
                    {
                        return this.TentativeStoreChecksum;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RequiresDistribution, key))
                    {
                        return this.RequiresDistribution;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.VectorClockLocalProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.VectorClockLocalProgress;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.ConfirmedStoreChecksum, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.ConfirmedStoreChecksum;
                    }

                    if (string.Equals(HttpConstants.HttpHeaders.TentativeStoreChecksum, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.TentativeStoreChecksum;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.RequiresDistribution, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.RequiresDistribution;
                    }

                    break;
                case 40:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.HighestTentativeWriteLLSN, key))
                    {
                        return this.HighestTentativeWriteLLSN;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SoftMaxAllowedThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.SoftMaxAllowedThroughput;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.HighestTentativeWriteLLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.HighestTentativeWriteLLSN;
                    }

                    break;
                case 41:
                    if (string.Equals(WFConstants.BackendHeaders.AnalyticalMigrationProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.AnalyticalMigrationProgress;
                    }

                    break;
                case 42:
                    if (string.Equals(WFConstants.BackendHeaders.XPConfigurationSessionsCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.XPConfigurationSessionsCount;
                    }

                    break;
                case 43:
                    if (string.Equals(WFConstants.BackendHeaders.PendingPKDelete, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.PendingPKDelete;
                    }

                    break;
                case 48:
                    if (string.Equals(WFConstants.BackendHeaders.CollectionUniqueKeysUnderReIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionUniqueKeysUnderReIndex;
                    }

                    break;
                case 49:
                    if (string.Equals(HttpConstants.HttpHeaders.CollectionLazyIndexingProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionLazyIndexingProgress;
                    }

                    break;
                case 52:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UnflushedMergLogEntryCount, key))
                    {
                        return this.UnflushedMergLogEntryCount;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress, key))
                    {
                        return this.CollectionUniqueIndexReIndexProgress;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.UnflushedMergLogEntryCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.UnflushedMergLogEntryCount;
                    }

                    if (string.Equals(WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionUniqueIndexReIndexProgress;
                    }

                    break;
                case 56:
                    if (string.Equals(HttpConstants.HttpHeaders.CollectionIndexTransformationProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.CollectionIndexTransformationProgress;
                    }

                    break;
                default:
                    break;
            }

            if (this.lazyNotCommonHeaders?.TryGetValue(key, out string value) ?? false)
            {
                return value;
            }

            return null;
        }

        public void Add(string key, string value)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            this.UpdateHelper(
                key: key,
                value: value,
                throwIfAlreadyExists: true);
        }

        public void Set(string key, string value)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            this.UpdateHelper(
                key: key,
                value: value,
                throwIfAlreadyExists: false);
        }

        public void UpdateHelper(
            string key,
            string value,
            bool throwIfAlreadyExists)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            switch (key.Length)
            {
                case 3:
                    if (string.Equals(WFConstants.BackendHeaders.LSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.LSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LSN = value;
                        return;
                    }
                    break;
                case 4:
                    if (string.Equals(HttpConstants.HttpHeaders.ETag, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ETag != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ETag = value;
                        return;
                    }
                    break;
                case 9:
                    if (string.Equals(HttpConstants.HttpHeaders.XDate, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.XDate != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.XDate = value;
                        return;
                    }
                    break;
                case 12:
                    if (string.Equals(WFConstants.BackendHeaders.XPRole, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.XPRole != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.XPRole = value;
                        return;
                    }
                    break;
                case 13:
                    if (string.Equals(WFConstants.BackendHeaders.ItemLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ItemLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ItemLSN = value;
                        return;
                    }
                    break;
                case 14:
                    if (string.Equals(WFConstants.BackendHeaders.SubStatus, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SubStatus != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SubStatus = value;
                        return;
                    }
                    break;
                case 15:
                    if (string.Equals(HttpConstants.HttpHeaders.ItemCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ItemCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ItemCount = value;
                        return;
                    }
                    break;
                case 16:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ActivityId, key))
                    {
                        if (throwIfAlreadyExists && this.ActivityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ActivityId = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.LocalLSN, key))
                    {
                        if (throwIfAlreadyExists && this.LocalLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LocalLSN = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ActivityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ActivityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ActivityId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.LocalLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.LocalLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LocalLSN = value;
                        return;
                    }
                    break;
                case 17:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.Continuation, key))
                    {
                        if (throwIfAlreadyExists && this.Continuation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Continuation = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.OwnerId, key))
                    {
                        if (throwIfAlreadyExists && this.OwnerId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OwnerId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.Continuation, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.Continuation != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.Continuation = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.OwnerId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OwnerId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OwnerId = value;
                        return;
                    }
                    break;
                case 18:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SchemaVersion, key))
                    {
                        if (throwIfAlreadyExists && this.SchemaVersion != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaVersion = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RestoreState, key))
                    {
                        if (throwIfAlreadyExists && this.RestoreState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RestoreState = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.SessionToken, key))
                    {
                        if (throwIfAlreadyExists && this.SessionToken != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SessionToken = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SchemaVersion, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SchemaVersion != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SchemaVersion = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RestoreState, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RestoreState != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RestoreState = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.SessionToken, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SessionToken != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SessionToken = value;
                        return;
                    }
                    break;
                case 19:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RetryAfterInMilliseconds, key))
                    {
                        if (throwIfAlreadyExists && this.RetryAfterInMilliseconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RetryAfterInMilliseconds = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MaxResourceQuota, key))
                    {
                        if (throwIfAlreadyExists && this.MaxResourceQuota != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MaxResourceQuota = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CurrentResourceQuotaUsage, key))
                    {
                        if (throwIfAlreadyExists && this.CurrentResourceQuotaUsage != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CurrentResourceQuotaUsage = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.RequestCharge, key))
                    {
                        if (throwIfAlreadyExists && this.RequestCharge != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequestCharge = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ResourceId, key))
                    {
                        if (throwIfAlreadyExists && this.ResourceId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ServerVersion, key))
                    {
                        if (throwIfAlreadyExists && this.ServerVersion != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ServerVersion = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RetryAfterInMilliseconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RetryAfterInMilliseconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RetryAfterInMilliseconds = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MaxResourceQuota, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MaxResourceQuota != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MaxResourceQuota = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CurrentResourceQuotaUsage, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CurrentResourceQuotaUsage != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CurrentResourceQuotaUsage = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.RequestCharge, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RequestCharge != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequestCharge = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ResourceId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ResourceId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ResourceId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ServerVersion, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ServerVersion != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ServerVersion = value;
                        return;
                    }
                    break;
                case 21:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.OwnerFullName, key))
                    {
                        if (throwIfAlreadyExists && this.OwnerFullName != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OwnerFullName = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QuorumAckedLSN, key))
                    {
                        if (throwIfAlreadyExists && this.QuorumAckedLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QuorumAckedLSN = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ShareThroughput, key))
                    {
                        if (throwIfAlreadyExists && this.ShareThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShareThroughput = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ItemLocalLSN, key))
                    {
                        if (throwIfAlreadyExists && this.ItemLocalLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ItemLocalLSN = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.OwnerFullName, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OwnerFullName != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OwnerFullName = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.QuorumAckedLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.QuorumAckedLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QuorumAckedLSN = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ShareThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ShareThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ShareThroughput = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ItemLocalLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ItemLocalLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ItemLocalLSN = value;
                        return;
                    }
                    break;
                case 23:
                    if (string.Equals(HttpConstants.HttpHeaders.IndexingDirective, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IndexingDirective != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IndexingDirective = value;
                        return;
                    }
                    break;
                case 24:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionServiceIndex, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionServiceIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionServiceIndex = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.DatabaseAccountId, key))
                    {
                        if (throwIfAlreadyExists && this.DatabaseAccountId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.DatabaseAccountId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds, key))
                    {
                        if (throwIfAlreadyExists && this.BackendRequestDurationMilliseconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BackendRequestDurationMilliseconds = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionServiceIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionServiceIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionServiceIndex = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.DatabaseAccountId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.DatabaseAccountId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.DatabaseAccountId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.BackendRequestDurationMilliseconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.BackendRequestDurationMilliseconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.BackendRequestDurationMilliseconds = value;
                        return;
                    }
                    break;
                case 25:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CurrentWriteQuorum, key))
                    {
                        if (throwIfAlreadyExists && this.CurrentWriteQuorum != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CurrentWriteQuorum = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.GlobalCommittedLSN, key))
                    {
                        if (throwIfAlreadyExists && this.GlobalCommittedLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.GlobalCommittedLSN = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TransportRequestID, key))
                    {
                        if (throwIfAlreadyExists && this.TransportRequestID != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransportRequestID = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.CapacityType, key))
                    {
                        if (throwIfAlreadyExists && this.CapacityType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CapacityType = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CurrentWriteQuorum, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CurrentWriteQuorum != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CurrentWriteQuorum = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.GlobalCommittedLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.GlobalCommittedLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.GlobalCommittedLSN = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TransportRequestID, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TransportRequestID != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TransportRequestID = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.CapacityType, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CapacityType != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CapacityType = value;
                        return;
                    }
                    break;
                case 26:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.LastStateChangeUtc, key))
                    {
                        if (throwIfAlreadyExists && this.LastStateChangeUtc != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LastStateChangeUtc = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionPartitionIndex, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionPartitionIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionPartitionIndex = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.OfferReplacePending, key))
                    {
                        if (throwIfAlreadyExists && this.OfferReplacePending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OfferReplacePending = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.DisableRntbdChannel, key))
                    {
                        if (throwIfAlreadyExists && this.DisableRntbdChannel != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.DisableRntbdChannel = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MinimumRUsForOffer, key))
                    {
                        if (throwIfAlreadyExists && this.MinimumRUsForOffer != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MinimumRUsForOffer = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.IsOfferRestorePending, key))
                    {
                        if (throwIfAlreadyExists && this.IsOfferRestorePending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsOfferRestorePending = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.LastStateChangeUtc, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.LastStateChangeUtc != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LastStateChangeUtc = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionPartitionIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionPartitionIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionPartitionIndex = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.OfferReplacePending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OfferReplacePending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OfferReplacePending = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.DisableRntbdChannel, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.DisableRntbdChannel != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.DisableRntbdChannel = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.MinimumRUsForOffer, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MinimumRUsForOffer != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MinimumRUsForOffer = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.IsOfferRestorePending, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsOfferRestorePending != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsOfferRestorePending = value;
                        return;
                    }
                    break;
                case 27:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.NumberOfReadRegions, key))
                    {
                        if (throwIfAlreadyExists && this.NumberOfReadRegions != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.NumberOfReadRegions = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AppliedPolicyElementId, key))
                    {
                        if (throwIfAlreadyExists && this.AppliedPolicyElementId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AppliedPolicyElementId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ChangeFeedInfo, key))
                    {
                        if (throwIfAlreadyExists && this.ChangeFeedInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ChangeFeedInfo = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.NumberOfReadRegions, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.NumberOfReadRegions != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.NumberOfReadRegions = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.AppliedPolicyElementId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.AppliedPolicyElementId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AppliedPolicyElementId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ChangeFeedInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ChangeFeedInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ChangeFeedInfo = value;
                        return;
                    }
                    break;
                case 28:
                    if (string.Equals(WFConstants.BackendHeaders.TimeToLiveInSeconds, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TimeToLiveInSeconds != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TimeToLiveInSeconds = value;
                        return;
                    }
                    break;
                case 29:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CurrentReplicaSetSize, key))
                    {
                        if (throwIfAlreadyExists && this.CurrentReplicaSetSize != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CurrentReplicaSetSize = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QueryMetrics, key))
                    {
                        if (throwIfAlreadyExists && this.QueryMetrics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QueryMetrics = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IndexUtilization, key))
                    {
                        if (throwIfAlreadyExists && this.IndexUtilization != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IndexUtilization = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QuorumAckedLocalLSN, key))
                    {
                        if (throwIfAlreadyExists && this.QuorumAckedLocalLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QuorumAckedLocalLSN = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MinGLSNForDocumentOperations, key))
                    {
                        if (throwIfAlreadyExists && this.MinGLSNForDocumentOperations != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MinGLSNForDocumentOperations = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CurrentReplicaSetSize, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CurrentReplicaSetSize != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CurrentReplicaSetSize = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.QueryMetrics, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.QueryMetrics != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QueryMetrics = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IndexUtilization, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IndexUtilization != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IndexUtilization = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.QuorumAckedLocalLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.QuorumAckedLocalLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QuorumAckedLocalLSN = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.MinGLSNForDocumentOperations, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MinGLSNForDocumentOperations != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MinGLSNForDocumentOperations = value;
                        return;
                    }
                    break;
                case 30:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReIndexerProgress, key))
                    {
                        if (throwIfAlreadyExists && this.ReIndexerProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReIndexerProgress = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.MaxContentLength, key))
                    {
                        if (throwIfAlreadyExists && this.MaxContentLength != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MaxContentLength = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MinGLSNForTombstoneOperations, key))
                    {
                        if (throwIfAlreadyExists && this.MinGLSNForTombstoneOperations != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MinGLSNForTombstoneOperations = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ReIndexerProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ReIndexerProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReIndexerProgress = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.MaxContentLength, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MaxContentLength != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MaxContentLength = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.MinGLSNForTombstoneOperations, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MinGLSNForTombstoneOperations != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MinGLSNForTombstoneOperations = value;
                        return;
                    }
                    break;
                case 31:
                    if (string.Equals(WFConstants.BackendHeaders.RequestValidationFailure, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RequestValidationFailure != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequestValidationFailure = value;
                        return;
                    }
                    break;
                case 32:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.QueryExecutionInfo, key))
                    {
                        if (throwIfAlreadyExists && this.QueryExecutionInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QueryExecutionInfo = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId, key))
                    {
                        if (throwIfAlreadyExists && this.AadAppliedRoleAssignmentId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AadAppliedRoleAssignmentId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.QueryExecutionInfo, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.QueryExecutionInfo != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.QueryExecutionInfo = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.AadAppliedRoleAssignmentId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.AadAppliedRoleAssignmentId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AadAppliedRoleAssignmentId = value;
                        return;
                    }
                    break;
                case 33:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta, key))
                    {
                        if (throwIfAlreadyExists && this.ReplicatorLSNToGLSNDelta != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReplicatorLSNToGLSNDelta = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta, key))
                    {
                        if (throwIfAlreadyExists && this.ReplicatorLSNToLLSNDelta != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReplicatorLSNToLLSNDelta = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CorrelatedActivityId, key))
                    {
                        if (throwIfAlreadyExists && this.CorrelatedActivityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CorrelatedActivityId = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.PhysicalPartitionId, key))
                    {
                        if (throwIfAlreadyExists && this.PhysicalPartitionId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PhysicalPartitionId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ReplicatorLSNToGLSNDelta, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ReplicatorLSNToGLSNDelta != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReplicatorLSNToGLSNDelta = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ReplicatorLSNToLLSNDelta, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ReplicatorLSNToLLSNDelta != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReplicatorLSNToLLSNDelta = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CorrelatedActivityId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CorrelatedActivityId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CorrelatedActivityId = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.PhysicalPartitionId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PhysicalPartitionId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PhysicalPartitionId = value;
                        return;
                    }
                    break;
                case 34:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.LogResults, key))
                    {
                        if (throwIfAlreadyExists && this.LogResults != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LogResults = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.HasTentativeWrites, key))
                    {
                        if (throwIfAlreadyExists && this.HasTentativeWrites != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HasTentativeWrites = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.InstantScaleUpValue, key))
                    {
                        if (throwIfAlreadyExists && this.InstantScaleUpValue != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.InstantScaleUpValue = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.LogResults, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.LogResults != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.LogResults = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.HasTentativeWrites, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.HasTentativeWrites != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HasTentativeWrites = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.InstantScaleUpValue, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.InstantScaleUpValue != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.InstantScaleUpValue = value;
                        return;
                    }
                    break;
                case 35:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.PartitionKeyRangeId, key))
                    {
                        if (throwIfAlreadyExists && this.PartitionKeyRangeId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionKeyRangeId = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionSecurityIdentifier, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionSecurityIdentifier != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionSecurityIdentifier = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.OldestActiveSchemaId, key))
                    {
                        if (throwIfAlreadyExists && this.OldestActiveSchemaId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OldestActiveSchemaId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.PartitionKeyRangeId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PartitionKeyRangeId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PartitionKeyRangeId = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionSecurityIdentifier, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionSecurityIdentifier != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionSecurityIdentifier = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.OldestActiveSchemaId, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OldestActiveSchemaId != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OldestActiveSchemaId = value;
                        return;
                    }
                    break;
                case 36:
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TotalAccountThroughput, key))
                    {
                        if (throwIfAlreadyExists && this.TotalAccountThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TotalAccountThroughput = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ByokEncryptionProgress, key))
                    {
                        if (throwIfAlreadyExists && this.ByokEncryptionProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ByokEncryptionProgress = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.OfferReplacePendingForMerge, key))
                    {
                        if (throwIfAlreadyExists && this.OfferReplacePendingForMerge != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OfferReplacePendingForMerge = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TotalAccountThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TotalAccountThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TotalAccountThroughput = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ByokEncryptionProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ByokEncryptionProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ByokEncryptionProgress = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.OfferReplacePendingForMerge, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.OfferReplacePendingForMerge != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.OfferReplacePendingForMerge = value;
                        return;
                    }
                    break;
                case 37:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.IsRUPerMinuteUsed, key))
                    {
                        if (throwIfAlreadyExists && this.IsRUPerMinuteUsed != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsRUPerMinuteUsed = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.ReplicaStatusRevoked, key))
                    {
                        if (throwIfAlreadyExists && this.ReplicaStatusRevoked != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReplicaStatusRevoked = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.MergeProgressBlocked, key))
                    {
                        if (throwIfAlreadyExists && this.MergeProgressBlocked != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MergeProgressBlocked = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.IsRUPerMinuteUsed, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.IsRUPerMinuteUsed != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.IsRUPerMinuteUsed = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.ReplicaStatusRevoked, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ReplicaStatusRevoked != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ReplicaStatusRevoked = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.MergeProgressBlocked, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.MergeProgressBlocked != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.MergeProgressBlocked = value;
                        return;
                    }
                    break;
                case 38:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.VectorClockLocalProgress, key))
                    {
                        if (throwIfAlreadyExists && this.VectorClockLocalProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.VectorClockLocalProgress = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.ConfirmedStoreChecksum, key))
                    {
                        if (throwIfAlreadyExists && this.ConfirmedStoreChecksum != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ConfirmedStoreChecksum = value;
                        return;
                    }
                    if (object.ReferenceEquals(HttpConstants.HttpHeaders.TentativeStoreChecksum, key))
                    {
                        if (throwIfAlreadyExists && this.TentativeStoreChecksum != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TentativeStoreChecksum = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.RequiresDistribution, key))
                    {
                        if (throwIfAlreadyExists && this.RequiresDistribution != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequiresDistribution = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.VectorClockLocalProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.VectorClockLocalProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.VectorClockLocalProgress = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.ConfirmedStoreChecksum, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.ConfirmedStoreChecksum != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.ConfirmedStoreChecksum = value;
                        return;
                    }
                    if (string.Equals(HttpConstants.HttpHeaders.TentativeStoreChecksum, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.TentativeStoreChecksum != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.TentativeStoreChecksum = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.RequiresDistribution, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.RequiresDistribution != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.RequiresDistribution = value;
                        return;
                    }
                    break;
                case 40:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.HighestTentativeWriteLLSN, key))
                    {
                        if (throwIfAlreadyExists && this.HighestTentativeWriteLLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HighestTentativeWriteLLSN = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.SoftMaxAllowedThroughput, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.SoftMaxAllowedThroughput != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.SoftMaxAllowedThroughput = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.HighestTentativeWriteLLSN, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.HighestTentativeWriteLLSN != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.HighestTentativeWriteLLSN = value;
                        return;
                    }
                    break;
                case 41:
                    if (string.Equals(WFConstants.BackendHeaders.AnalyticalMigrationProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.AnalyticalMigrationProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.AnalyticalMigrationProgress = value;
                        return;
                    }
                    break;
                case 42:
                    if (string.Equals(WFConstants.BackendHeaders.XPConfigurationSessionsCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.XPConfigurationSessionsCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.XPConfigurationSessionsCount = value;
                        return;
                    }
                    break;
                case 43:
                    if (string.Equals(WFConstants.BackendHeaders.PendingPKDelete, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.PendingPKDelete != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.PendingPKDelete = value;
                        return;
                    }
                    break;
                case 48:
                    if (string.Equals(WFConstants.BackendHeaders.CollectionUniqueKeysUnderReIndex, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionUniqueKeysUnderReIndex != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionUniqueKeysUnderReIndex = value;
                        return;
                    }
                    break;
                case 49:
                    if (string.Equals(HttpConstants.HttpHeaders.CollectionLazyIndexingProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionLazyIndexingProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionLazyIndexingProgress = value;
                        return;
                    }
                    break;
                case 52:
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.UnflushedMergLogEntryCount, key))
                    {
                        if (throwIfAlreadyExists && this.UnflushedMergLogEntryCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UnflushedMergLogEntryCount = value;
                        return;
                    }
                    if (object.ReferenceEquals(WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress, key))
                    {
                        if (throwIfAlreadyExists && this.CollectionUniqueIndexReIndexProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionUniqueIndexReIndexProgress = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.UnflushedMergLogEntryCount, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.UnflushedMergLogEntryCount != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.UnflushedMergLogEntryCount = value;
                        return;
                    }
                    if (string.Equals(WFConstants.BackendHeaders.CollectionUniqueIndexReIndexProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionUniqueIndexReIndexProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionUniqueIndexReIndexProgress = value;
                        return;
                    }
                    break;
                case 56:
                    if (string.Equals(HttpConstants.HttpHeaders.CollectionIndexTransformationProgress, key, StringComparison.OrdinalIgnoreCase))
                    {
                        if (throwIfAlreadyExists && this.CollectionIndexTransformationProgress != null)
                        {
                            throw new ArgumentException($"The {key} already exists in the collection");
                        }

                        this.CollectionIndexTransformationProgress = value;
                        return;
                    }
                    break;
                default:
                    break;
            }

            if (throwIfAlreadyExists)
            {
                this.GetOrCreateLazyHeaders().Add(key, value);
            }
            else
            {
                if (value == null)
                {
                    // don't create lazyNotCommonHeaders if it doesn't already exist

                    if (this.lazyNotCommonHeaders != null)
                    {
                        this.lazyNotCommonHeaders.Remove(key);
                    }
                }
                else
                {
                    this.GetOrCreateLazyHeaders()[key] = value;
                }
            }
        }

        private Dictionary<string, string> GetOrCreateLazyHeaders()
        {
            Dictionary<string, string> lazyHeaders = this.lazyNotCommonHeaders;

            if (lazyHeaders == null)
            {
               // risk over allocating, but everyone will get the same dictionary in the end
               Dictionary<string, string> newDict = new Dictionary<string, string>(StoreResponseNameValueCollection.DefaultStringComparer);
               
               // Either swap newDict in (getting back the old null) or obtain the Dictionary some other thread swapped in
               // (and then we drop newDict on the floor).
               lazyHeaders = Interlocked.CompareExchange(ref this.lazyNotCommonHeaders, newDict, null) ?? newDict;
            }

            return lazyHeaders;
        }
    }
}