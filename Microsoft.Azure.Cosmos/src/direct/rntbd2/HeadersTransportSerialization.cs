//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA HeadersTransportSerialization.tt
namespace Microsoft.Azure.Documents.Rntbd
{
    using System;
    using System.Diagnostics;
    using System.Globalization;
#if COSMOSCLIENT
    using Microsoft.Azure.Cosmos.Rntbd;
#endif
    using Microsoft.Azure.Documents.Collections;
    using static Microsoft.Azure.Documents.RntbdConstants;

    /// <summary>
    /// THIS IS AN AUTOGENERATED FILE. ALL UPDATES SHOULD BE DONE VIA RntbdConstants.tt
    /// This allows the RntbdTokenStreams to be correctly ordered and optimized.
    /// If you need to add a new RntbdToken to any of the existing types, do it on the RntbdConstants.tt file
    /// </summary>
    internal static class HeadersTransportSerialization
    {
        public static StoreResponseNameValueCollection BuildStoreResponseNameValueCollection(
            Guid activityId,
            string serverVersion,
            ref BytesDeserializer rntbdHeaderReader)
        {
            StoreResponseNameValueCollection responseHeaders = new()
            {
                ActivityId = activityId.ToString(),
                ServerVersion = serverVersion
            };

            while(rntbdHeaderReader.Position < rntbdHeaderReader.Length)
            {
                ResponseIdentifiers identifier = (ResponseIdentifiers)rntbdHeaderReader.ReadUInt16();
                switch (identifier)
                {
                    case ResponseIdentifiers.TransportRequestID:
                    {
                            responseHeaders.TransportRequestID = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ServerDateTimeUtc:
                    {
                            responseHeaders.XDate = HeadersTransportSerialization.ReadSmallStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.SubStatus:
                    {
                            responseHeaders.SubStatus = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ETag:
                    {
                            responseHeaders.ETag = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ResourceName:
                    {
                            responseHeaders.ResourceId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.RequestCharge:
                    {
                            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
                        Debug.Assert(type == RntbdTokenTypes.Double);
                        double value = rntbdHeaderReader.ReadDouble();
                        responseHeaders.RequestCharge = string.Format(CultureInfo.InvariantCulture, "{0:0.##}", value);
                            break;
                    }

                    case ResponseIdentifiers.SessionToken:
                    {
                            responseHeaders.SessionToken = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ContinuationToken:
                    {
                            responseHeaders.Continuation = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.LSN:
                    {
                            responseHeaders.LSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.GlobalCommittedLSN:
                    {
                            responseHeaders.GlobalCommittedLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ItemLSN:
                    {
                            responseHeaders.ItemLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.LocalLSN:
                    {
                            responseHeaders.LocalLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.QuorumAckedLocalLSN:
                    {
                            responseHeaders.QuorumAckedLocalLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ItemLocalLSN:
                    {
                            responseHeaders.ItemLocalLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.LastStateChangeDateTime:
                    {
                            responseHeaders.LastStateChangeUtc = HeadersTransportSerialization.ReadSmallStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.RetryAfterMilliseconds:
                    {
                            responseHeaders.RetryAfterInMilliseconds = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.IndexingDirective:
                    {
                            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
                        Debug.Assert(type == RntbdTokenTypes.Byte);
                        byte value = rntbdHeaderReader.ReadByte();
                        string indexingDirective = value switch
                        {
                            (byte)RntbdConstants.RntbdIndexingDirective.Default => IndexingDirectiveStrings.Default,
                            (byte)RntbdConstants.RntbdIndexingDirective.Exclude => IndexingDirectiveStrings.Exclude,
                            (byte)RntbdConstants.RntbdIndexingDirective.Include => IndexingDirectiveStrings.Include,
                            _ => throw new Exception(),
                        };
                        responseHeaders.IndexingDirective = indexingDirective;
                            break;
                    }

                    case ResponseIdentifiers.StorageMaxResoureQuota:
                    {
                            responseHeaders.MaxResourceQuota = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.StorageResourceQuotaUsage:
                    {
                            responseHeaders.CurrentResourceQuotaUsage = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.SchemaVersion:
                    {
                            responseHeaders.SchemaVersion = HeadersTransportSerialization.ReadSmallStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionPartitionIndex:
                    {
                            responseHeaders.CollectionPartitionIndex = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionServiceIndex:
                    {
                            responseHeaders.CollectionServiceIndex = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ItemCount:
                    {
                            responseHeaders.ItemCount = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.OwnerFullName:
                    {
                            responseHeaders.OwnerFullName = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.OwnerId:
                    {
                            responseHeaders.OwnerId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.DatabaseAccountId:
                    {
                            responseHeaders.DatabaseAccountId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.QuorumAckedLSN:
                    {
                            responseHeaders.QuorumAckedLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.RequestValidationFailure:
                    {
                            responseHeaders.RequestValidationFailure = HeadersTransportSerialization.ReadIntBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionUpdateProgress:
                    {
                            responseHeaders.CollectionIndexTransformationProgress = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CurrentWriteQuorum:
                    {
                            responseHeaders.CurrentWriteQuorum = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CurrentReplicaSetSize:
                    {
                            responseHeaders.CurrentReplicaSetSize = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionLazyIndexProgress:
                    {
                            responseHeaders.CollectionLazyIndexingProgress = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.PartitionKeyRangeId:
                    {
                            responseHeaders.PartitionKeyRangeId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.LogResults:
                    {
                            responseHeaders.LogResults = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.XPRole:
                    {
                            responseHeaders.XPRole = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.IsRUPerMinuteUsed:
                    {
                            responseHeaders.IsRUPerMinuteUsed = HeadersTransportSerialization.ReadIntBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.QueryMetrics:
                    {
                            responseHeaders.QueryMetrics = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.NumberOfReadRegions:
                    {
                            responseHeaders.NumberOfReadRegions = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.OfferReplacePending:
                    {
                            responseHeaders.OfferReplacePending = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.RestoreState:
                    {
                            responseHeaders.RestoreState = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionSecurityIdentifier:
                    {
                            responseHeaders.CollectionSecurityIdentifier = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ShareThroughput:
                    {
                            responseHeaders.ShareThroughput = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.DisableRntbdChannel:
                    {
                            responseHeaders.DisableRntbdChannel = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.HasTentativeWrites:
                    {
                            responseHeaders.HasTentativeWrites = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ReplicatorLSNToGLSNDelta:
                    {
                            responseHeaders.ReplicatorLSNToGLSNDelta = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ReplicatorLSNToLLSNDelta:
                    {
                            responseHeaders.ReplicatorLSNToLLSNDelta = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.VectorClockLocalProgress:
                    {
                            responseHeaders.VectorClockLocalProgress = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.MinimumRUsForOffer:
                    {
                            responseHeaders.MinimumRUsForOffer = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.XPConfigurationSessionsCount:
                    {
                            responseHeaders.XPConfigurationSessionsCount = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.IndexUtilization:
                    {
                            responseHeaders.IndexUtilization = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.QueryExecutionInfo:
                    {
                            responseHeaders.QueryExecutionInfo = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.UnflushedMergeLogEntryCount:
                    {
                            responseHeaders.UnflushedMergLogEntryCount = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.TimeToLiveInSeconds:
                    {
                            responseHeaders.TimeToLiveInSeconds = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ReplicaStatusRevoked:
                    {
                            responseHeaders.ReplicaStatusRevoked = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.SoftMaxAllowedThroughput:
                    {
                            responseHeaders.SoftMaxAllowedThroughput = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.BackendRequestDurationMilliseconds:
                    {
                            responseHeaders.BackendRequestDurationMilliseconds = HeadersTransportSerialization.ReadDoubleHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CorrelatedActivityId:
                    {
                            responseHeaders.CorrelatedActivityId = HeadersTransportSerialization.ReadGuidHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ConfirmedStoreChecksum:
                    {
                            responseHeaders.ConfirmedStoreChecksum = HeadersTransportSerialization.ReadULongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.TentativeStoreChecksum:
                    {
                            responseHeaders.TentativeStoreChecksum = HeadersTransportSerialization.ReadULongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.PendingPKDelete:
                    {
                            responseHeaders.PendingPKDelete = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.AadAppliedRoleAssignmentId:
                    {
                            responseHeaders.AadAppliedRoleAssignmentId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionUniqueIndexReIndexProgress:
                    {
                            responseHeaders.CollectionUniqueIndexReIndexProgress = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CollectionUniqueKeysUnderReIndex:
                    {
                            responseHeaders.CollectionUniqueKeysUnderReIndex = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.AnalyticalMigrationProgress:
                    {
                            responseHeaders.AnalyticalMigrationProgress = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.TotalAccountThroughput:
                    {
                            responseHeaders.TotalAccountThroughput = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.BYOKEncryptionProgress:
                    {
                            responseHeaders.ByokEncryptionProgress = HeadersTransportSerialization.ReadIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.AppliedPolicyElementId:
                    {
                            responseHeaders.AppliedPolicyElementId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.MergeProgressBlocked:
                    {
                            responseHeaders.MergeProgressBlocked = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ChangeFeedInfo:
                    {
                            responseHeaders.ChangeFeedInfo = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.ReindexerProgress:
                    {
                            responseHeaders.ReIndexerProgress = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.OfferReplacePendingForMerge:
                    {
                            responseHeaders.OfferReplacePendingForMerge = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.MaxContentLength:
                    {
                            responseHeaders.MaxContentLength = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.OldestActiveSchemaId:
                    {
                            responseHeaders.OldestActiveSchemaId = HeadersTransportSerialization.ReadIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.PhysicalPartitionId:
                    {
                            responseHeaders.PhysicalPartitionId = HeadersTransportSerialization.ReadStringHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.OfferRestorePending:
                    {
                            responseHeaders.IsOfferRestorePending = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.InstantScaleUpValue:
                    {
                            responseHeaders.InstantScaleUpValue = HeadersTransportSerialization.ReadUIntHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.RequiresDistribution:
                    {
                            responseHeaders.RequiresDistribution = HeadersTransportSerialization.ReadBoolHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.CapacityType:
                    {
                            responseHeaders.CapacityType = HeadersTransportSerialization.ReadUShortHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.MinGLSNForDocumentOperations:
                    {
                            responseHeaders.MinGLSNForDocumentOperations = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.MinGLSNForTombstoneOperations:
                    {
                            responseHeaders.MinGLSNForTombstoneOperations = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                            break;
                    }

                    case ResponseIdentifiers.HighestTentativeWriteLLSN:
                    {
                        responseHeaders.HighestTentativeWriteLLSN = HeadersTransportSerialization.ReadLongHeader(ref rntbdHeaderReader);
                        break;
                    }

                    default:
                        {
                            // We have to read all headers if those are in the middle of the payload
                            // For example ReadsPerformed, WritesPerformed,QueriesPerformed, IndexTermsGenerated and ScriptsExecuted 
                            HeadersTransportSerialization.AdvanceByRntbdHeader(ref rntbdHeaderReader, identifier);
                            break;
                        }
                }
            }

            return responseHeaders;
        }

        /// <summary>
        /// Reads PayloadPresent RNTBD header to tell if payload is present. Resets the Position back on <see cref="BytesDeserializer"/>
        /// if PayloadPresent was not the first header to make sure no other data is lost before the final headers processing
        /// in TransportSerialization.MakeStoreResponse(StatusCodes, Guid, Stream, string, BytesDeserializer, out uint?)"/>.
        /// </summary>
        /// <remarks>
        /// TODO: https://msdata.visualstudio.com/CosmosDB/_workitems/edit/2105986 consider initializing 
        /// StoreResponseNameValueCollection on the main "receive" thread and reuse headers processing.
        /// </remarks>
        internal static bool TryParseMandatoryResponseHeaders(ref BytesDeserializer rntbdHeaderReader, out bool payloadPresent, out uint transportRequestId)
        {
            payloadPresent = default;
            transportRequestId = default;

            bool hasPayloadPresent = false;
            bool hasTransportRequestId = false;

            while((!hasPayloadPresent || !hasTransportRequestId) && rntbdHeaderReader.Position < rntbdHeaderReader.Length)
            {
                ResponseIdentifiers identifier = (ResponseIdentifiers)rntbdHeaderReader.ReadUInt16();
                if (identifier == ResponseIdentifiers.PayloadPresent)
                {
                    RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
                    Debug.Assert(type == RntbdTokenTypes.Byte);

                    hasPayloadPresent = true;
                    payloadPresent = rntbdHeaderReader.ReadByte() != 0x0;
                }
                else if (identifier == ResponseIdentifiers.TransportRequestID)
                {
                    RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
                    Debug.Assert(type == RntbdTokenTypes.ULong);

                    hasTransportRequestId = true;
                    transportRequestId = rntbdHeaderReader.ReadUInt32();
                }
                else
                {
                    HeadersTransportSerialization.AdvanceByRntbdHeader(ref rntbdHeaderReader, identifier);
                }
            }
            
            return hasPayloadPresent && hasTransportRequestId;
        }

        /// <summary>
        /// Offsetting <see cref="BytesDeserializer"/> by current header. Used to skip unused RNTBD headers.
        /// </summary>
        private static void AdvanceByRntbdHeader(ref BytesDeserializer rntbdHeaderReader, ResponseIdentifiers identifier)
        {
            RntbdTokenTypes tokenType = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            switch (tokenType)
            {
                case RntbdTokenTypes.Byte:
                    {
                        rntbdHeaderReader.ReadByte();
                        return;
                    }

                case RntbdTokenTypes.UShort:
                    {
                        rntbdHeaderReader.AdvancePositionByUInt16();
                        return;
                    }

                case RntbdTokenTypes.ULong:
                    {
                        rntbdHeaderReader.AdvancePositionByUInt32();
                        return;
                    }

                case RntbdTokenTypes.Long:
                    {
                        rntbdHeaderReader.AdvancePositionByInt32();
                        return;
                    }

                case RntbdTokenTypes.ULongLong:
                    {
                        rntbdHeaderReader.AdvancePositionByUInt64();
                        return;
                    }

                case RntbdTokenTypes.LongLong:
                    {
                        rntbdHeaderReader.AdvancePositionByInt64();
                        return;
                    }

                case RntbdTokenTypes.Float:
                    {
                        rntbdHeaderReader.AdvancePositionBySingle();
                        return;
                    }

                case RntbdTokenTypes.Double:
                    {
                        rntbdHeaderReader.AdvancePositionByDouble();
                        return;
                    }

                case RntbdTokenTypes.Guid:
                    {
                        rntbdHeaderReader.AdvancePositionByGuid();
                        return;
                    }

                case RntbdTokenTypes.SmallBytes:
                case RntbdTokenTypes.SmallString:
                    {
                        byte length = rntbdHeaderReader.ReadByte();
                        rntbdHeaderReader.AdvancePositionByBytes(length);
                        return;
                    }
                case RntbdTokenTypes.Bytes:
                case RntbdTokenTypes.String:
                    {
                        ushort length = rntbdHeaderReader.ReadUInt16();
                        rntbdHeaderReader.AdvancePositionByBytes(length);
                        return;
                    }
                case RntbdTokenTypes.ULongBytes:
                case RntbdTokenTypes.ULongString:
                    {
                        uint length = rntbdHeaderReader.ReadUInt32();
                        rntbdHeaderReader.AdvancePositionByBytes((int)length);
                        return;
                    }
                default:
                    {
                        INameValueCollection validationFailureResponseHeader = new DictionaryNameValueCollection();
                        validationFailureResponseHeader.Add(HttpConstants.HttpHeaders.RequestValidationFailure, "1");
                        throw new InternalServerErrorException($"Unrecognized token type {tokenType} with identifier {identifier} found in RNTBD token stream", validationFailureResponseHeader);
                    }
            }
        }

        private static string ReadStringHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.String);
            ushort length = rntbdHeaderReader.ReadUInt16();
            return BytesSerializer.GetStringFromBytes(rntbdHeaderReader.ReadBytes(length));
        }

        private static string ReadSmallStringHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.SmallString);
            byte length = rntbdHeaderReader.ReadByte();
            return BytesSerializer.GetStringFromBytes(rntbdHeaderReader.ReadBytes(length));
        }

        private static string ReadDoubleHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.Double);
            return rntbdHeaderReader.ReadDouble().ToString(CultureInfo.InvariantCulture);
        }

        private static string ReadIntHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.Long);
            return rntbdHeaderReader.ReadInt32().ToString(CultureInfo.InvariantCulture);
        }

        private static string ReadLongHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.LongLong);
            return rntbdHeaderReader.ReadInt64().ToString(CultureInfo.InvariantCulture);
        }

        private static string ReadIntBoolHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.Byte);
            return rntbdHeaderReader.ReadByte() != 0x0 ? "1" : "0";
        }

        private static string ReadBoolHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.Byte);
            return rntbdHeaderReader.ReadByte() != 0x0 ? "true" : "false";
        }

        private static string ReadGuidHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.Guid);
            return rntbdHeaderReader.ReadGuid().ToString();
        }

        private static string ReadUIntHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.ULong);
            return rntbdHeaderReader.ReadUInt32().ToString();
        }

        private static string ReadUShortHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.UShort);
            return rntbdHeaderReader.ReadUInt16().ToString(CultureInfo.InvariantCulture);
        }

        private static string ReadULongHeader(ref BytesDeserializer rntbdHeaderReader)
        {
            RntbdTokenTypes type = (RntbdTokenTypes)rntbdHeaderReader.ReadByte();
            Debug.Assert(type == RntbdTokenTypes.ULongLong);
            return rntbdHeaderReader.ReadUInt64().ToString();
        }
    }
}
