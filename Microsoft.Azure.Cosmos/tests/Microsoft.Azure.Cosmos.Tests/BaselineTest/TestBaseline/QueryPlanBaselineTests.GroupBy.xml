<Results>
  <Result>
    <Input>
      <Description>non simple aggregate</Description>
      <Query>
                SELECT c.name, ABS(AVG(c.age)) as abs_avg_age
                FROM c
                GROUP BY c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <Exception>TryCatch resulted in an exception.</Exception>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>SELECT * single</Description>
      <Query>
                SELECT *
                FROM c
                GROUP BY c.age</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <Exception>TryCatch resulted in an exception.</Exception>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>SELECT * multi</Description>
      <Query>
                SELECT *
                FROM c
                GROUP BY c.age, c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <Exception>TryCatch resulted in an exception.</Exception>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>SELECT VALUE</Description>
      <Query>
                SELECT VALUE c.age
                FROM c
                GROUP BY c.age</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.age</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType />
          <GroupByAliases />
          <HasSelectValue>True</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.age}] AS groupByItems, c.age AS payload
FROM c
GROUP BY c.age]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>SELECT VALUE object create</Description>
      <Query>
                SELECT VALUE {"age": c.age}
                FROM c
                GROUP BY {"age": c.age}</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>{"age": c.age}</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType />
          <GroupByAliases />
          <HasSelectValue>True</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": {"age": c.age}}] AS groupByItems, {"age": c.age} AS payload
FROM c
GROUP BY {"age": c.age}]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Simple GROUP BY with no aggregates</Description>
      <Query>
                SELECT c.age, c.name
                FROM c
                GROUP BY c.age, c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.age</GroupByExpression>
            <GroupByExpression>c.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>age</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>age</Alias>
            <Alias>name</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.age}, {"item": c.name}] AS groupByItems, {"age": c.age, "name": c.name} AS payload
FROM c
GROUP BY c.age, c.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>GROUP BY with aggregates</Description>
      <Query>
                SELECT c.team, c.name, COUNT(1) AS count, AVG(c.age) AS avg_age, MIN(c.age) AS min_age, MAX(c.age) AS max_age 
                FROM c
                GROUP BY c.team, c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.team</GroupByExpression>
            <GroupByExpression>c.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>min_age</Alias>
              <AggregateOperator>Min</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>max_age</Alias>
              <AggregateOperator>Max</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>count</Alias>
              <AggregateOperator>Count</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>team</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>avg_age</Alias>
              <AggregateOperator>Average</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>team</Alias>
            <Alias>name</Alias>
            <Alias>count</Alias>
            <Alias>avg_age</Alias>
            <Alias>min_age</Alias>
            <Alias>max_age</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.team}, {"item": c.name}] AS groupByItems, {"team": c.team, "name": c.name, "count": {"item": COUNT(1)}, "avg_age": {"item": {"sum": SUM(c.age), "count": COUNT(c.age)}}, "min_age": {"item": MIN(c.age), "item2": {"min": MIN(c.age), "count": COUNT(c.age)}}, "max_age": {"item": MAX(c.age), "item2": {"max": MAX(c.age), "count": COUNT(c.age)}}} AS payload
FROM c
GROUP BY c.team, c.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>GROUP BY arbitrary scalar expressions</Description>
      <Query>
                SELECT UPPER(c.name) AS name, SUBSTRING(c.address.city, 0, 3) AS city, Avg(c.income) AS income
                FROM c
                GROUP BY UPPER(c.name), SUBSTRING(c.address.city, 0, 3)</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>UPPER(c.name)</GroupByExpression>
            <GroupByExpression>SUBSTRING(c.address.city, 0, 3)</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>city</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>income</Alias>
              <AggregateOperator>Average</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>name</Alias>
            <Alias>city</Alias>
            <Alias>income</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": UPPER(c.name)}, {"item": SUBSTRING(c.address.city, 0, 3)}] AS groupByItems, {"name": UPPER(c.name), "city": SUBSTRING(c.address.city, 0, 3), "income": {"item": {"sum": SUM(c.income), "count": COUNT(c.income)}}} AS payload
FROM c
GROUP BY UPPER(c.name), SUBSTRING(c.address.city, 0, 3)]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>GROUP BY in subquery</Description>
      <Query>
                SELECT c.name, s 
                FROM c
                JOIN (
                    SELECT VALUE score
                    FROM score IN c.scores
                    GROUP BY score
                ) s</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions />
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType />
          <GroupByAliases />
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>GROUP BY in both subquery and outer query</Description>
      <Query>
                SELECT c.name, s.score, s.repeat, Count(1) AS count
                FROM c
                JOIN (
                    SELECT score, Count(1) AS repeat
                    FROM score IN c.scores
                    GROUP BY score
                ) s
                GROUP BY c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <Exception>TryCatch resulted in an exception.</Exception>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>GROUP BY in multiple subqueries and outer query</Description>
      <Query>
                SELECT info, Count(1) AS count, g.name AS group_name
                FROM c
                JOIN (SELECT VALUE s FROM s IN c.scores GROUP BY s) s
                JOIN (
                    SELECT s1 AS score, Avg(s1) AS avg_score, g1.name AS group_name
                    FROM s1 IN c.scores
                    JOIN g1 IN c.groups
                    GROUP BY s1, g1
                ) info
                JOIN (SELECT VALUE g FROM g IN c.groups GROUP BY g) g
                WHERE info.group_name = g.name
                GROUP BY info, g.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>info</GroupByExpression>
            <GroupByExpression>g.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>group_name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>count</Alias>
              <AggregateOperator>Count</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>info</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>info</Alias>
            <Alias>count</Alias>
            <Alias>group_name</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": info}, {"item": g.name}] AS groupByItems, {"info": info, "count": {"item": Count(1)}, "group_name": g.name} AS payload
FROM c
JOIN 
    (SELECT VALUE s
    FROM s IN c.scores
    GROUP BY s)
 AS s
JOIN 
    (SELECT s1 AS score, Avg(s1) AS avg_score, g1.name AS group_name
    FROM s1 IN c.scores
    JOIN g1 IN c.groups
    GROUP BY s1, g1)
 AS info
JOIN 
    (SELECT VALUE g
    FROM g IN c.groups
    GROUP BY g)
 AS g
WHERE (info.group_name = g.name)
GROUP BY info, g.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Non property reference without an alias</Description>
      <Query>
                SELECT c.name, UPPER(c.name)
                FROM c
                GROUP BY c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>$1</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>name</Alias>
            <Alias>$1</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.name}] AS groupByItems, {"name": c.name, "$1": UPPER(c.name)} AS payload
FROM c
GROUP BY c.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Aggregate without an alias</Description>
      <Query>
                SELECT c.name, AVG(c.age)
                FROM c
                GROUP BY c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>$1</Alias>
              <AggregateOperator>Average</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>name</Alias>
            <Alias>$1</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.name}] AS groupByItems, {"name": c.name, "$1": {"item": {"sum": SUM(c.age), "count": COUNT(c.age)}}} AS payload
FROM c
GROUP BY c.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Aggregate not in select list spec</Description>
      <Query>
                SELECT VALUE AVG(c.age)
                FROM c
                GROUP BY c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates>
            <AggregateOperator>Average</AggregateOperator>
          </Aggregates>
          <GroupByAliasToAggregateType />
          <GroupByAliases />
          <HasSelectValue>True</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.name}] AS groupByItems, [{"item": {"sum": SUM(c.age), "count": COUNT(c.age)}}] AS payload
FROM c
GROUP BY c.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Interleaved projection types</Description>
      <Query>
                SELECT c.team, COUNT(1) AS count, c.name, AVG(c.age) AS avg_age, MIN(c.age), MAX(c.age) AS max_age, MAX(c.age)
                FROM c
                GROUP BY c.team, c.name</Query>
      <PartitionKeys />
      <PartitionKeyType>Hash</PartitionKeyType>
    </Input>
    <Output>
      <PartitionedQueryExecutionInfoInternal>
        <QueryInfo>
          <DistinctType>None</DistinctType>
          <Top />
          <Offset />
          <Limit />
          <GroupByExpressions>
            <GroupByExpression>c.team</GroupByExpression>
            <GroupByExpression>c.name</GroupByExpression>
          </GroupByExpressions>
          <OrderBy />
          <OrderByExpressions />
          <Aggregates />
          <GroupByAliasToAggregateType>
            <AliasToAggregateType>
              <Alias>max_age</Alias>
              <AggregateOperator>Max</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>name</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>count</Alias>
              <AggregateOperator>Count</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>$1</Alias>
              <AggregateOperator>Min</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>team</Alias>
              <AggregateOperator>null</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>$2</Alias>
              <AggregateOperator>Max</AggregateOperator>
            </AliasToAggregateType>
            <AliasToAggregateType>
              <Alias>avg_age</Alias>
              <AggregateOperator>Average</AggregateOperator>
            </AliasToAggregateType>
          </GroupByAliasToAggregateType>
          <GroupByAliases>
            <Alias>team</Alias>
            <Alias>count</Alias>
            <Alias>name</Alias>
            <Alias>avg_age</Alias>
            <Alias>$1</Alias>
            <Alias>max_age</Alias>
            <Alias>$2</Alias>
          </GroupByAliases>
          <HasSelectValue>False</HasSelectValue>
        </QueryInfo>
        <QueryRanges>
          <Range>
            <Range>[[],"Infinity")</Range>
          </Range>
        </QueryRanges>
        <RewrittenQuery><![CDATA[SELECT [{"item": c.team}, {"item": c.name}] AS groupByItems, {"team": c.team, "count": {"item": COUNT(1)}, "name": c.name, "avg_age": {"item": {"sum": SUM(c.age), "count": COUNT(c.age)}}, "$1": {"item": MIN(c.age), "item2": {"min": MIN(c.age), "count": COUNT(c.age)}}, "max_age": {"item": MAX(c.age), "item2": {"max": MAX(c.age), "count": COUNT(c.age)}}, "$2": {"item": MAX(c.age), "item2": {"max": MAX(c.age), "count": COUNT(c.age)}}} AS payload
FROM c
GROUP BY c.team, c.name]]></RewrittenQuery>
      </PartitionedQueryExecutionInfoInternal>
    </Output>
  </Result>
</Results>