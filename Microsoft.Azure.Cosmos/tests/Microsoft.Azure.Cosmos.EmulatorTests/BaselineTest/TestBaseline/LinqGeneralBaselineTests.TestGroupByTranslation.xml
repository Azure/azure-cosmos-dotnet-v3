<Results>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value Select Key]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root 
FROM root 
GROUP BY root ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value Select Key]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value Select Key Alias]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (stringField, values) => stringField)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Min]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => values.Min(value => value.Int))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE MIN(root["Int"]) 
FROM root 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Max]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => values.Max(value => value.Int))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE MAX(root["Int"]) 
FROM root 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Count]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => values.Count())]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE COUNT(1) 
FROM root 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Average]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => values.Average(value => value.Int))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE AVG(root["Int"]) 
FROM root 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Min]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Int, (key, values) => values.Min())]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE MIN(root) 
FROM root 
GROUP BY root["Int"] ]]></SqlQuery>
      <ErrorMessage><![CDATA[At least one object must implement IComparable.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Max]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Int, (key, values) => values.Max())]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE MAX(root) 
FROM root 
GROUP BY root["Int"] ]]></SqlQuery>
      <ErrorMessage><![CDATA[At least one object must implement IComparable.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Min]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Int, (key, values) => "string")]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE "string" 
FROM root 
GROUP BY root["Int"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Count]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Incorrect number of arguments for method 'GroupBy'. Expected '3' but received '2'.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Min]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Int, k2 => k2.Int, (key, values) => "string")]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Incorrect number of arguments for method 'GroupBy'. Expected '3' but received '4'.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Count]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => values.Select(value => value.Int))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Method 'Select' is not supported.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Count]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => values.OrderBy(f => f.FamilyId))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Method 'OrderBy' is not supported.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy Single Value With Min]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.FamilyId, (key, values) => new AnonymousType(familyId = key, familyIdCount = values.Count()))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Expression with NodeType 'New' is not supported.]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Select + GroupBy]]></Description>
      <Expression><![CDATA[query.Select(x => x.Id).GroupBy(k => k, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE r0 
FROM (
    SELECT VALUE root["id"] 
    FROM root) AS r0 
    GROUP BY r0 
]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Select + GroupBy 2]]></Description>
      <Expression><![CDATA[query.Select(x => new AnonymousType(Id1 = x.Id, family1 = x.FamilyId, childrenN1 = x.Children)).GroupBy(k => k.family1, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE r0["family1"] 
FROM (
    SELECT VALUE {"Id1": root["id"], "family1": root["FamilyId"], "childrenN1": root["Children"]} 
    FROM root) AS r0 
    GROUP BY r0["family1"] 
]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[SelectMany + GroupBy]]></Description>
      <Expression><![CDATA[query.SelectMany(x => x.Children).GroupBy(k => k.Grade, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE x0["Grade"] 
FROM root 
JOIN x0 IN root["Children"] 
GROUP BY x0["Grade"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[SelectMany + GroupBy 2]]></Description>
      <Expression><![CDATA[query.SelectMany(f => f.Children).Where(c => (c.Pets.Count() > 0)).SelectMany(c => c.Pets.Select(p => p.GivenName)).GroupBy(k => k, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE r0 
FROM (
    SELECT VALUE p0["GivenName"] 
    FROM root 
    JOIN f0 IN root["Children"] 
    JOIN p0 IN f0["Pets"] 
    WHERE (ARRAY_LENGTH(f0["Pets"]) > 0)) AS r0 
    GROUP BY r0 
]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Skip + GroupBy]]></Description>
      <Expression><![CDATA[query.Skip(10).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE r0["id"] 
FROM (
    SELECT VALUE root 
    FROM root 
    OFFSET 10 LIMIT 2147483647) AS r0 
    GROUP BY r0["id"] 
]]></SqlQuery>
      <ErrorMessage><![CDATA[Status Code: BadRequest,{"errors":[{"severity":"Error","location":{"start":56,"end":82},"code":"SC2204","message":"'OFFSET LIMIT' clause is not supported in subqueries."}]},0x800A0B00]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Take + GroupBy]]></Description>
      <Expression><![CDATA[query.Take(10).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE r0["id"] 
FROM (
    SELECT TOP 10 VALUE root 
    FROM root) AS r0 
    GROUP BY r0["id"] 
]]></SqlQuery>
      <ErrorMessage><![CDATA[Status Code: BadRequest,{"errors":[{"severity":"Error","location":{"start":35,"end":41},"code":"SC2203","message":"'TOP' is not supported in subqueries."}]},0x800A0B00]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Skip + Take + GroupBy]]></Description>
      <Expression><![CDATA[query.Skip(10).Take(10).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE r0["id"] 
FROM (
    SELECT VALUE root 
    FROM root 
    OFFSET 10 LIMIT 10) AS r0 
    GROUP BY r0["id"] 
]]></SqlQuery>
      <ErrorMessage><![CDATA[Status Code: BadRequest,{"errors":[{"severity":"Error","location":{"start":56,"end":74},"code":"SC2204","message":"'OFFSET LIMIT' clause is not supported in subqueries."}]},0x800A0B00]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Filter + GroupBy]]></Description>
      <Expression><![CDATA[query.Where(x => (x.Id != "a")).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
WHERE (root["id"] != "a") 
GROUP BY root["id"] ]]></SqlQuery>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[OrderBy + GroupBy]]></Description>
      <Expression><![CDATA[query.OrderBy(x => x.Int).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
GROUP BY root["id"]  
ORDER BY root["Int"] ASC]]></SqlQuery>
      <ErrorMessage><![CDATA[Status Code: BadRequest,{"errors":[{"severity":"Error","location":{"start":64,"end":75},"code":"SC2103","message":"Property reference 'root[\"Int\"]' is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause."}]},0x800A0B00]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[OrderBy Descending + GroupBy]]></Description>
      <Expression><![CDATA[query.OrderByDescending(x => x.Id).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
GROUP BY root["id"]  
ORDER BY root["id"] DESC]]></SqlQuery>
      <ErrorMessage><![CDATA[Assert.IsTrue failed. Expected: ["fa194356-8349-4b15-8ad7-8a0ec4f9695b","f72f55be-2716-4493-8116-2f6199fb5dbb","ef680573-bb14-4d58-b415-9d676ec4c282","e856d2da-dabe-40f2-9433-5788f9eb780f","e7a0a93c-fb34-4063-8b43-dce337b72a3c","e77016e8-255f-4895-9b21-97807acd36af","e5c5f6db-533e-4279-9140-a2233e8f1f3d","e5a185c7-69df-4a1a-badb-59a1d4a6d415","e503af90-31de-463b-b267-2ce3bee0cbe7","e3075b3b-5d1e-43b0-a487-6f026c8b9cb5","e10b09ca-a9ed-4809-896b-dc2b6face03d","e0ba447e-4378-46a5-bb01-50199ac0e306","dcf88db2-89b5-4f05-9e20-40379a9dd006","dc4ed8b0-cf4d-43a7-a02a-60d21a25a49c","dbd69147-d3b5-4dcb-ab94-b1477b2bce16","d90cea33-3beb-49f5-bd31-92225b42e5b0","d865a0f1-2f9c-480d-a8ca-927e25a8f920","d6f03acd-c2e8-45dc-9cf0-a3b350200c3c","d508d23e-3837-43b7-affc-6042bd18313e","d0931ce1-4e60-4060-9c20-2904894a110c","cf047b6c-70ab-4341-80cb-aa3911782f5b","ccab2130-ba12-483e-9d64-80ff1a6b40bd","cc68e332-9ade-47a3-ab59-bff00eafbe13","c9d66d1f-fd91-4af3-af23-bf60411fad51","c9ae0868-7dd8-4cca-9f7f-5cce55ad3045","c9a2594a-eb1d-4d9f-9760-ec9acb0c3c36","c8fd5826-77f6-46de-8a34-e5910a6eacf5","c8f4a8b4-aa87-4ed7-a1e4-e2cd957ff929","c8dda3d9-9586-4a13-8d91-995ab50df8b9","c1789a52-c03a-4196-a0a9-473a7e23de18","bfa5ce7c-8aed-4418-85bb-572d2d0de9d4","bdc8fdac-ffb2-4c8d-96b9-a583f1608128","bc50b612-3745-4ab7-a1aa-744e1e784a20","ba4d5390-374a-4a4a-93db-61c934ab3e67","b71fab6d-d4ae-4a04-bb9e-35238869e6a3","b65d9856-d381-4c4c-84b5-90c68fffdc2a","b5afa02f-4d83-47ec-8595-63a7c24c7fdf","add21282-4c38-400b-8e7d-f39e4c36b6b4","acad3b08-42a4-4c77-ad00-7ef95ae79be6","a7697601-3a27-411b-a6bc-0193b822b5ac","a5624fbe-4e64-454e-94bc-8b5f3ef50dd5","9ed74183-8b45-4dd3-b8dd-6b825d69117d","9e536077-a1a7-45d6-ac26-6b4f438d0945","94caa7ac-9190-4e4f-8ea4-158699477fd8","943a134a-b0d6-4c13-a550-7193e17741b3","90b33015-351f-47b3-a054-0c7e4579a54b","8d520cfa-4982-4bae-9f3d-9739b1b20f5d","89d43180-68bb-4403-9300-b62280507e63","8754c38e-9898-4403-87e8-3969681f996d","81c6883d-c5d7-4323-b5fa-932624fdb8fe","808947db-8f33-4573-9bab-e0d7e06e4c8c","7b1198d3-5063-4056-b796-c19fac78b1ba","79c32f49-6a2b-4436-ac33-205806ee8003","7565ff58-6875-47d7-9d89-cb814bddc59c","6ea424c0-6e19-43d7-892c-6316b1ae23db","6d97def9-2d51-4132-9ad0-c49ce0372489","68b7c395-f417-4b4b-af9b-c568843c92de","6871cc7f-663f-4ed5-a0b6-5f6626692c89","6745a9ba-7290-45b3-8743-af158361f173","66d3955f-a94d-4d3e-84d2-5787207b99c4","6371b458-9624-4e71-98fb-c0b2ddfae533","634e0384-05e0-4551-b4a3-c9c9d0e4f2c1","5e066d1b-13fd-44d1-bbcc-ae11dc79ff98","5da96afa-d04a-420f-8184-8b66ff7110a9","5da0b3c8-e776-469e-872e-d2ff3715d98c","5d344c42-10de-4f60-ae79-b068968ccb5a","591b5f3d-cc32-4edb-96cb-8c6e29c7f58f","58043f33-3fbc-4e28-b3ee-2f6f720902fe","5607af22-83bd-4bf9-ac69-493f04127c50","4d6d6973-134c-4586-b3ec-29c81184ea5a","4c4b7ed4-cbb4-4887-94b3-ebf35a7362e1","4b2509fd-80f8-47af-9a8f-2f437950f56b","47237b6b-e5b3-4bc7-9e1f-6d6769ec32ef","463779e7-fbe4-42f5-af39-5e1ca9e89e5e","45cf90da-142d-4bb5-a5ba-994ad53cfbdd","43ec803a-1b58-4917-b97c-870c6ec1d8fe","43251966-ddb7-450b-bb9b-1445bf3bc88a","3ed59fd1-c4f5-4431-a221-95bd894a1732","3a146121-a59d-4369-8a8f-0eaa6bc0a35e","394404ed-3310-457b-819a-e9dcf7c46cb1","3474d97a-d9c6-4393-a6b3-477fb35973f0","30574940-3e55-491a-b1ea-1faa5f33c5c5","2f37b40b-7603-4df4-b379-39fdf1c56abd","29157044-1fda-4545-8cef-4f3416369515","26f2812e-6661-418c-ae70-01c4d06b5691","2685234f-0e93-4002-bf44-6beab14f600a","23033de1-baaf-43e4-b284-c9d950c0f494","2094befa-9e52-423d-b85e-6a57fac02af7","1e8a8e20-d3a1-4e29-812a-87979a6a89eb","1c7f8649-9217-4428-ab51-82eacd08d72e","163e1caf-ed40-49c9-ad07-cd0ef9833a6c","14880055-03cc-480f-921e-37ce504fd1f6","0da1c6e0-3234-4f90-b53a-6bf9a57a2509","0d2456e1-c440-469d-9dd9-ace97cc5cd61","0c6ca4fa-5b11-4d2b-aabd-4e48cf854a72","0bf63629-e022-42a8-9f64-82a29e2d2936","0ab894b3-2b13-4c62-89e6-defa2f63a284","06c206e3-09eb-48e7-b4b6-6b67775269ef","034f50af-007a-4eb3-83a4-43143d4758a0","02526b75-821f-4acb-a536-bde1601d551b"], Actual: [], RandomSeed: 962]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Combination + GroupBy]]></Description>
      <Expression><![CDATA[query.Where(x => (x.Id != "a")).OrderBy(x => x.Id).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
WHERE (root["id"] != "a") 
GROUP BY root["id"]  
ORDER BY root["id"] ASC]]></SqlQuery>
      <ErrorMessage><![CDATA[Assert.IsTrue failed. Expected: ["02526b75-821f-4acb-a536-bde1601d551b","034f50af-007a-4eb3-83a4-43143d4758a0","06c206e3-09eb-48e7-b4b6-6b67775269ef","0ab894b3-2b13-4c62-89e6-defa2f63a284","0bf63629-e022-42a8-9f64-82a29e2d2936","0c6ca4fa-5b11-4d2b-aabd-4e48cf854a72","0d2456e1-c440-469d-9dd9-ace97cc5cd61","0da1c6e0-3234-4f90-b53a-6bf9a57a2509","14880055-03cc-480f-921e-37ce504fd1f6","163e1caf-ed40-49c9-ad07-cd0ef9833a6c","1c7f8649-9217-4428-ab51-82eacd08d72e","1e8a8e20-d3a1-4e29-812a-87979a6a89eb","2094befa-9e52-423d-b85e-6a57fac02af7","23033de1-baaf-43e4-b284-c9d950c0f494","2685234f-0e93-4002-bf44-6beab14f600a","26f2812e-6661-418c-ae70-01c4d06b5691","29157044-1fda-4545-8cef-4f3416369515","2f37b40b-7603-4df4-b379-39fdf1c56abd","30574940-3e55-491a-b1ea-1faa5f33c5c5","3474d97a-d9c6-4393-a6b3-477fb35973f0","394404ed-3310-457b-819a-e9dcf7c46cb1","3a146121-a59d-4369-8a8f-0eaa6bc0a35e","3ed59fd1-c4f5-4431-a221-95bd894a1732","43251966-ddb7-450b-bb9b-1445bf3bc88a","43ec803a-1b58-4917-b97c-870c6ec1d8fe","45cf90da-142d-4bb5-a5ba-994ad53cfbdd","463779e7-fbe4-42f5-af39-5e1ca9e89e5e","47237b6b-e5b3-4bc7-9e1f-6d6769ec32ef","4b2509fd-80f8-47af-9a8f-2f437950f56b","4c4b7ed4-cbb4-4887-94b3-ebf35a7362e1","4d6d6973-134c-4586-b3ec-29c81184ea5a","5607af22-83bd-4bf9-ac69-493f04127c50","58043f33-3fbc-4e28-b3ee-2f6f720902fe","591b5f3d-cc32-4edb-96cb-8c6e29c7f58f","5d344c42-10de-4f60-ae79-b068968ccb5a","5da0b3c8-e776-469e-872e-d2ff3715d98c","5da96afa-d04a-420f-8184-8b66ff7110a9","5e066d1b-13fd-44d1-bbcc-ae11dc79ff98","634e0384-05e0-4551-b4a3-c9c9d0e4f2c1","6371b458-9624-4e71-98fb-c0b2ddfae533","66d3955f-a94d-4d3e-84d2-5787207b99c4","6745a9ba-7290-45b3-8743-af158361f173","6871cc7f-663f-4ed5-a0b6-5f6626692c89","68b7c395-f417-4b4b-af9b-c568843c92de","6d97def9-2d51-4132-9ad0-c49ce0372489","6ea424c0-6e19-43d7-892c-6316b1ae23db","7565ff58-6875-47d7-9d89-cb814bddc59c","79c32f49-6a2b-4436-ac33-205806ee8003","7b1198d3-5063-4056-b796-c19fac78b1ba","808947db-8f33-4573-9bab-e0d7e06e4c8c","81c6883d-c5d7-4323-b5fa-932624fdb8fe","8754c38e-9898-4403-87e8-3969681f996d","89d43180-68bb-4403-9300-b62280507e63","8d520cfa-4982-4bae-9f3d-9739b1b20f5d","90b33015-351f-47b3-a054-0c7e4579a54b","943a134a-b0d6-4c13-a550-7193e17741b3","94caa7ac-9190-4e4f-8ea4-158699477fd8","9e536077-a1a7-45d6-ac26-6b4f438d0945","9ed74183-8b45-4dd3-b8dd-6b825d69117d","a5624fbe-4e64-454e-94bc-8b5f3ef50dd5","a7697601-3a27-411b-a6bc-0193b822b5ac","acad3b08-42a4-4c77-ad00-7ef95ae79be6","add21282-4c38-400b-8e7d-f39e4c36b6b4","b5afa02f-4d83-47ec-8595-63a7c24c7fdf","b65d9856-d381-4c4c-84b5-90c68fffdc2a","b71fab6d-d4ae-4a04-bb9e-35238869e6a3","ba4d5390-374a-4a4a-93db-61c934ab3e67","bc50b612-3745-4ab7-a1aa-744e1e784a20","bdc8fdac-ffb2-4c8d-96b9-a583f1608128","bfa5ce7c-8aed-4418-85bb-572d2d0de9d4","c1789a52-c03a-4196-a0a9-473a7e23de18","c8dda3d9-9586-4a13-8d91-995ab50df8b9","c8f4a8b4-aa87-4ed7-a1e4-e2cd957ff929","c8fd5826-77f6-46de-8a34-e5910a6eacf5","c9a2594a-eb1d-4d9f-9760-ec9acb0c3c36","c9ae0868-7dd8-4cca-9f7f-5cce55ad3045","c9d66d1f-fd91-4af3-af23-bf60411fad51","cc68e332-9ade-47a3-ab59-bff00eafbe13","ccab2130-ba12-483e-9d64-80ff1a6b40bd","cf047b6c-70ab-4341-80cb-aa3911782f5b","d0931ce1-4e60-4060-9c20-2904894a110c","d508d23e-3837-43b7-affc-6042bd18313e","d6f03acd-c2e8-45dc-9cf0-a3b350200c3c","d865a0f1-2f9c-480d-a8ca-927e25a8f920","d90cea33-3beb-49f5-bd31-92225b42e5b0","dbd69147-d3b5-4dcb-ab94-b1477b2bce16","dc4ed8b0-cf4d-43a7-a02a-60d21a25a49c","dcf88db2-89b5-4f05-9e20-40379a9dd006","e0ba447e-4378-46a5-bb01-50199ac0e306","e10b09ca-a9ed-4809-896b-dc2b6face03d","e3075b3b-5d1e-43b0-a487-6f026c8b9cb5","e503af90-31de-463b-b267-2ce3bee0cbe7","e5a185c7-69df-4a1a-badb-59a1d4a6d415","e5c5f6db-533e-4279-9140-a2233e8f1f3d","e77016e8-255f-4895-9b21-97807acd36af","e7a0a93c-fb34-4063-8b43-dce337b72a3c","e856d2da-dabe-40f2-9433-5788f9eb780f","ef680573-bb14-4d58-b415-9d676ec4c282","f72f55be-2716-4493-8116-2f6199fb5dbb","fa194356-8349-4b15-8ad7-8a0ec4f9695b"], Actual: [], RandomSeed: 962]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[Combination 2 + GroupBy]]></Description>
      <Expression><![CDATA[query.Where(x => (x.Id != "a")).Where(x => (x.Children.Min(y => y.Grade) > 10)).GroupBy(k => k.Id, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[
SELECT VALUE root["id"] 
FROM root 
JOIN (
    SELECT VALUE ARRAY(
        SELECT VALUE MIN(y0["Grade"]) 
        FROM root 
        JOIN y0 IN root["Children"])) AS v0 
        WHERE ((root["id"] != "a") AND (v0[0] > 10)) 
        GROUP BY root["id"] 
]]></SqlQuery>
      <ErrorMessage><![CDATA[Sequence contains no elements]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + Select]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).Select(x => x)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + Skip]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).Skip(10)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + Take]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).Take(10)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + Skip + Take]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).Skip(10).Take(10)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + Filter]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).Where(x => (x == "a"))]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + OrderBy]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).OrderBy(x => x)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + OrderBy Descending]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).OrderByDescending(x => x)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + Combination]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).Where(x => (x == "a")).Skip(10).Take(10)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description><![CDATA[GroupBy + GroupBy]]></Description>
      <Expression><![CDATA[query.GroupBy(k => k.Id, (key, values) => key).GroupBy(k => k, (key, values) => key)]]></Expression>
    </Input>
    <Output>
      <SqlQuery><![CDATA[]]></SqlQuery>
      <ErrorMessage><![CDATA[Group By cannot be followed by other methods]]></ErrorMessage>
    </Output>
  </Result>
</Results>