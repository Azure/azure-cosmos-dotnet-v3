<Results>
  <Result>
    <Input>
      <Description>Batch Operation</Description>
      <Setup><![CDATA[
    string pkValue = "DiagnosticTestPk";
    TransactionalBatch batch = container.CreateTransactionalBatch(new PartitionKey(pkValue));
    BatchCore batchCore = (BatchCore)batch;
    List<PatchOperation> patch = new List<PatchOperation>()
    {
        PatchOperation.Remove("/cost")
    };

    List<ToDoActivity> createItems = new List<ToDoActivity>();
    for (int i = 0; i < 50; i++)
    {
        ToDoActivity item = ToDoActivity.CreateRandomToDoActivity(pk: pkValue);
        createItems.Add(item);
        batch.CreateItem<ToDoActivity>(item);
    }

    for (int i = 0; i < 20; i++)
    {
        batch.ReadItem(createItems[i].id);
        batchCore.PatchItem(createItems[i].id, patch);
    }

    TransactionalBatchRequestOptions requestOptions = null;
    TransactionalBatchResponse response = await batch.ExecuteAsync(requestOptions);

    Assert.IsNotNull(response);
    ITrace trace = ((CosmosTraceDiagnostics)response.Diagnostics).Value;
]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── ExecuteAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    └── Execute Next Batch(00000000-0000-0000-0000-000000000000)  Batch-Component  00:00:00:000  0.00 milliseconds  
        ├── Create Batch Request(00000000-0000-0000-0000-000000000000)  Batch-Component  00:00:00:000  0.00 milliseconds  
        └── Execute Batch Request(00000000-0000-0000-0000-000000000000)  Batch-Component  00:00:00:000  0.00 milliseconds  
            ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
            │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
            │       │   (
            │       │       [System Info]
            │       │       Redacted To Not Change The Baselines From Run To Run
            │       │   )
            │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
            │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
            │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
            │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
            │                           (
            │                               [Client Side Request Stats]
            │                               Redacted To Not Change The Baselines From Run To Run
            │                           )
            └── Create Trace(00000000-0000-0000-0000-000000000000)  Batch-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "ExecuteAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "Execute Next Batch",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Create Batch Request",
          "duration in milliseconds": 0
        },
        {
          "name": "Execute Batch Request",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
                  "duration in milliseconds": 0,
                  "data": {
                    "System Info": "Redacted To Not Change The Baselines From Run To Run"
                  },
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                          "duration in milliseconds": 0,
                          "children": [
                            {
                              "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                              "duration in milliseconds": 0,
                              "children": [
                                {
                                  "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                                  "duration in milliseconds": 0,
                                  "data": {
                                    "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "Create Trace",
              "duration in milliseconds": 0
            }
          ]
        }
      ]
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.ExecuteAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>ExecuteAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Replace</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.request_content_length_bytes</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.response_content_length_bytes</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.item_count</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.activity_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.correlated_activity_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
</Results>