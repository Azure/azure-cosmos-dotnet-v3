<Results>
  <Result>
    <Input>
      <Description>Point Operation with Request Timeout</Description>
      <Setup><![CDATA[
    ItemRequestOptions requestOptions = new ItemRequestOptions();

    Guid exceptionActivityId = Guid.NewGuid();
    string transportExceptionDescription = "transportExceptionDescription" + Guid.NewGuid();
    Container containerWithTransportException = TransportClientHelper.GetContainerWithItemTransportException(
        databaseId: database.Id,
        containerId: container.Id,
        activityId: exceptionActivityId,
        transportExceptionSourceDescription: transportExceptionDescription,
        enableDistributingTracing: true);

    //Checking point operation diagnostics on typed operations
    ToDoActivity testItem = ToDoActivity.CreateRandomToDoActivity();

    ITrace trace = null;
    try
    {
        ItemResponse<ToDoActivity> createResponse = await containerWithTransportException.CreateItemAsync<ToDoActivity>(
          item: testItem,
          requestOptions: requestOptions);
        Assert.Fail("Should have thrown a request timeout exception");
    }
    catch (CosmosException ce) when (ce.StatusCode == System.Net.HttpStatusCode.RequestTimeout)
    {
        trace = ((CosmosTraceDiagnostics)ce.Diagnostics).Value;
    }
]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── CreateItemAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    ├── ItemSerialize(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    ├── Get PkValue From Stream(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   ├── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   │   └── Waiting for Initialization of client to complete(00000000-0000-0000-0000-000000000000)  Unknown-Component  00:00:00:000  0.00 milliseconds  
    │   └── Read Collection(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           (
    │               [Client Side Request Stats]
    │               Redacted To Not Change The Baselines From Run To Run
    │           )
    ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │       │   (
    │       │       [System Info]
    │       │       Redacted To Not Change The Baselines From Run To Run
    │       │   )
    │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │                           (
    │                               [Client Side Request Stats]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                               [Point Operation Statistics]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                           )
    └── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "CreateItemAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "ItemSerialize",
      "duration in milliseconds": 0
    },
    {
      "name": "Get PkValue From Stream",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Get Collection Cache",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Waiting for Initialization of client to complete",
              "duration in milliseconds": 0
            }
          ]
        },
        {
          "name": "Read Collection",
          "duration in milliseconds": 0,
          "data": {
            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
          }
        }
      ]
    },
    {
      "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
          "duration in milliseconds": 0,
          "data": {
            "System Info": "Redacted To Not Change The Baselines From Run To Run"
          },
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Get Collection Cache",
      "duration in milliseconds": 0
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.CreateItemAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>CreateItemAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.stacktrace</ATTRIBUTE-KEY><ATTRIBUTE-KEY>exception.type</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.message</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Create</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Point Operation With Throttle</Description>
      <Setup><![CDATA[
    string errorMessage = "Mock throttle exception" + Guid.NewGuid().ToString();
    Guid exceptionActivityId = Guid.NewGuid();
    using CosmosClient throttleClient = TestCommon.CreateCosmosClient(builder =>
        builder
        .WithDistributedTracingOptions(new DistributedTracingOptions()
        {
            LatencyThresholdForDiagnosticEvent = TimeSpan.FromMilliseconds(0)
        })
        .WithThrottlingRetryOptions(
            maxRetryWaitTimeOnThrottledRequests: TimeSpan.FromSeconds(1),
            maxRetryAttemptsOnThrottledRequests: 3)
            .WithTransportClientHandlerFactory(transportClient => new TransportClientWrapper(
                transportClient,
                (uri, resourceOperation, request) => TransportClientHelper.ReturnThrottledStoreResponseOnItemOperation(
                    uri,
                    resourceOperation,
                    request,
                    exceptionActivityId,
                    errorMessage))));
    
    ItemRequestOptions requestOptions = new ItemRequestOptions();
    Container containerWithThrottleException = throttleClient.GetContainer(
        database.Id,
        container.Id);

    //Checking point operation diagnostics on typed operations
    ToDoActivity testItem = ToDoActivity.CreateRandomToDoActivity();
    ITrace trace = null;
    try
    {
        ItemResponse<ToDoActivity> createResponse = await containerWithThrottleException.CreateItemAsync<ToDoActivity>(
          item: testItem,
          requestOptions: requestOptions);
        Assert.Fail("Should have thrown a request timeout exception");
    }
    catch (CosmosException ce) when ((int)ce.StatusCode == (int)Documents.StatusCodes.TooManyRequests)
    {
        trace = ((CosmosTraceDiagnostics)ce.Diagnostics).Value;
    }
]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── CreateItemAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    ├── ItemSerialize(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    ├── Get PkValue From Stream(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   ├── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   │   └── Waiting for Initialization of client to complete(00000000-0000-0000-0000-000000000000)  Unknown-Component  00:00:00:000  0.00 milliseconds  
    │   └── Read Collection(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           (
    │               [Client Side Request Stats]
    │               Redacted To Not Change The Baselines From Run To Run
    │           )
    ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │       │   (
    │       │       [System Info]
    │       │       Redacted To Not Change The Baselines From Run To Run
    │       │   )
    │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │                           (
    │                               [Client Side Request Stats]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                           )
    └── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "CreateItemAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "ItemSerialize",
      "duration in milliseconds": 0
    },
    {
      "name": "Get PkValue From Stream",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Get Collection Cache",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Waiting for Initialization of client to complete",
              "duration in milliseconds": 0
            }
          ]
        },
        {
          "name": "Read Collection",
          "duration in milliseconds": 0,
          "data": {
            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
          }
        }
      ]
    },
    {
      "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
          "duration in milliseconds": 0,
          "data": {
            "System Info": "Redacted To Not Change The Baselines From Run To Run"
          },
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Get Collection Cache",
      "duration in milliseconds": 0
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.CreateItemAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>CreateItemAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.stacktrace</ATTRIBUTE-KEY><ATTRIBUTE-KEY>exception.type</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.message</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Create</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Point Operation With Forbidden + Max Count = 1</Description>
      <Setup><![CDATA[
        int count = 0;
        List<(string, string)> activityIdAndErrorMessage = new List<(string, string)>(maxCount);
        Guid transportExceptionActivityId = Guid.NewGuid();
        string transportErrorMessage = $"TransportErrorMessage{Guid.NewGuid()}";
        Guid activityIdScope = Guid.Empty;

        void interceptor(Uri uri, Documents.ResourceOperation operation, Documents.DocumentServiceRequest request)
        {
            Assert.AreNotEqual(System.Diagnostics.Trace.CorrelationManager.ActivityId, Guid.Empty, "Activity scope should be set");

            if (request.ResourceType == Documents.ResourceType.Document)
            {
                if (activityIdScope == Guid.Empty)
                {
                    activityIdScope = System.Diagnostics.Trace.CorrelationManager.ActivityId;
                }
                else
                {
                    Assert.AreEqual(System.Diagnostics.Trace.CorrelationManager.ActivityId, activityIdScope, "Activity scope should match on retries");
                }

                if (count >= maxCount)
                {
                    TransportClientHelper.ThrowTransportExceptionOnItemOperation(
                        uri,
                        operation,
                        request,
                        transportExceptionActivityId,
                        transportErrorMessage);
                }

                count++;
                string activityId = Guid.NewGuid().ToString();
                string errorMessage = $"Error{Guid.NewGuid()}";

                activityIdAndErrorMessage.Add((activityId, errorMessage));
                TransportClientHelper.ThrowForbiddendExceptionOnItemOperation(
                    uri,
                    request,
                    activityId,
                    errorMessage);
            }
        }

        Container containerWithTransportException = TransportClientHelper.GetContainerWithIntercepter(
            databaseId: database.Id,
            containerId: container.Id,
            interceptor: interceptor,
            enableDistributingTracing: true);
        //Checking point operation diagnostics on typed operations
        ToDoActivity testItem = ToDoActivity.CreateRandomToDoActivity();

        ITrace trace = null;
        try
        {
            ItemResponse<ToDoActivity> createResponse = await containerWithTransportException.CreateItemAsync<ToDoActivity>(
              item: testItem);
            Assert.Fail("Should have thrown a request timeout exception");
        }
        catch (CosmosException ce) when (ce.StatusCode == System.Net.HttpStatusCode.RequestTimeout)
        {
            trace = ((CosmosTraceDiagnostics)ce.Diagnostics).Value;
            stringLength.Add(trace.ToString().Length);
        }

]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── CreateItemAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    ├── ItemSerialize(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    ├── Get PkValue From Stream(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   ├── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   │   └── Waiting for Initialization of client to complete(00000000-0000-0000-0000-000000000000)  Unknown-Component  00:00:00:000  0.00 milliseconds  
    │   └── Read Collection(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           (
    │               [Client Side Request Stats]
    │               Redacted To Not Change The Baselines From Run To Run
    │           )
    ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │       │   (
    │       │       [System Info]
    │       │       Redacted To Not Change The Baselines From Run To Run
    │       │   )
    │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │                           (
    │                               [Client Side Request Stats]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                               [Point Operation Statistics]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                           )
    └── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "CreateItemAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "ItemSerialize",
      "duration in milliseconds": 0
    },
    {
      "name": "Get PkValue From Stream",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Get Collection Cache",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Waiting for Initialization of client to complete",
              "duration in milliseconds": 0
            }
          ]
        },
        {
          "name": "Read Collection",
          "duration in milliseconds": 0,
          "data": {
            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
          }
        }
      ]
    },
    {
      "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
          "duration in milliseconds": 0,
          "data": {
            "System Info": "Redacted To Not Change The Baselines From Run To Run"
          },
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Get Collection Cache",
      "duration in milliseconds": 0
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.CreateItemAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>CreateItemAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.stacktrace</ATTRIBUTE-KEY><ATTRIBUTE-KEY>exception.type</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.message</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Create</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Point Operation With Forbidden + Max Count = 2</Description>
      <Setup><![CDATA[
        int count = 0;
        List<(string, string)> activityIdAndErrorMessage = new List<(string, string)>(maxCount);
        Guid transportExceptionActivityId = Guid.NewGuid();
        string transportErrorMessage = $"TransportErrorMessage{Guid.NewGuid()}";
        Guid activityIdScope = Guid.Empty;

        void interceptor(Uri uri, Documents.ResourceOperation operation, Documents.DocumentServiceRequest request)
        {
            Assert.AreNotEqual(System.Diagnostics.Trace.CorrelationManager.ActivityId, Guid.Empty, "Activity scope should be set");

            if (request.ResourceType == Documents.ResourceType.Document)
            {
                if (activityIdScope == Guid.Empty)
                {
                    activityIdScope = System.Diagnostics.Trace.CorrelationManager.ActivityId;
                }
                else
                {
                    Assert.AreEqual(System.Diagnostics.Trace.CorrelationManager.ActivityId, activityIdScope, "Activity scope should match on retries");
                }

                if (count >= maxCount)
                {
                    TransportClientHelper.ThrowTransportExceptionOnItemOperation(
                        uri,
                        operation,
                        request,
                        transportExceptionActivityId,
                        transportErrorMessage);
                }

                count++;
                string activityId = Guid.NewGuid().ToString();
                string errorMessage = $"Error{Guid.NewGuid()}";

                activityIdAndErrorMessage.Add((activityId, errorMessage));
                TransportClientHelper.ThrowForbiddendExceptionOnItemOperation(
                    uri,
                    request,
                    activityId,
                    errorMessage);
            }
        }

        Container containerWithTransportException = TransportClientHelper.GetContainerWithIntercepter(
            databaseId: database.Id,
            containerId: container.Id,
            interceptor: interceptor,
            enableDistributingTracing: true);
        //Checking point operation diagnostics on typed operations
        ToDoActivity testItem = ToDoActivity.CreateRandomToDoActivity();

        ITrace trace = null;
        try
        {
            ItemResponse<ToDoActivity> createResponse = await containerWithTransportException.CreateItemAsync<ToDoActivity>(
              item: testItem);
            Assert.Fail("Should have thrown a request timeout exception");
        }
        catch (CosmosException ce) when (ce.StatusCode == System.Net.HttpStatusCode.RequestTimeout)
        {
            trace = ((CosmosTraceDiagnostics)ce.Diagnostics).Value;
            stringLength.Add(trace.ToString().Length);
        }

]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── CreateItemAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    ├── ItemSerialize(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    ├── Get PkValue From Stream(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   ├── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   │   └── Waiting for Initialization of client to complete(00000000-0000-0000-0000-000000000000)  Unknown-Component  00:00:00:000  0.00 milliseconds  
    │   └── Read Collection(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           (
    │               [Client Side Request Stats]
    │               Redacted To Not Change The Baselines From Run To Run
    │           )
    ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │       │   (
    │       │       [System Info]
    │       │       Redacted To Not Change The Baselines From Run To Run
    │       │   )
    │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │                           (
    │                               [Client Side Request Stats]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                               [Point Operation Statistics]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                           )
    └── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "CreateItemAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "ItemSerialize",
      "duration in milliseconds": 0
    },
    {
      "name": "Get PkValue From Stream",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Get Collection Cache",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Waiting for Initialization of client to complete",
              "duration in milliseconds": 0
            }
          ]
        },
        {
          "name": "Read Collection",
          "duration in milliseconds": 0,
          "data": {
            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
          }
        }
      ]
    },
    {
      "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
          "duration in milliseconds": 0,
          "data": {
            "System Info": "Redacted To Not Change The Baselines From Run To Run"
          },
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Get Collection Cache",
      "duration in milliseconds": 0
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.CreateItemAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>CreateItemAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.stacktrace</ATTRIBUTE-KEY><ATTRIBUTE-KEY>exception.type</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.message</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Create</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Point Operation With Forbidden + Max Count = 4</Description>
      <Setup><![CDATA[
        int count = 0;
        List<(string, string)> activityIdAndErrorMessage = new List<(string, string)>(maxCount);
        Guid transportExceptionActivityId = Guid.NewGuid();
        string transportErrorMessage = $"TransportErrorMessage{Guid.NewGuid()}";
        Guid activityIdScope = Guid.Empty;

        void interceptor(Uri uri, Documents.ResourceOperation operation, Documents.DocumentServiceRequest request)
        {
            Assert.AreNotEqual(System.Diagnostics.Trace.CorrelationManager.ActivityId, Guid.Empty, "Activity scope should be set");

            if (request.ResourceType == Documents.ResourceType.Document)
            {
                if (activityIdScope == Guid.Empty)
                {
                    activityIdScope = System.Diagnostics.Trace.CorrelationManager.ActivityId;
                }
                else
                {
                    Assert.AreEqual(System.Diagnostics.Trace.CorrelationManager.ActivityId, activityIdScope, "Activity scope should match on retries");
                }

                if (count >= maxCount)
                {
                    TransportClientHelper.ThrowTransportExceptionOnItemOperation(
                        uri,
                        operation,
                        request,
                        transportExceptionActivityId,
                        transportErrorMessage);
                }

                count++;
                string activityId = Guid.NewGuid().ToString();
                string errorMessage = $"Error{Guid.NewGuid()}";

                activityIdAndErrorMessage.Add((activityId, errorMessage));
                TransportClientHelper.ThrowForbiddendExceptionOnItemOperation(
                    uri,
                    request,
                    activityId,
                    errorMessage);
            }
        }

        Container containerWithTransportException = TransportClientHelper.GetContainerWithIntercepter(
            databaseId: database.Id,
            containerId: container.Id,
            interceptor: interceptor,
            enableDistributingTracing: true);
        //Checking point operation diagnostics on typed operations
        ToDoActivity testItem = ToDoActivity.CreateRandomToDoActivity();

        ITrace trace = null;
        try
        {
            ItemResponse<ToDoActivity> createResponse = await containerWithTransportException.CreateItemAsync<ToDoActivity>(
              item: testItem);
            Assert.Fail("Should have thrown a request timeout exception");
        }
        catch (CosmosException ce) when (ce.StatusCode == System.Net.HttpStatusCode.RequestTimeout)
        {
            trace = ((CosmosTraceDiagnostics)ce.Diagnostics).Value;
            stringLength.Add(trace.ToString().Length);
        }

]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── CreateItemAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    ├── ItemSerialize(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    ├── Get PkValue From Stream(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   ├── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   │   └── Waiting for Initialization of client to complete(00000000-0000-0000-0000-000000000000)  Unknown-Component  00:00:00:000  0.00 milliseconds  
    │   └── Read Collection(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           (
    │               [Client Side Request Stats]
    │               Redacted To Not Change The Baselines From Run To Run
    │           )
    ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │       │   (
    │       │       [System Info]
    │       │       Redacted To Not Change The Baselines From Run To Run
    │       │   )
    │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           ├── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │   └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           │       └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           │               (
    │           │                   [Client Side Request Stats]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [AuthProvider LifeSpan InSec]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │                   [Point Operation Statistics]
    │           │                   Redacted To Not Change The Baselines From Run To Run
    │           │               )
    │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │                           (
    │                               [Client Side Request Stats]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                               [Point Operation Statistics]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                           )
    └── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "CreateItemAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "ItemSerialize",
      "duration in milliseconds": 0
    },
    {
      "name": "Get PkValue From Stream",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Get Collection Cache",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Waiting for Initialization of client to complete",
              "duration in milliseconds": 0
            }
          ]
        },
        {
          "name": "Read Collection",
          "duration in milliseconds": 0,
          "data": {
            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
          }
        }
      ]
    },
    {
      "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
          "duration in milliseconds": 0,
          "data": {
            "System Info": "Redacted To Not Change The Baselines From Run To Run"
          },
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "AuthProvider LifeSpan InSec": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Get Collection Cache",
      "duration in milliseconds": 0
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.CreateItemAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>CreateItemAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.stacktrace</ATTRIBUTE-KEY><ATTRIBUTE-KEY>exception.type</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.message</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Create</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
  <Result>
    <Input>
      <Description>Point Operation with Service Unavailable</Description>
      <Setup><![CDATA[
    ItemRequestOptions requestOptions = new ItemRequestOptions();

    Guid exceptionActivityId = Guid.NewGuid();
    string ServiceUnavailableExceptionDescription = "ServiceUnavailableExceptionDescription" + Guid.NewGuid();
    Container containerWithTransportException = TransportClientHelper.GetContainerWithItemServiceUnavailableException(
        databaseId: database.Id,
        containerId: container.Id,
        activityId: exceptionActivityId,
        serviceUnavailableExceptionSourceDescription: ServiceUnavailableExceptionDescription,
        enableDistributingTracing: true);

    //Checking point operation diagnostics on typed operations
    ToDoActivity testItem = ToDoActivity.CreateRandomToDoActivity();

    ITrace trace = null;
    try
    {
        ItemResponse<ToDoActivity> createResponse = await containerWithTransportException.CreateItemAsync<ToDoActivity>(
          item: testItem,
          requestOptions: requestOptions);
        Assert.Fail("Should have thrown a Service Unavailable Exception");
    }
    catch (CosmosException ce) when (ce.StatusCode == System.Net.HttpStatusCode.ServiceUnavailable)
    {
        trace = ((CosmosTraceDiagnostics)ce.Diagnostics).Value;                    
    }
]]></Setup>
    </Input>
    <Output>
      <Text><![CDATA[.
└── CreateItemAsync(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │   (
    │       [Client Configuration]
    │       Redacted To Not Change The Baselines From Run To Run
    │   )
    ├── ItemSerialize(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    ├── Get PkValue From Stream(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   ├── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
    │   │   └── Waiting for Initialization of client to complete(00000000-0000-0000-0000-000000000000)  Unknown-Component  00:00:00:000  0.00 milliseconds  
    │   └── Read Collection(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │           (
    │               [Client Side Request Stats]
    │               Redacted To Not Change The Baselines From Run To Run
    │           )
    ├── Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │   └── Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │       │   (
    │       │       [System Info]
    │       │       Redacted To Not Change The Baselines From Run To Run
    │       │   )
    │       └── Microsoft.Azure.Cosmos.Handlers.RetryHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │           └── Microsoft.Azure.Cosmos.Handlers.RouterHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │               └── Microsoft.Azure.Cosmos.Handlers.TransportHandler(00000000-0000-0000-0000-000000000000)  RequestHandler-Component  00:00:00:000  0.00 milliseconds  
    │                   └── Microsoft.Azure.Documents.ServerStoreModel Transport Request(00000000-0000-0000-0000-000000000000)  Transport-Component  00:00:00:000  0.00 milliseconds  
    │                           (
    │                               [Client Side Request Stats]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                               [Point Operation Statistics]
    │                               Redacted To Not Change The Baselines From Run To Run
    │                           )
    └── Get Collection Cache(00000000-0000-0000-0000-000000000000)  Routing-Component  00:00:00:000  0.00 milliseconds  
]]></Text>
      <Json><![CDATA[{
  "Summary": {},
  "name": "CreateItemAsync",
  "start time": "00:00:00:000",
  "duration in milliseconds": 0,
  "data": {
    "Client Configuration": "Redacted To Not Change The Baselines From Run To Run"
  },
  "children": [
    {
      "name": "ItemSerialize",
      "duration in milliseconds": 0
    },
    {
      "name": "Get PkValue From Stream",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Get Collection Cache",
          "duration in milliseconds": 0,
          "children": [
            {
              "name": "Waiting for Initialization of client to complete",
              "duration in milliseconds": 0
            }
          ]
        },
        {
          "name": "Read Collection",
          "duration in milliseconds": 0,
          "data": {
            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run"
          }
        }
      ]
    },
    {
      "name": "Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler",
      "duration in milliseconds": 0,
      "children": [
        {
          "name": "Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler",
          "duration in milliseconds": 0,
          "data": {
            "System Info": "Redacted To Not Change The Baselines From Run To Run"
          },
          "children": [
            {
              "name": "Microsoft.Azure.Cosmos.Handlers.RetryHandler",
              "duration in milliseconds": 0,
              "children": [
                {
                  "name": "Microsoft.Azure.Cosmos.Handlers.RouterHandler",
                  "duration in milliseconds": 0,
                  "children": [
                    {
                      "name": "Microsoft.Azure.Cosmos.Handlers.TransportHandler",
                      "duration in milliseconds": 0,
                      "children": [
                        {
                          "name": "Microsoft.Azure.Documents.ServerStoreModel Transport Request",
                          "duration in milliseconds": 0,
                          "data": {
                            "Client Side Request Stats": "Redacted To Not Change The Baselines From Run To Run",
                            "Point Operation Statistics": "Redacted To Not Change The Baselines From Run To Run"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Get Collection Cache",
      "duration in milliseconds": 0
    }
  ]
}]]></Json>
      <OTelActivities><ACTIVITY><OPERATION>Operation.CreateItemAsync</OPERATION><ATTRIBUTE-KEY>kind</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>client</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>az.namespace</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Microsoft.DocumentDB</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.operation</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>CreateItemAsync</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.name</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.container</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.system</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>cosmosdb</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.machine_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>net.peer.name</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>127.0.0.1</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>db.cosmosdb.client_id</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.user_agent</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.connection_mode</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Direct</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.stacktrace</ATTRIBUTE-KEY><ATTRIBUTE-KEY>exception.type</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.sub_status_code</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.request_charge</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.regions_contacted</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>South Central US</ATTRIBUTE-VALUE><ATTRIBUTE-KEY>exception.message</ATTRIBUTE-KEY><ATTRIBUTE-KEY>db.cosmosdb.operation_type</ATTRIBUTE-KEY><ATTRIBUTE-VALUE>Create</ATTRIBUTE-VALUE></ACTIVITY>
<EVENT>Ideally, this should contain request diagnostics but request diagnostics is subject to change with each request as it contains few unique id. So just putting this tag with this static text to make sure event is getting generated for each test.</EVENT>
</OTelActivities>
    </Output>
  </Result>
</Results>