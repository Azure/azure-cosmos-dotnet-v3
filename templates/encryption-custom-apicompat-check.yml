# API Compatibility Check Template
# Checks for breaking API changes against a baseline version

parameters:
  - name: BaselineVersion
    type: string
    default: '1.0.0-preview07'
  - name: StrictMode
    type: boolean
    default: false
  - name: BuildConfiguration
    type: string
    default: 'Release'

steps:
  - checkout: self
    clean: true
    displayName: 'Checkout Source'

  - task: UseDotNet@2
    displayName: 'Use .NET 8.0 SDK'
    inputs:
      packageType: 'sdk'
      version: '8.x'

  - task: PowerShell@2
    displayName: 'Install ApiCompat Tool'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Installing Microsoft.DotNet.ApiCompat.Tool..." -ForegroundColor Yellow
        dotnet tool install --global Microsoft.DotNet.ApiCompat.Tool --version 8.0.* 2>&1 | Out-Null
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Tool installed successfully" -ForegroundColor Green
        } else {
            Write-Host "Tool may already be installed, checking..." -ForegroundColor Yellow
            $installed = dotnet tool list --global | Select-String "microsoft.dotnet.apicompat.tool"
            if ($installed) {
                Write-Host "✅ Tool already installed" -ForegroundColor Green
            } else {
                Write-Error "Failed to install ApiCompat tool"
            }
        }
      pwsh: true

  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet Packages'
    inputs:
      command: 'restore'
      projects: 'Microsoft.Azure.Cosmos.Encryption.Custom/src/Microsoft.Azure.Cosmos.Encryption.Custom.csproj'
      feedsToUse: 'config'
      nugetConfigPath: 'NuGet.config'

  - task: DotNetCoreCLI@2
    displayName: 'Build Current Version'
    inputs:
      command: 'build'
      projects: 'Microsoft.Azure.Cosmos.Encryption.Custom/src/Microsoft.Azure.Cosmos.Encryption.Custom.csproj'
      arguments: '--configuration ${{ parameters.BuildConfiguration }} --no-restore'

  - task: PowerShell@2
    displayName: 'Run API Compatibility Check'
    inputs:
      filePath: 'tools/apicompat-check.ps1'
      arguments: >-
        -BaselineVersion "${{ parameters.BaselineVersion }}"
        ${{ eq(parameters.StrictMode, true) && '-Strict' || '' }}
      pwsh: true
      failOnStderr: false
      errorActionPreference: 'continue'
    continueOnError: ${{ eq(parameters.StrictMode, false) }}

  - task: PowerShell@2
    displayName: 'Copy API Compat Results'
    inputs:
      targetType: 'inline'
      script: |
        # Create artifacts directory
        $artifactDir = "$(Build.ArtifactStagingDirectory)/ApiCompatReport"
        New-Item -ItemType Directory -Path $artifactDir -Force | Out-Null
        
        # Create a summary report
        $reportPath = "$artifactDir/api-compat-summary.txt"
        
        $report = @"
        API Compatibility Check Report
        ===============================
        Baseline Version: ${{ parameters.BaselineVersion }}
        Current Build: $(Build.BuildNumber)
        Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        Strict Mode: ${{ parameters.StrictMode }}
        
        Status: $(if ($LASTEXITCODE -eq 0) { 'PASSED' } else { 'FAILED' })
        
        For detailed results, see pipeline logs.
        
        Generated by: Azure DevOps Pipeline
        "@
        
        $report | Out-File $reportPath -Encoding UTF8
        
        Write-Host "Report created at: $reportPath"
      pwsh: true
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish API Compatibility Report'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/ApiCompatReport'
      ArtifactName: 'ApiCompatReport'
      publishLocation: 'Container'
    condition: always()

  - task: PowerShell@2
    displayName: 'Display Results Summary'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host ""
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "API Compatibility Check Complete" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "Baseline Version: ${{ parameters.BaselineVersion }}" -ForegroundColor Yellow
        Write-Host "Strict Mode: ${{ parameters.StrictMode }}" -ForegroundColor Yellow
        Write-Host ""
        
        if ($env:AGENT_JOBSTATUS -eq 'Succeeded' -or $env:AGENT_JOBSTATUS -eq 'SucceededWithIssues') {
            Write-Host "✅ No breaking API changes detected" -ForegroundColor Green
        } else {
            Write-Host "⚠️ API compatibility issues found" -ForegroundColor Yellow
            Write-Host "Review the logs above for details" -ForegroundColor Yellow
        }
        
        Write-Host ""
        Write-Host "For more information, see:" -ForegroundColor Gray
        Write-Host "  - docs/compatibility-testing/API-CHANGES.md" -ForegroundColor Gray
        Write-Host "  - Microsoft.Azure.Cosmos.Encryption.Custom/ApiCompatSuppressions.txt" -ForegroundColor Gray
        Write-Host ""
      pwsh: true
    condition: always()
