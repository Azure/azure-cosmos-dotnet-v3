# File: templates/build-test.yml

parameters:
  BuildConfiguration: ''
  Arguments: ''
  VmImage: '' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  OS: 'Windows'

jobs:
- job:
  displayName: Tests Debug
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.Tests
    condition: succeeded()
    inputs:
      command: test
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Tests/*.csproj'
      arguments: ${{ parameters.Arguments }} --configuration Debug /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CopyLocalLockFileAssemblies=true /p:OS=${{ parameters.OS }}
      publishTestResults: true
      nugetConfigPath: NuGet.config
      testRunTitle: Microsoft.Azure.Cosmos.Tests
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Build.SourcesDirectory)/Microsoft.Azure.Cosmos/tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
    displayName: Create Code coverage report
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
      
- job:
  displayName: PerformanceTests ${{ parameters.BuildConfiguration }}
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.PerformanceTests - Build
    condition: succeeded()
    inputs:
      command: build
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Performance.Tests/*.csproj'
      arguments: -c Release 
      nugetConfigPath: NuGet.config
  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.PerformanceTests - Run
    condition: succeeded()
    inputs:
      command: run
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Performance.Tests/*.csproj'
      arguments: --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }} --no-restore -c Release --framework netcoreapp3.1 --allCategories=GateBenchmark -- -j Medium  -m  --BaselineValidation
      publishTestResults: true
      testRunTitle: Microsoft.Azure.Cosmos.PerformanceTests

- job:
  displayName: EmulatorTests ${{ parameters.BuildConfiguration }}
  timeoutInMinutes: 120
  condition: and(succeeded(), eq('${{ parameters.OS }}', 'Windows'))
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - template:  emulator-setup.yml

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.EmulatorTests
    condition: succeeded()
    inputs:
      command: test
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.EmulatorTests/*.csproj'
      arguments: ${{ parameters.Arguments }} --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }}
      nugetConfigPath: NuGet.config
      publishTestResults: true
      testRunTitle: Microsoft.Azure.Cosmos.EmulatorTests

- job:
  displayName: Encryption EmulatorTests ${{ parameters.BuildConfiguration }}
  timeoutInMinutes: 90
  condition: and(succeeded(), eq('${{ parameters.OS }}', 'Windows'))
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - template:  emulator-setup.yml

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.Encryption.EmulatorTests
    condition: succeeded()
    inputs:
      command: test
      projects: 'Microsoft.Azure.Cosmos.Encryption/tests/EmulatorTests/*.csproj'
      arguments: ${{ parameters.Arguments }} --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }}
      nugetConfigPath: NuGet.config
      publishTestResults: true
      testRunTitle: Microsoft.Azure.Cosmos.Encryption.EmulatorTests
