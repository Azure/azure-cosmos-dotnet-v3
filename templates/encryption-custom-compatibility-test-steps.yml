# Reusable steps template for running compatibility tests against a specific version
parameters:
  - name: BuildConfiguration
    type: string
    default: 'Release'
  - name: TestVersion
    type: string
    default: ''

steps:
  - checkout: self
    clean: true
    displayName: 'Checkout Source'

  - task: UseDotNet@2
    displayName: 'Use .NET 6.0'
    inputs:
      packageType: 'runtime'
      version: '6.x'

  - task: UseDotNet@2
    displayName: 'Use .NET 8.0 SDK'
    inputs:
      packageType: 'sdk'
      version: '8.x'

  - task: PowerShell@2
    displayName: 'Display Test Configuration'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "Compatibility Test Configuration" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "Testing Against Version: ${{ parameters.TestVersion }}" -ForegroundColor Yellow
        Write-Host "Build Configuration: ${{ parameters.BuildConfiguration }}" -ForegroundColor Yellow
        Write-Host "Agent: $(Agent.Name)" -ForegroundColor Gray
        Write-Host "========================================" -ForegroundColor Cyan

  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet Packages'
    inputs:
      command: 'restore'
      projects: 'Microsoft.Azure.Cosmos.Encryption.Custom/tests/Microsoft.Azure.Cosmos.Encryption.Custom.CompatibilityTests/*.csproj'
      feedsToUse: 'config'
      nugetConfigPath: 'NuGet.config'
      verbosityRestore: 'Minimal'

  - task: DotNetCoreCLI@2
    displayName: 'Build Compatibility Tests'
    inputs:
      command: 'build'
      projects: 'Microsoft.Azure.Cosmos.Encryption.Custom/tests/Microsoft.Azure.Cosmos.Encryption.Custom.CompatibilityTests/*.csproj'
      arguments: '--configuration ${{ parameters.BuildConfiguration }} --no-restore -p:TargetEncryptionCustomVersion=${{ parameters.TestVersion }}'

  - task: DotNetCoreCLI@2
    displayName: 'Run Compatibility Tests (Version: ${{ parameters.TestVersion }})'
    inputs:
      command: 'test'
      projects: 'Microsoft.Azure.Cosmos.Encryption.Custom/tests/Microsoft.Azure.Cosmos.Encryption.Custom.CompatibilityTests/*.csproj'
      arguments: >
        --configuration ${{ parameters.BuildConfiguration }}
        --no-build
        --no-restore
        --logger "trx;LogFileName=compatibility-${{ parameters.TestVersion }}.trx"
        --logger "console;verbosity=normal"
        --results-directory $(Build.ArtifactStagingDirectory)/TestResults
        -p:TargetEncryptionCustomVersion=${{ parameters.TestVersion }}
    continueOnError: false

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'
      searchFolder: '$(Build.ArtifactStagingDirectory)/TestResults'
      mergeTestResults: false
      testRunTitle: 'Compatibility Tests - ${{ parameters.TestVersion }}'
      failTaskOnFailedTests: true
    condition: always()

  - task: PowerShell@2
    displayName: 'Display Package Resolution'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "Package Resolution Details" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Cyan
        
        $projectPath = "Microsoft.Azure.Cosmos.Encryption.Custom/tests/Microsoft.Azure.Cosmos.Encryption.Custom.CompatibilityTests/Microsoft.Azure.Cosmos.Encryption.Custom.CompatibilityTests.csproj"
        dotnet list $projectPath package | Where-Object { $_ -match "Microsoft.Azure.Cosmos" }
        
        Write-Host "========================================" -ForegroundColor Cyan
    condition: always()
